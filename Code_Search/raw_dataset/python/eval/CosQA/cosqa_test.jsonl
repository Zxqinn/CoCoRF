<<<<<<< HEAD
{"idx": "cosqa-train-12467", "doc": "sort by a token in string python", "code": "def _process_and_sort(s, force_ascii, full_process=True):\n            ts = utils.full_process(s, force_ascii=force_ascii) if full_process else s\n    tokens = ts.split()\n\n        sorted_string = u\" \".join(sorted(tokens))\n    return sorted_string.strip()", "method_name": "_process_and_sort", "docstring_tokens": "Return a cleaned string with token sorted ."}
{"idx": "cosqa-train-14641", "doc": "python check file is readonly", "code": "def is_readable(filename):\n        return os.path.isfile(filename) and os.access(filename, os.R_OK)", "method_name": "is_readable", "docstring_tokens": "Check if file is a regular file and is readable ."}
{"idx": "cosqa-train-13074", "doc": "declaring empty numpy array in python", "code": "def empty(self, name, **kwargs):\n                return self._write_op(self._empty_nosync, name, **kwargs)", "method_name": "empty", "docstring_tokens": "Create an array . Keyword arguments as per : func : zarr . creation . empty ."}
{"idx": "cosqa-train-14677", "doc": "test for iterable is string in python", "code": "def is_iterable_but_not_string(obj):\n        return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)", "method_name": "is_iterable_but_not_string", "docstring_tokens": "Determine whether or not obj is iterable but not a string ( eg a list set tuple etc ) ."}
{"idx": "cosqa-train-9500", "doc": "python print results of query loop", "code": "def print_runs(query):\n        if query is None:\n        return\n\n    for tup in query:\n        print((\"{0} @ {1} - {2} id: {3} group: {4}\".format(\n            tup.end, tup.experiment_name, tup.project_name,\n            tup.experiment_group, tup.run_group)))", "method_name": "print_runs", "docstring_tokens": "Print all rows in this result query ."}
{"idx": "cosqa-train-1335", "doc": "how to save header of fits file to export python", "code": "def write_fits(self, fitsfile):\n                tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)", "method_name": "write_fits", "docstring_tokens": "Write the ROI model to a FITS file ."}
{"idx": "cosqa-train-19221", "doc": "python calc page align", "code": "def page_align_content_length(length):\n            mod = length % _PAGEBLOB_BOUNDARY\n    if mod != 0:\n        return length + (_PAGEBLOB_BOUNDARY - mod)\n    return length", "method_name": "page_align_content_length", "docstring_tokens": "Compute page boundary alignment : param int length : content length : rtype : int : return : aligned byte boundary"}
{"idx": "cosqa-train-971", "doc": "python numpy array as float", "code": "def as_float_array(a):\n        return np.asarray(a, dtype=np.quaternion).view((np.double, 4))", "method_name": "as_float_array", "docstring_tokens": "View the quaternion array as an array of floats"}
{"idx": "cosqa-train-18162", "doc": "input string that replaces occurences python", "code": "def __replace_all(repls: dict, input: str) -> str:\n        return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)", "method_name": "__replace_all", "docstring_tokens": "Replaces from a string ** input ** all the occurrences of some symbols according to mapping ** repls ** ."}
{"idx": "cosqa-train-14635", "doc": "python check all items in list are ints", "code": "def is_iterable_of_int(l):\n    r    if not is_iterable(l):\n        return False\n\n    return all(is_int(value) for value in l)", "method_name": "is_iterable_of_int", "docstring_tokens": "r Checks if l is iterable and contains only integral types"}
{"idx": "cosqa-train-9770", "doc": "how to save variable to text file python", "code": "def save(variable, filename):\n        fileObj = open(filename, 'wb')\n    pickle.dump(variable, fileObj)\n    fileObj.close()", "method_name": "save", "docstring_tokens": "Save variable on given path using Pickle Args : variable : what to save path ( str ) : path of the output"}
{"idx": "cosqa-train-11848", "doc": "how to skip an index in a for loop python", "code": "def stop_at(iterable, idx):\n        for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item", "method_name": "stop_at", "docstring_tokens": "Stops iterating before yielding the specified idx ."}
{"idx": "cosqa-train-13623", "doc": "how to create a tokenization code in python", "code": "def token(name):\n        def wrap(f):\n        tokenizers.append((name, f))\n        return f\n\n    return wrap", "method_name": "token", "docstring_tokens": "Marker for a token"}
{"idx": "cosqa-train-19558", "doc": "python raise without parentheses", "code": "def assert_or_raise(stmt: bool, exception: Exception,\n                    *exception_args, **exception_kwargs) -> None:\n    if not stmt:\n    raise exception(*exception_args, **exception_kwargs)", "method_name": "assert_or_raise", "docstring_tokens": "If the statement is false raise the given exception ."}
{"idx": "cosqa-train-7659", "doc": "how to seperate list with commas python", "code": "def _return_comma_list(self, l):\n                if isinstance(l, (text_type, int)):\n            return l\n\n        if not isinstance(l, list):\n            raise TypeError(l, ' should be a list of integers, \\\nnot {0}'.format(type(l)))\n\n        str_ids = ','.join(str(i) for i in l)\n\n        return str_ids", "method_name": "_return_comma_list", "docstring_tokens": "get a list and return a string with comma separated list values Examples [ to ta ] will return to ta ."}
{"idx": "cosqa-train-6056", "doc": "python asynchronous function call return", "code": "def asynchronous(function, event):\n        thread = Thread(target=synchronous, args=(function, event))\n    thread.daemon = True\n    thread.start()", "method_name": "asynchronous", "docstring_tokens": "Runs the function asynchronously taking care of exceptions ."}
{"idx": "cosqa-train-11671", "doc": "how to make a seconds to time in python", "code": "def time2seconds(t):\n        return t.hour * 3600 + t.minute * 60 + t.second + float(t.microsecond) / 1e6", "method_name": "time2seconds", "docstring_tokens": "Returns seconds since 0h00 ."}
{"idx": "cosqa-train-14597", "doc": "python cast true or false as numbers", "code": "def _to_numeric(val):\n        if isinstance(val, (int, float, datetime.datetime, datetime.timedelta)):\n        return val\n    return float(val)", "method_name": "_to_numeric", "docstring_tokens": "Helper function for conversion of various data types into numeric representation ."}
{"idx": "cosqa-train-2166", "doc": "add milliseconds to datetime python", "code": "def datetime_to_ms(dt):\n        seconds = calendar.timegm(dt.utctimetuple())\n    return seconds * 1000 + int(dt.microsecond / 1000)", "method_name": "datetime_to_ms", "docstring_tokens": "Converts a datetime to a millisecond accuracy timestamp"}
{"idx": "cosqa-train-7579", "doc": "how to read the last n lines of a program on python", "code": "def get_readline_tail(self, n=10):\n                end = self.shell.readline.get_current_history_length() + 1\n        start = max(end-n, 1)\n        ghi = self.shell.readline.get_history_item\n        return [ghi(x) for x in range(start, end)]", "method_name": "get_readline_tail", "docstring_tokens": "Get the last n items in readline history ."}
{"idx": "cosqa-train-11454", "doc": "python mysql get list of table columns", "code": "def get_table_columns(dbconn, tablename):\n        cur = dbconn.cursor()\n    cur.execute(\"PRAGMA table_info('%s');\" % tablename)\n    info = cur.fetchall()\n    cols = [(i[1], i[2]) for i in info]\n    return cols", "method_name": "get_table_columns", "docstring_tokens": "Return a list of tuples specifying the column name and type"}
{"idx": "cosqa-train-17712", "doc": "how to get domain part of a url in python", "code": "def url_host(url: str) -> str:\n        from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''", "method_name": "url_host", "docstring_tokens": "Parses hostname from URL . : param url : URL : return : hostname"}
{"idx": "cosqa-train-18531", "doc": "python flatten a nested dictionaary", "code": "def flatten_multidict(multidict):\n        return dict([(key, value if len(value) > 1 else value[0])\n                 for (key, value) in multidict.iterlists()])", "method_name": "flatten_multidict", "docstring_tokens": "Return flattened dictionary from MultiDict ."}
{"idx": "cosqa-train-3393", "doc": "python session set get", "code": "def _session_set(self, key, value):\n                self.session[self._session_key(key)] = value", "method_name": "_session_set", "docstring_tokens": "Saves a value to session ."}
{"idx": "cosqa-dev-5", "doc": "python save graph into file", "code": "def to_dotfile(G: nx.DiGraph, filename: str):\n        A = to_agraph(G)\n    A.write(filename)", "method_name": "to_dotfile", "docstring_tokens": "Output a networkx graph to a DOT file ."}
{"idx": "cosqa-train-10817", "doc": "chmod python windows to remove file", "code": "def rmfile(path):\n        if osp.isfile(path):\n        if is_win:\n            os.chmod(path, 0o777)\n        os.remove(path)", "method_name": "rmfile", "docstring_tokens": "Ensure file deleted also on * Windows * where read - only files need special treatment ."}
{"idx": "cosqa-train-6390", "doc": "add suffixes on concat python", "code": "def add_suffix(fullname, suffix):\n        name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext", "method_name": "add_suffix", "docstring_tokens": "Add suffix to a full file name"}
{"idx": "cosqa-train-11396", "doc": "how to check python object iterable", "code": "def is_iterable_but_not_string(obj):\n        return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)", "method_name": "is_iterable_but_not_string", "docstring_tokens": "Determine whether or not obj is iterable but not a string ( eg a list set tuple etc ) ."}
{"idx": "cosqa-train-8122", "doc": "python 3 tkinter open file dialog", "code": "def askopenfilename(**kwargs):\n        try:\n        from Tkinter import Tk\n        import tkFileDialog as filedialog\n    except ImportError:\n        from tkinter import Tk, filedialog\n    root = Tk()\n    root.withdraw()\n    root.update()\n    filenames = filedialog.askopenfilename(**kwargs)\n    root.destroy()\n    return filenames", "method_name": "askopenfilename", "docstring_tokens": "Return file name ( s ) from Tkinter s file open dialog ."}
{"idx": "cosqa-train-11614", "doc": "how to indent self python", "code": "def _pad(self):\n        if self._indent:\n      self.whitespace(self._indent * len(self._open_elements))", "method_name": "_pad", "docstring_tokens": "Pads the output with an amount of indentation appropriate for the number of open element ."}
{"idx": "cosqa-train-10474", "doc": "tracking centroid of an object python", "code": "def compute_centroid(points):\n        lats = [p[1] for p in points]\n    lons = [p[0] for p in points]\n    return Point(np.mean(lats), np.mean(lons), None)", "method_name": "compute_centroid", "docstring_tokens": "Computes the centroid of set of points"}
{"idx": "cosqa-train-10122", "doc": "python3 ctypes return float array", "code": "def cfloat32_array_to_numpy(cptr, length):\n        if isinstance(cptr, ctypes.POINTER(ctypes.c_float)):\n        return np.fromiter(cptr, dtype=np.float32, count=length)\n    else:\n        raise RuntimeError('Expected float pointer')", "method_name": "cfloat32_array_to_numpy", "docstring_tokens": "Convert a ctypes float pointer array to a numpy array ."}
{"idx": "cosqa-train-13872", "doc": "how to make paragraphs in python", "code": "def paragraph(separator='\\n\\n', wrap_start='', wrap_end='',\n              html=False, sentences_quantity=3):\n        return paragraphs(quantity=1, separator=separator, wrap_start=wrap_start,\n                      wrap_end=wrap_end, html=html,\n                      sentences_quantity=sentences_quantity)", "method_name": "paragraph", "docstring_tokens": "Return a random paragraph ."}
{"idx": "cosqa-train-17177", "doc": "python rest requests delete", "code": "def delete(self, endpoint: str, **kwargs) -> dict:\n                return self._request('DELETE', endpoint, **kwargs)", "method_name": "delete", "docstring_tokens": "HTTP DELETE operation to API endpoint ."}
{"idx": "cosqa-train-5418", "doc": "python replace month number", "code": "def replace_month_abbr_with_num(date_str, lang=DEFAULT_DATE_LANG):\n        num, abbr = get_month_from_date_str(date_str, lang)\n    return re.sub(abbr, str(num), date_str, flags=re.IGNORECASE)", "method_name": "replace_month_abbr_with_num", "docstring_tokens": "Replace month strings occurrences with month number ."}
{"idx": "cosqa-train-9873", "doc": "how to tell what type of data object is in python", "code": "def is_integer(obj):\n        if PYTHON3:\n        return isinstance(obj, int)\n    return isinstance(obj, (int, long))", "method_name": "is_integer", "docstring_tokens": "Is this an integer ."}
{"idx": "cosqa-train-13440", "doc": "python jsonschema validate schema file", "code": "def _validate(data, schema, ac_schema_safe=True, **options):\n        try:\n        jsonschema.validate(data, schema, **options)\n\n    except (jsonschema.ValidationError, jsonschema.SchemaError,\n            Exception) as exc:\n        if ac_schema_safe:\n            return (False, str(exc))          raise\n\n    return (True, '')", "method_name": "_validate", "docstring_tokens": "See the descritpion of : func : validate for more details of parameters and return value ."}
{"idx": "cosqa-train-18685", "doc": "get wechat access token python", "code": "def access_token(self):\n                access_token = self.session.get(self.access_token_key)\n        if access_token:\n            if not self.expires_at:\n                                return access_token\n\n            timestamp = time.time()\n            if self.expires_at - timestamp > 60:\n                return access_token\n\n        self.fetch_access_token()\n        return self.session.get(self.access_token_key)", "method_name": "access_token", "docstring_tokens": "WeChat access token"}
{"idx": "cosqa-train-12523", "doc": "python change str value to int", "code": "def str2int(num, radix=10, alphabet=BASE85):\n        return NumConv(radix, alphabet).str2int(num)", "method_name": "str2int", "docstring_tokens": "helper function for quick base conversions from strings to integers"}
{"idx": "cosqa-train-7800", "doc": "implementing drag and drop python", "code": "def drag_and_drop(self, droppable):\n                self.scroll_to()\n        ActionChains(self.parent.driver).drag_and_drop(self._element, droppable._element).perform()", "method_name": "drag_and_drop", "docstring_tokens": "Performs drag a element to another elmenet ."}
{"idx": "cosqa-train-9131", "doc": "get unique list from two lists python", "code": "def unique_list(lst):\n        uniq = []\n    for item in lst:\n        if item not in uniq:\n            uniq.append(item)\n    return uniq", "method_name": "unique_list", "docstring_tokens": "Make a list unique retaining order of initial appearance ."}
{"idx": "cosqa-train-5981", "doc": "python 3 not runnning in git bash", "code": "def check_git():\n        try:\n        with open(os.devnull, \"wb\") as devnull:\n            subprocess.check_call([\"git\", \"--version\"], stdout=devnull, stderr=devnull)\n    except:\n        raise RuntimeError(\"Please make sure git is installed and on your path.\")", "method_name": "check_git", "docstring_tokens": "Check if git command is available ."}
{"idx": "cosqa-train-15181", "doc": "create unknown number of names to print in python", "code": "def prt_nts(data_nts, prtfmt=None, prt=sys.stdout, nt_fields=None, **kws):\n        prt_txt(prt, data_nts, prtfmt, nt_fields, **kws)", "method_name": "prt_nts", "docstring_tokens": "Print list of namedtuples into a table using prtfmt ."}
{"idx": "cosqa-train-13426", "doc": "python json if element exists", "code": "def task_property_present_predicate(service, task, prop):\n        try:\n        response = get_service_task(service, task)\n    except Exception as e:\n        pass\n\n    return (response is not None) and (prop in response)", "method_name": "task_property_present_predicate", "docstring_tokens": "True if the json_element passed is present for the task specified ."}
{"idx": "cosqa-train-16586", "doc": "number of unique values in list python", "code": "def count_list(the_list):\n        count = the_list.count\n    result = [(item, count(item)) for item in set(the_list)]\n    result.sort()\n    return result", "method_name": "count_list", "docstring_tokens": "Generates a count of the number of times each unique item appears in a list"}
{"idx": "cosqa-train-13950", "doc": "how to randomize items in a list in python", "code": "def get_randomized_guid_sample(self, item_count):\n                dataset = self.get_whitelist()\n        random.shuffle(dataset)\n        return dataset[:item_count]", "method_name": "get_randomized_guid_sample", "docstring_tokens": "Fetch a subset of randomzied GUIDs from the whitelist"}
{"idx": "cosqa-train-19258", "doc": "python windows check for keypress", "code": "def _kbhit_unix() -> bool:\n        dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []", "method_name": "_kbhit_unix", "docstring_tokens": "Under UNIX : is a keystroke available?"}
{"idx": "cosqa-train-14549", "doc": "python bind scrollbar to canvas", "code": "def set_scrollregion(self, event=None):\n                self.canvas.configure(scrollregion=self.canvas.bbox('all'))", "method_name": "set_scrollregion", "docstring_tokens": "Set the scroll region on the canvas"}
{"idx": "cosqa-train-13999", "doc": "python setlevel how to only record error", "code": "def print_fatal_results(results, level=0):\n        print_level(logger.critical, _RED + \"[X] Fatal Error: %s\", level, results.error)", "method_name": "print_fatal_results", "docstring_tokens": "Print fatal errors that occurred during validation runs ."}
{"idx": "cosqa-dev-442", "doc": "format string with *args python", "code": "def safe_format(s, **kwargs):\n    return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))", "method_name": "safe_format", "docstring_tokens": ": type s str"}
{"idx": "cosqa-train-17869", "doc": "python get hostip from url", "code": "def url_host(url: str) -> str:\n        from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''", "method_name": "url_host", "docstring_tokens": "Parses hostname from URL . : param url : URL : return : hostname"}
{"idx": "cosqa-train-11505", "doc": "python numpy masked vailding", "code": "def asMaskedArray(self):\n                return ma.masked_array(data=self.data, mask=self.mask, fill_value=self.fill_value)", "method_name": "asMaskedArray", "docstring_tokens": "Creates converts to a masked array"}
{"idx": "cosqa-train-14720", "doc": "python child widget close signal", "code": "def closeEvent(self, e):\n                self.emit('close_widget')\n        super(DockWidget, self).closeEvent(e)", "method_name": "closeEvent", "docstring_tokens": "Qt slot when the window is closed ."}
{"idx": "cosqa-train-17314", "doc": "python read from csv into numpy array", "code": "def csv_to_numpy(string_like, dtype=None):          stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')", "method_name": "csv_to_numpy", "docstring_tokens": "Convert a CSV object to a numpy array ."}
{"idx": "cosqa-train-19154", "doc": "cast string to bytearray python", "code": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"      if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')", "method_name": "to_bytes", "docstring_tokens": "Convert anything to a bytearray . See - http : // stackoverflow . com / questions / 7585435 / best - way - to - convert - string - to - bytes - in - python - 3 - http : // stackoverflow . com / questions / 10459067 / how - to - convert - my - bytearrayb - x9e - x18k - x9a - to - something - like - this - x9e - x1"}
{"idx": "cosqa-train-12100", "doc": "load str into python object", "code": "def loads(s, model=None, parser=None):\n        with StringIO(s) as f:\n        return load(f, model=model, parser=parser)", "method_name": "loads", "docstring_tokens": "Deserialize s ( a str ) to a Python object ."}
{"idx": "cosqa-train-13463", "doc": "python ldap get all groups a user belongs to", "code": "def get_groups(self, username):\n                username = ldap.filter.escape_filter_chars(self._byte_p2(username))\n        userdn = self._get_user(username, NO_ATTR)\n\n        searchfilter = self.group_filter_tmpl % {\n            'userdn': userdn,\n            'username': username\n        }\n\n        groups = self._search(searchfilter, NO_ATTR, self.groupdn)\n        ret = []\n        for entry in groups:\n            ret.append(self._uni(entry[0]))\n        return ret", "method_name": "get_groups", "docstring_tokens": "Get all groups of a user"}
{"idx": "cosqa-train-19108", "doc": "python check type if string", "code": "def is_unicode(string):\n        str_type = str(type(string))\n\n    if str_type.find('str') > 0 or str_type.find('unicode') > 0:\n        return True\n\n    return False", "method_name": "is_unicode", "docstring_tokens": "Validates that the object itself is some kinda string"}
{"idx": "cosqa-train-10931", "doc": "python get current globals", "code": "def caller_locals():\n        import inspect\n    frame = inspect.currentframe()\n    try:\n        return frame.f_back.f_back.f_locals\n    finally:\n        del frame", "method_name": "caller_locals", "docstring_tokens": "Get the local variables in the caller s frame ."}
{"idx": "cosqa-train-6946", "doc": "get child loggers python", "code": "def _get_loggers():\n        from .. import loader\n    modules = loader.get_package_modules('logger')\n    return list(loader.get_plugins(modules, [_Logger]))", "method_name": "_get_loggers", "docstring_tokens": "Return list of Logger classes ."}
{"idx": "cosqa-train-19023", "doc": "how to know if a text file is empty in python", "code": "def _cnx_is_empty(in_file):\n        with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True", "method_name": "_cnx_is_empty", "docstring_tokens": "Check if cnr or cns files are empty ( only have a header )"}
{"idx": "cosqa-train-15782", "doc": "python normal distribution p values", "code": "def EvalGaussianPdf(x, mu, sigma):\n        return scipy.stats.norm.pdf(x, mu, sigma)", "method_name": "EvalGaussianPdf", "docstring_tokens": "Computes the unnormalized PDF of the normal distribution ."}
{"idx": "cosqa-train-17937", "doc": "python ctypes array of arrays", "code": "def GetAllPixelColors(self) -> ctypes.Array:\n                return self.GetPixelColorsOfRect(0, 0, self.Width, self.Height)", "method_name": "GetAllPixelColors", "docstring_tokens": "Return ctypes . Array an iterable array of int values in argb ."}
{"idx": "cosqa-train-14548", "doc": "scale 1d array python to between 0 and 1", "code": "def _rescale_array(self, array, scale, zero):\n                if scale != 1.0:\n            sval = numpy.array(scale, dtype=array.dtype)\n            array *= sval\n        if zero != 0.0:\n            zval = numpy.array(zero, dtype=array.dtype)\n            array += zval", "method_name": "_rescale_array", "docstring_tokens": "Scale the input array"}
{"idx": "cosqa-train-12156", "doc": "python upper case lower case converter", "code": "def upcaseTokens(s,l,t):\n        return [ tt.upper() for tt in map(_ustr,t) ]", "method_name": "upcaseTokens", "docstring_tokens": "Helper parse action to convert tokens to upper case ."}
{"idx": "cosqa-train-8061", "doc": "ply python expression evaluator", "code": "def build(self, **kwargs):\n                self.lexer = ply.lex.lex(object=self, **kwargs)", "method_name": "build", "docstring_tokens": "Build the lexer ."}
{"idx": "cosqa-train-13196", "doc": "python hashlib calc sha1 of file", "code": "def _get_file_sha1(file):\n        bits = file.read()\n    file.seek(0)\n    h = hashlib.new('sha1', bits).hexdigest()\n    return h", "method_name": "_get_file_sha1", "docstring_tokens": "Return the SHA1 hash of the given a file - like object as file . This will seek the file back to 0 when it s finished ."}
{"idx": "cosqa-train-11579", "doc": "python pdb no capture std output", "code": "def set_trace():\n            pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)", "method_name": "set_trace", "docstring_tokens": "Start a Pdb instance at the calling frame with stdout routed to sys . __stdout__ ."}
{"idx": "cosqa-train-17702", "doc": "python how to write a factorial", "code": "def factorial(n, mod=None):\n        if not (isinstance(n, int) and n >= 0):\n        raise ValueError(\"'n' must be a non-negative integer.\")\n    if mod is not None and not (isinstance(mod, int) and mod > 0):\n        raise ValueError(\"'mod' must be a positive integer\")\n    result = 1\n    if n == 0:\n        return 1\n    for i in range(2, n+1):\n        result *= i\n        if mod:\n            result %= mod\n    return result", "method_name": "factorial", "docstring_tokens": "Calculates factorial iteratively . If mod is not None then return ( n! % mod ) Time Complexity - O ( n )"}
{"idx": "cosqa-train-11019", "doc": "python get the last column", "code": "def get_last_row(dbconn, tablename, n=1, uuid=None):\n        return fetch(dbconn, tablename, n, uuid, end=True)", "method_name": "get_last_row", "docstring_tokens": "Returns the last n rows in the table"}
{"idx": "cosqa-train-13220", "doc": "python how to change file extension", "code": "def lower_ext(abspath):\n        fname, ext = os.path.splitext(abspath)\n    return fname + ext.lower()", "method_name": "lower_ext", "docstring_tokens": "Convert file extension to lowercase ."}
{"idx": "cosqa-train-6758", "doc": "python get process memory info", "code": "def machine_info():\n        import psutil\n    BYTES_IN_GIG = 1073741824.0\n    free_bytes = psutil.virtual_memory().total\n    return [{\"memory\": float(\"%.1f\" % (free_bytes / BYTES_IN_GIG)), \"cores\": multiprocessing.cpu_count(),\n             \"name\": socket.gethostname()}]", "method_name": "machine_info", "docstring_tokens": "Retrieve core and memory information for the current machine ."}
{"idx": "cosqa-dev-481", "doc": "check if 2 string are equal python", "code": "def indexes_equal(a: Index, b: Index) -> bool:\n        return str(a) == str(b)", "method_name": "indexes_equal", "docstring_tokens": "Are two indexes equal? Checks by comparing str () versions of them . ( AM UNSURE IF THIS IS ENOUGH . )"}
{"idx": "cosqa-train-11094", "doc": "flask python create one table sqlalchemy", "code": "def create_db(app, appbuilder):\n        from flask_appbuilder.models.sqla import Base\n\n    _appbuilder = import_application(app, appbuilder)\n    engine = _appbuilder.get_session.get_bind(mapper=None, clause=None)\n    Base.metadata.create_all(engine)\n    click.echo(click.style(\"DB objects created\", fg=\"green\"))", "method_name": "create_db", "docstring_tokens": "Create all your database objects ( SQLAlchemy specific ) ."}
{"idx": "cosqa-train-8731", "doc": "clean output folder in python", "code": "def cleanup():\n        if _output_dir and os.path.exists(_output_dir):\n        log.msg_warn(\"Cleaning up output directory at '{output_dir}' ...\"\n                     .format(output_dir=_output_dir))\n        if not _dry_run:\n            shutil.rmtree(_output_dir)", "method_name": "cleanup", "docstring_tokens": "Cleanup the output directory"}
{"idx": "cosqa-train-19285", "doc": "python print nodes binary tree", "code": "def debugTreePrint(node,pfx=\"->\"):\n    print pfx,node.item\n  for c in node.children:\n    debugTreePrint(c,\"  \"+pfx)", "method_name": "debugTreePrint", "docstring_tokens": "Purely a debugging aid : Ascii - art picture of a tree descended from node"}
{"idx": "cosqa-train-15941", "doc": "python query string parsing", "code": "def urlencoded(body, charset='ascii', **kwargs):\n        return parse_query_string(text(body, charset=charset), False)", "method_name": "urlencoded", "docstring_tokens": "Converts query strings into native Python objects"}
{"idx": "cosqa-train-15200", "doc": "cycle through a folder of images python", "code": "def each_img(dir_path):\n        for fname in os.listdir(dir_path):\n        if fname.endswith('.jpg') or fname.endswith('.png') or fname.endswith('.bmp'):\n            yield fname", "method_name": "each_img", "docstring_tokens": "Iterates through each image in the given directory . ( not recursive ) : param dir_path : Directory path where images files are present : return : Iterator to iterate through image files"}
{"idx": "cosqa-train-17344", "doc": "check if a date is valid python", "code": "def valid_date(x: str) -> bool:\n        try:\n        if x != dt.datetime.strptime(x, DATE_FORMAT).strftime(DATE_FORMAT):\n            raise ValueError\n        return True\n    except ValueError:\n        return False", "method_name": "valid_date", "docstring_tokens": "Retrun True if x is a valid YYYYMMDD date ; otherwise return False ."}
{"idx": "cosqa-train-5599", "doc": "python spherical bessel functions", "code": "def sbessely(x, N):\n        out = np.zeros(N, dtype=np.float64)\n\n    out[0] = -np.cos(x) / x\n    out[1] = -np.cos(x) / (x ** 2) - np.sin(x) / x\n\n    for n in xrange(2, N):\n        out[n] = ((2.0 * n - 1.0) / x) * out[n - 1] - out[n - 2]\n\n    return out", "method_name": "sbessely", "docstring_tokens": "Returns a vector of spherical bessel functions yn : x : The argument . N : values of n will run from 0 to N - 1 ."}
{"idx": "cosqa-train-19367", "doc": "how to check a file is empty in python", "code": "def _cnx_is_empty(in_file):\n        with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True", "method_name": "_cnx_is_empty", "docstring_tokens": "Check if cnr or cns files are empty ( only have a header )"}
{"idx": "cosqa-train-14104", "doc": "python stop process multiprocessing", "code": "def stop(self, timeout=None):\n                self.stopping = True\n\n        for process in list(self.processes):\n            self.stop_process(process, timeout=timeout)", "method_name": "stop", "docstring_tokens": "Initiates a graceful stop of the processes"}
{"idx": "cosqa-train-9279", "doc": "python make sure all words are separated by a single space", "code": "def sanitize_word(s):\n        s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')", "method_name": "sanitize_word", "docstring_tokens": "Remove non - alphanumerical characters from metric word . And trim excessive underscores ."}
{"idx": "cosqa-train-12138", "doc": "making a multidimensional array of only 1 in python", "code": "def A(*a):\n        return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "method_name": "A", "docstring_tokens": "convert iterable object into numpy array"}
{"idx": "cosqa-train-15519", "doc": "python initialize variable of an object", "code": "def __init__(self):\n                self.state = self.STATE_INITIALIZING\n        self.state_start = time.time()", "method_name": "__init__", "docstring_tokens": "Initialize the state of the object"}
{"idx": "cosqa-train-6551", "doc": "python elasticsearch limit results", "code": "def scan(client, query=None, scroll='5m', raise_on_error=True,\n         preserve_order=False, size=1000, **kwargs):\n        if not preserve_order:\n        kwargs['search_type'] = 'scan'\n        resp = client.search(body=query, scroll=scroll, size=size, **kwargs)\n\n    scroll_id = resp.get('_scroll_id')\n    if scroll_id is None:\n        return\n\n    first_run = True\n    while True:\n                if preserve_order and first_run:\n            first_run = False\n        else:\n            resp = client.scroll(scroll_id, scroll=scroll)\n\n        for hit in resp['hits']['hits']:\n            yield hit\n\n                if resp[\"_shards\"][\"failed\"]:\n            logger.warning(\n                'Scroll request has failed on %d shards out of %d.',\n                resp['_shards']['failed'], resp['_shards']['total']\n            )\n            if raise_on_error:\n                raise ScanError(\n                    'Scroll request has failed on %d shards out of %d.' %\n                    (resp['_shards']['failed'], resp['_shards']['total'])\n                )\n\n        scroll_id = resp.get('_scroll_id')\n                if scroll_id is None or not resp['hits']['hits']:\n            break", "method_name": "scan", "docstring_tokens": "Simple abstraction on top of the : meth : ~elasticsearch . Elasticsearch . scroll api - a simple iterator that yields all hits as returned by underlining scroll requests . By default scan does not return results in any pre - determined order . To have a standard order in the returned documents ( either by score or explicit sort definition ) when scrolling use preserve_order = True . This may be an expensive operation and will negate the performance benefits of using scan . : arg client : instance of : class : ~elasticsearch . Elasticsearch to use : arg query : body for the : meth : ~elasticsearch . Elasticsearch . search api : arg scroll : Specify how long a consistent view of the index should be maintained for scrolled search : arg raise_on_error : raises an exception ( ScanError ) if an error is encountered ( some shards fail to execute ) . By default we raise . : arg preserve_order : don t set the search_type to scan - this will cause the scroll to paginate with preserving the order . Note that this can be an extremely expensive operation and can easily lead to unpredictable results use with caution . : arg size : size ( per shard ) of the batch send at each iteration . Any additional keyword arguments will be passed to the initial : meth : ~elasticsearch . Elasticsearch . search call :: scan ( es query = { query : { match : { title : python }}} index = orders - * doc_type = books )"}
{"idx": "cosqa-train-5203", "doc": "how to force exit python without raise", "code": "def __exit__(self, type, value, traceback):\n                if not self.asarfile:\n            return\n\n        self.asarfile.close()\n        self.asarfile = None", "method_name": "__exit__", "docstring_tokens": "When the with statement ends ."}
{"idx": "cosqa-train-10049", "doc": "python weak reference to bound method", "code": "def attr_cache_clear(self):\n        node = extract_node(\"\"\"def cache_clear(self): pass\"\"\")\n        return BoundMethod(proxy=node, bound=self._instance.parent.scope())", "method_name": "attr_cache_clear", "docstring_tokens": ""}
{"idx": "cosqa-train-10725", "doc": "calling index iterable python", "code": "def stop_at(iterable, idx):\n        for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item", "method_name": "stop_at", "docstring_tokens": "Stops iterating before yielding the specified idx ."}
{"idx": "cosqa-train-12736", "doc": "python datetime maybe undefined", "code": "def date_to_datetime(x):\n        if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x", "method_name": "date_to_datetime", "docstring_tokens": "Convert a date into a datetime"}
{"idx": "cosqa-train-8954", "doc": "python go to next page", "code": "def accel_next(self, *args):\n                if self.get_notebook().get_current_page() + 1 == self.get_notebook().get_n_pages():\n            self.get_notebook().set_current_page(0)\n        else:\n            self.get_notebook().next_page()\n        return True", "method_name": "accel_next", "docstring_tokens": "Callback to go to the next tab . Called by the accel key ."}
{"idx": "cosqa-train-6854", "doc": "filling null value sin data frame in python", "code": "def clean_dataframe(df):\n        df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df", "method_name": "clean_dataframe", "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"}
{"idx": "cosqa-train-5484", "doc": "python run external command and get output", "code": "def check_output(args, env=None, sp=subprocess):\n        log.debug('calling %s with env %s', args, env)\n    output = sp.check_output(args=args, env=env)\n    log.debug('output: %r', output)\n    return output", "method_name": "check_output", "docstring_tokens": "Call an external binary and return its stdout ."}
{"idx": "cosqa-train-13589", "doc": "how to compile python program to use in c++", "code": "def cpp_prog_builder(build_context, target):\n        yprint(build_context.conf, 'Build CppProg', target)\n    workspace_dir = build_context.get_workspace('CppProg', target.name)\n    build_cpp(build_context, target, target.compiler_config, workspace_dir)", "method_name": "cpp_prog_builder", "docstring_tokens": "Build a C ++ binary executable"}
{"idx": "cosqa-train-13360", "doc": "python img to bytearray", "code": "def to_bytes(self):\n\t\tchunks = [PNG_SIGN]\n\t\tchunks.extend(c[1] for c in self.chunks)\n\t\treturn b\"\".join(chunks)", "method_name": "to_bytes", "docstring_tokens": "Convert the entire image to bytes . : rtype : bytes"}
{"idx": "cosqa-train-9903", "doc": "how to use access token oauth python", "code": "def fetch_token(self, **kwargs):\n                return super(AsanaOAuth2Session, self).fetch_token(self.token_url, client_secret=self.client_secret, **kwargs)", "method_name": "fetch_token", "docstring_tokens": "Exchange a code ( and state token ) for a bearer token"}
{"idx": "cosqa-train-15551", "doc": "have python line continue on to next line", "code": "def advance_one_line(self):\n        current_line = self._current_token.line_number\n    while current_line == self._current_token.line_number:\n      self._current_token = ConfigParser.Token(*next(self._token_generator))", "method_name": "advance_one_line", "docstring_tokens": "Advances to next line ."}
{"idx": "cosqa-train-10234", "doc": "precision of ints in python", "code": "def round_to_int(number, precision):\n        precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded", "method_name": "round_to_int", "docstring_tokens": "Round a number to a precision"}
{"idx": "cosqa-train-5838", "doc": "modify the dice roll program to call a function for the die roll s python", "code": "def roll_dice():\n        sums = 0      while True:\n        roll = random.randint(1, 6)\n        sums += roll\n        if(input(\"Enter y or n to continue: \").upper()) == 'N':\n            print(sums)              break", "method_name": "roll_dice", "docstring_tokens": "Roll a die ."}
{"idx": "cosqa-train-10253", "doc": "python 'namespace' object is not iterable", "code": "def __add_namespaceinfo(self, ni):\n                self.__ns_uri_map[ni.uri] = ni\n        for prefix in ni.prefixes:\n            self.__prefix_map[prefix] = ni", "method_name": "__add_namespaceinfo", "docstring_tokens": "Internal method to directly add a _NamespaceInfo object to this set . No sanity checks are done ( e . g . checking for prefix conflicts ) so be sure to do it yourself before calling this ."}
{"idx": "cosqa-train-3453", "doc": "how to specify seed for python random", "code": "def generate_seed(seed):\n        if seed is None:\n        random.seed()\n        seed = random.randint(0, sys.maxsize)\n    random.seed(a=seed)\n\n    return seed", "method_name": "generate_seed", "docstring_tokens": "Generate seed for random number generator"}
{"idx": "cosqa-train-10014", "doc": "python use default arg", "code": "def arg_default(*args, **kwargs):\n        parser = argparse.ArgumentParser()\n    parser.add_argument(*args, **kwargs)\n    args = vars(parser.parse_args([]))\n    _, default = args.popitem()\n    return default", "method_name": "arg_default", "docstring_tokens": "Return default argument value as given by argparse s add_argument () ."}
{"idx": "cosqa-train-17635", "doc": "python change array dtype to int", "code": "def to_int64(a):\n            def promote_i4(typestr):\n        if typestr[1:] == 'i4':\n            typestr = typestr[0]+'i8'\n        return typestr\n\n    dtype = [(name, promote_i4(typestr)) for name,typestr in a.dtype.descr]\n    return a.astype(dtype)", "method_name": "to_int64", "docstring_tokens": "Return view of the recarray with all int32 cast to int64 ."}
{"idx": "cosqa-train-10859", "doc": "python forcible close socket before opening", "code": "def close(self):\n        try:\n      self._conn.send((self._CLOSE, None))\n      self._conn.close()\n    except IOError:\n            pass\n    self._process.join()", "method_name": "close", "docstring_tokens": "Send a close message to the external process and join it ."}
{"idx": "cosqa-train-11902", "doc": "python series'value non zero index", "code": "def reduce_fn(x):\n        values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN", "method_name": "reduce_fn", "docstring_tokens": "Aggregation function to get the first non - zero value ."}
{"idx": "cosqa-train-11300", "doc": "how to add a number to certain elements of an array numpy python", "code": "def _increment(arr, indices):\n        arr = _as_array(arr)\n    indices = _as_array(indices)\n    bbins = np.bincount(indices)\n    arr[:len(bbins)] += bbins\n    return arr", "method_name": "_increment", "docstring_tokens": "Increment some indices in a 1D vector of non - negative integers . Repeated indices are taken into account ."}
{"idx": "cosqa-train-12149", "doc": "python unit test and coverage at same time", "code": "def coverage(ctx, opts=\"\"):\n        return test(ctx, coverage=True, include_slow=True, opts=opts)", "method_name": "coverage", "docstring_tokens": "Execute all tests ( normal and slow ) with coverage enabled ."}
{"idx": "cosqa-train-987", "doc": "python only list files with specific extension", "code": "def glob_by_extensions(directory, extensions):\n        directorycheck(directory)\n    files = []\n    xt = files.extend\n    for ex in extensions:\n        xt(glob.glob('{0}/*.{1}'.format(directory, ex)))\n    return files", "method_name": "glob_by_extensions", "docstring_tokens": "Returns files matched by all extensions in the extensions list"}
{"idx": "cosqa-train-11054", "doc": "python global type hinting", "code": "def is_builtin_type(tp):\n        return hasattr(__builtins__, tp.__name__) and tp is getattr(__builtins__, tp.__name__)", "method_name": "is_builtin_type", "docstring_tokens": "Checks if the given type is a builtin one ."}
{"idx": "cosqa-train-9558", "doc": "how to make a function in python to take the average of list numbers", "code": "def calc_list_average(l):\n        total = 0.0\n    for value in l:\n        total += value\n    return total / len(l)", "method_name": "calc_list_average", "docstring_tokens": "Calculates the average value of a list of numbers Returns a float"}
{"idx": "cosqa-train-15051", "doc": "check if two arrays are equal python", "code": "def numpy_aware_eq(a, b):\n        if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n        return np.array_equal(a, b)\n    if ((isinstance(a, Iterable) and isinstance(b, Iterable)) and\n            not isinstance(a, str) and not isinstance(b, str)):\n        if len(a) != len(b):\n            return False\n        return all(numpy_aware_eq(x, y) for x, y in zip(a, b))\n    return a == b", "method_name": "numpy_aware_eq", "docstring_tokens": "Return whether two objects are equal via recursion using : func : numpy . array_equal for comparing numpy arays ."}
{"idx": "cosqa-train-5478", "doc": "python round down numpy", "code": "def round_array(array_in):\n        if isinstance(array_in, ndarray):\n        return np.round(array_in).astype(int)\n    else:\n        return int(np.round(array_in))", "method_name": "round_array", "docstring_tokens": "arr_out = round_array ( array_in )"}
{"idx": "cosqa-dev-421", "doc": "python pywin32 screenshoot refresh", "code": "def win32_refresh_window(cls):\n                        handle = windll.kernel32.GetConsoleWindow()\n\n        RDW_INVALIDATE = 0x0001\n        windll.user32.RedrawWindow(handle, None, None, c_uint(RDW_INVALIDATE))", "method_name": "win32_refresh_window", "docstring_tokens": "Call win32 API to refresh the whole Window ."}
{"idx": "cosqa-train-13319", "doc": "get largest date from a list python", "code": "def _latest_date(self, query, datetime_field_name):\n                return list(\n            query.aggregate(django.db.models.Max(datetime_field_name)).values()\n        )[0]", "method_name": "_latest_date", "docstring_tokens": "Given a QuerySet and the name of field containing datetimes return the latest ( most recent ) date ."}
{"idx": "cosqa-train-11348", "doc": "python lock no blocking", "code": "def lock(self, block=True):\n\t\tself._locked = True\n\t\treturn self._lock.acquire(block)", "method_name": "lock", "docstring_tokens": "Lock connection from being used else where"}
{"idx": "cosqa-train-19073", "doc": "delete item from a set python", "code": "def remove_once(gset, elem):\n        remove = getattr(gset, 'remove', None)\n    if remove is not None: remove(elem)\n    else: del gset[elem]\n    return elem", "method_name": "remove_once", "docstring_tokens": "Remove the element from a set lists or dict . >>> L = [ Lucy ] ; S = set ( [ Sky ] ) ; D = { Diamonds : True } ; >>> remove_once ( L Lucy ) ; remove_once ( S Sky ) ; remove_once ( D Diamonds ) ; >>> print L S D [] set ( [] ) {}"}
{"idx": "cosqa-train-16040", "doc": "how to make a sentence into underscores with python", "code": "def us2mc(string):\n        return re.sub(r'_([a-z])', lambda m: (m.group(1).upper()), string)", "method_name": "us2mc", "docstring_tokens": "Transform an underscore_case string to a mixedCase string"}
{"idx": "cosqa-train-9920", "doc": "python timestamp remove timezone", "code": "def convert_tstamp(response):\n\tif response is None:\n\t\treturn response\n\n\ttz = timezone.utc if settings.USE_TZ else None\n\n\treturn datetime.datetime.fromtimestamp(response, tz)", "method_name": "convert_tstamp", "docstring_tokens": "Convert a Stripe API timestamp response ( unix epoch ) to a native datetime ."}
{"idx": "cosqa-train-9697", "doc": "python sanic change all object id to string", "code": "def generate_id(self, obj):\n                object_type = type(obj).__name__.lower()\n        return '{}_{}'.format(object_type, self.get_object_id(obj))", "method_name": "generate_id", "docstring_tokens": "Generate unique document id for ElasticSearch ."}
{"idx": "cosqa-train-9318", "doc": "python mock mark a test as expected failure", "code": "def assert_called(_mock_self):\n                self = _mock_self\n        if self.call_count == 0:\n            msg = (\"Expected '%s' to have been called.\" %\n                   self._mock_name or 'mock')\n            raise AssertionError(msg)", "method_name": "assert_called", "docstring_tokens": "assert that the mock was called at least once"}
{"idx": "cosqa-train-13071", "doc": "python get current users desktop", "code": "def get_current_desktop(self):\n                desktop = ctypes.c_long(0)\n        _libxdo.xdo_get_current_desktop(self._xdo, ctypes.byref(desktop))\n        return desktop.value", "method_name": "get_current_desktop", "docstring_tokens": "Get the current desktop . Uses _NET_CURRENT_DESKTOP of the EWMH spec ."}
{"idx": "cosqa-train-6354", "doc": "python connect to redis in other docker container", "code": "def __connect():\n        global redis_instance\n    if use_tcp_socket:\n        redis_instance = redis.StrictRedis(host=hostname, port=port)\n    else:\n        redis_instance = redis.StrictRedis(unix_socket_path=unix_socket)", "method_name": "__connect", "docstring_tokens": "Connect to a redis instance ."}
{"idx": "cosqa-train-7773", "doc": "python subplot second y axis", "code": "def show_yticklabels(self, row, column):\n                subplot = self.get_subplot_at(row, column)\n        subplot.show_yticklabels()", "method_name": "show_yticklabels", "docstring_tokens": "Show the y - axis tick labels for a subplot ."}
{"idx": "cosqa-train-18714", "doc": "python function to detect first element of list", "code": "def find_first_in_list(txt: str, str_list: [str]) -> int:          start = len(txt) + 1\n    for item in str_list:\n        if start > txt.find(item) > -1:\n            start = txt.find(item)\n    return start if len(txt) + 1 > start > -1 else -1", "method_name": "find_first_in_list", "docstring_tokens": "Returns the index of the earliest occurence of an item from a list in a string"}
{"idx": "cosqa-train-5201", "doc": "how to flip a matrix in python", "code": "def imflip(img, direction='horizontal'):\n        assert direction in ['horizontal', 'vertical']\n    if direction == 'horizontal':\n        return np.flip(img, axis=1)\n    else:\n        return np.flip(img, axis=0)", "method_name": "imflip", "docstring_tokens": "Flip an image horizontally or vertically ."}
{"idx": "cosqa-train-15243", "doc": "python full name of object from global", "code": "def _fullname(o):\n        return o.__module__ + \".\" + o.__name__ if o.__module__ else o.__name__", "method_name": "_fullname", "docstring_tokens": "Return the fully - qualified name of a function ."}
{"idx": "cosqa-train-17087", "doc": "check if input is an integer or boolean python", "code": "def is_integer(value: Any) -> bool:\n        return (isinstance(value, int) and not isinstance(value, bool)) or (\n        isinstance(value, float) and isfinite(value) and int(value) == value\n    )", "method_name": "is_integer", "docstring_tokens": "Return true if a value is an integer number ."}
{"idx": "cosqa-train-14642", "doc": "storing columns as array python", "code": "def to_array(self):\n                dt = np.dtype(list(zip(self.labels, (c.dtype for c in self.columns))))\n        arr = np.empty_like(self.columns[0], dt)\n        for label in self.labels:\n            arr[label] = self[label]\n        return arr", "method_name": "to_array", "docstring_tokens": "Convert the table to a structured NumPy array ."}
{"idx": "cosqa-train-15173", "doc": "create column in python by joining columns", "code": "def join_cols(cols):\n        return \", \".join([i for i in cols]) if isinstance(cols, (list, tuple, set)) else cols", "method_name": "join_cols", "docstring_tokens": "Join list of columns into a string for a SQL query"}
{"idx": "cosqa-train-16155", "doc": "how to remove blank lines in python file", "code": "def lines(input):\n        for raw_line in input:\n        line = raw_line.strip()\n        if line and not line.startswith('            yield strip_comments(line)", "method_name": "lines", "docstring_tokens": "Remove comments and empty lines"}
{"idx": "cosqa-train-11638", "doc": "how to know size of queue in python", "code": "def qsize(self):\n                self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n", "method_name": "qsize", "docstring_tokens": "Return the approximate size of the queue ( not reliable! ) ."}
{"idx": "cosqa-train-9868", "doc": "python substring index of", "code": "def get_substring_idxs(substr, string):\n        return [match.start() for match in re.finditer(substr, string)]", "method_name": "get_substring_idxs", "docstring_tokens": "Return a list of indexes of substr . If substr not found list is empty ."}
{"idx": "cosqa-train-19683", "doc": "comparing int to none python", "code": "def is_natural(x):\n        try:\n        is_integer = int(x) == x\n    except (TypeError, ValueError):\n        return False\n    return is_integer and x >= 0", "method_name": "is_natural", "docstring_tokens": "A non - negative integer ."}
{"idx": "cosqa-train-7857", "doc": "json to protobuf python", "code": "def toJson(protoObject, indent=None):\n            js = json_format.MessageToDict(protoObject, False)\n    return json.dumps(js, indent=indent)", "method_name": "toJson", "docstring_tokens": "Serialises a protobuf object as json"}
{"idx": "cosqa-train-11626", "doc": "how to join 2 data frames in python", "code": "def cross_join(df1, df2):\n        if len(df1) == 0:\n        return df2\n\n    if len(df2) == 0:\n        return df1\n\n            all_columns = pd.Index(list(df1.columns) + list(df2.columns))\n    df1['key'] = 1\n    df2['key'] = 1\n    return pd.merge(df1, df2, on='key').loc[:, all_columns]", "method_name": "cross_join", "docstring_tokens": "Return a dataframe that is a cross between dataframes df1 and df2"}
{"idx": "cosqa-train-18817", "doc": "how to product of a list in python", "code": "def dotproduct(X, Y):\n        return sum([x * y for x, y in zip(X, Y)])", "method_name": "dotproduct", "docstring_tokens": "Return the sum of the element - wise product of vectors x and y . >>> dotproduct ( [ 1 2 3 ] [ 1000 100 10 ] ) 1230"}
{"idx": "cosqa-train-9034", "doc": "get all dates between range datetime python", "code": "def dates_in_range(start_date, end_date):\n        return [\n        start_date + timedelta(n)\n        for n in range(int((end_date - start_date).days))\n    ]", "method_name": "dates_in_range", "docstring_tokens": "Returns all dates between two dates ."}
{"idx": "cosqa-train-12370", "doc": "python access file on remote", "code": "def get_remote_content(filepath):\n                with hide('running'):\n            temp = BytesIO()\n            get(filepath, temp)\n            content = temp.getvalue().decode('utf-8')\n        return content.strip()", "method_name": "get_remote_content", "docstring_tokens": "A handy wrapper to get a remote file content"}
{"idx": "cosqa-train-9399", "doc": "how to download txt file from internet in python", "code": "def get_dates_link(url):\n        urllib.request.urlretrieve(url, \"temp.txt\")\n    dates = get_dates_file(\"temp.txt\")\n    os.remove(\"temp.txt\")\n    return dates", "method_name": "get_dates_link", "docstring_tokens": "download the dates file from the internet and parse it as a dates file"}
{"idx": "cosqa-train-12507", "doc": "stopwords list remove python", "code": "def _removeStopwords(text_list):\n        output_list = []\n\n    for word in text_list:\n        if word.lower() not in _stopwords:\n            output_list.append(word)\n\n    return output_list", "method_name": "_removeStopwords", "docstring_tokens": "Removes stopwords contained in a list of words ."}
{"idx": "cosqa-train-7885", "doc": "limit on open file handles in python", "code": "def _increase_file_handle_limit():\n        logging.info('Increasing file handle limit to {}'.format(constants.FILE_HANDLE_LIMIT))\n    resource.setrlimit(resource.RLIMIT_NOFILE,\n                       (constants.FILE_HANDLE_LIMIT, resource.RLIM_INFINITY))", "method_name": "_increase_file_handle_limit", "docstring_tokens": "Raise the open file handles permitted by the Dusty daemon process and its child processes . The number we choose here needs to be within the OS X default kernel hard limit which is 10240 ."}
{"idx": "cosqa-train-6745", "doc": "determine the longest sentence in corpus in nlp python ocde", "code": "def get_longest_orf(orfs):\n        sorted_orf = sorted(orfs, key=lambda x: len(x['sequence']), reverse=True)[0]\n    return sorted_orf", "method_name": "get_longest_orf", "docstring_tokens": "Find longest ORF from the given list of ORFs ."}
{"idx": "cosqa-train-8615", "doc": "python deterministic dictionary printing", "code": "def pprint_for_ordereddict():\n        od_saved = OrderedDict.__repr__\n    try:\n        OrderedDict.__repr__ = dict.__repr__\n        yield\n    finally:\n        OrderedDict.__repr__ = od_saved", "method_name": "pprint_for_ordereddict", "docstring_tokens": "Context manager that causes pprint () to print OrderedDict objects as nicely as standard Python dictionary objects ."}
{"idx": "cosqa-train-10233", "doc": "remove namespace from xml tag python", "code": "def strip_xml_namespace(root):\n        try:\n        root.tag = root.tag.split('}')[1]\n    except IndexError:\n        pass\n\n    for element in root.getchildren():\n        strip_xml_namespace(element)", "method_name": "strip_xml_namespace", "docstring_tokens": "Strip out namespace data from an ElementTree ."}
{"idx": "cosqa-train-13207", "doc": "fill is null with other columns python", "code": "def clean_dataframe(df):\n        df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df", "method_name": "clean_dataframe", "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"}
{"idx": "cosqa-train-8216", "doc": "python async input from gui", "code": "async def async_input(prompt):\n        print(prompt, end='', flush=True)\n    return (await loop.run_in_executor(None, sys.stdin.readline)).rstrip()", "method_name": "async_input", "docstring_tokens": "Python s input () is blocking which means the event loop we set above can t be running while we re blocking there . This method will let the loop run while we wait for input ."}
{"idx": "cosqa-train-9515", "doc": "how to identify the index of an element of a set in python", "code": "def find_geom(geom, geoms):\n        for i, g in enumerate(geoms):\n        if g is geom:\n            return i", "method_name": "find_geom", "docstring_tokens": "Returns the index of a geometry in a list of geometries avoiding expensive equality checks of in operator ."}
{"idx": "cosqa-train-12351", "doc": "python 3 print object string", "code": "def _get_pretty_string(obj):\n        sio = StringIO()\n    pprint.pprint(obj, stream=sio)\n    return sio.getvalue()", "method_name": "_get_pretty_string", "docstring_tokens": "Return a prettier version of obj"}
{"idx": "cosqa-train-13120", "doc": "python get most recent file containing string", "code": "def newest_file(file_iterable):\n    return max(file_iterable, key=lambda fname: os.path.getmtime(fname))", "method_name": "newest_file", "docstring_tokens": "Returns the name of the newest file given an iterable of file names ."}
{"idx": "cosqa-train-14086", "doc": "python sqlite3 delete doesn't delete records", "code": "def truncate_table(self, tablename):\n                self.get(tablename).remove()\n        self.db.commit()", "method_name": "truncate_table", "docstring_tokens": "SQLite3 doesn t support direct truncate so we just use delete here"}
{"idx": "cosqa-train-8166", "doc": "python apply function to iterator", "code": "def find_all(self, string, callback):\n\t\tfor index, output in self.iter(string):\n\t\t\tcallback(index, output)", "method_name": "find_all", "docstring_tokens": "Wrapper on iter method callback gets an iterator result"}
{"idx": "cosqa-train-12637", "doc": "use python next to iterate through", "code": "def __next__(self, reward, ask_id, lbl):\n                return self.next(reward, ask_id, lbl)", "method_name": "__next__", "docstring_tokens": "For Python3 compatibility of generator ."}
{"idx": "cosqa-train-7547", "doc": "how to print all the variables in an object python", "code": "def var_dump(*obs):\n\ti = 0\n\tfor x in obs:\n\t\t\n\t\tstr = var_dump_output(x, 0, '  ', '\\n', True)\n\t\tprint (str.strip())\n\t\t\n\t\ti += 1", "method_name": "var_dump", "docstring_tokens": "shows structured information of a object list tuple etc"}
{"idx": "cosqa-train-18478", "doc": "how to determine the index interval for given range of array python", "code": "def _infer_interval_breaks(coord):\n        coord = np.asarray(coord)\n    deltas = 0.5 * (coord[1:] - coord[:-1])\n    first = coord[0] - deltas[0]\n    last = coord[-1] + deltas[-1]\n    return np.r_[[first], coord[:-1] + deltas, [last]]", "method_name": "_infer_interval_breaks", "docstring_tokens": ">>> _infer_interval_breaks ( np . arange ( 5 )) array ( [ - 0 . 5 0 . 5 1 . 5 2 . 5 3 . 5 4 . 5 ] )"}
{"idx": "cosqa-train-17091", "doc": "python print numpy array with string", "code": "def array2string(arr: numpy.ndarray) -> str:\n                shape = str(arr.shape)[1:-1]\n        if shape.endswith(\",\"):\n            shape = shape[:-1]\n        return numpy.array2string(arr, threshold=11) + \"%s[%s]\" % (arr.dtype, shape)", "method_name": "array2string", "docstring_tokens": "Format numpy array as a string ."}
{"idx": "cosqa-train-14536", "doc": "python assert value is of type", "code": "def _assert_is_type(name, value, value_type):\n        if not isinstance(value, value_type):\n        if type(value_type) is tuple:\n            types = ', '.join(t.__name__ for t in value_type)\n            raise ValueError('{0} must be one of ({1})'.format(name, types))\n        else:\n            raise ValueError('{0} must be {1}'\n                             .format(name, value_type.__name__))", "method_name": "_assert_is_type", "docstring_tokens": "Assert that a value must be a given type ."}
{"idx": "cosqa-train-11450", "doc": "python multiproccessing map with multiple inputs", "code": "def imapchain(*a, **kwa):\n        imap_results = map( *a, **kwa )\n    return itertools.chain( *imap_results )", "method_name": "imapchain", "docstring_tokens": "Like map but also chains the results ."}
{"idx": "cosqa-train-14502", "doc": "python add suffix to filename", "code": "def add_suffix(fullname, suffix):\n        name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext", "method_name": "add_suffix", "docstring_tokens": "Add suffix to a full file name"}
{"idx": "cosqa-train-14904", "doc": "best way to deal with pagination in python", "code": "def paginate(self, request, offset=0, limit=None):\n                return self.collection.offset(offset).limit(limit), self.collection.count()", "method_name": "paginate", "docstring_tokens": "Paginate queryset ."}
{"idx": "cosqa-train-18641", "doc": "finding factors in python and return list", "code": "def factors(n):\n        return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))", "method_name": "factors", "docstring_tokens": "Computes all the integer factors of the number n"}
{"idx": "cosqa-train-4338", "doc": "best way to read xml in python", "code": "def xmltreefromfile(filename):\n        try:\n        return ElementTree.parse(filename, ElementTree.XMLParser(collect_ids=False))\n    except TypeError:\n        return ElementTree.parse(filename, ElementTree.XMLParser())", "method_name": "xmltreefromfile", "docstring_tokens": "Internal function to read an XML file"}
{"idx": "cosqa-train-9678", "doc": "how to put a string in a yaml file python", "code": "def generate_yaml_file(filename, contents):\n        with open(filename, 'w') as file:\n        file.write(yaml.dump(contents, default_flow_style=False))", "method_name": "generate_yaml_file", "docstring_tokens": "Creates a yaml file with the given content ."}
{"idx": "cosqa-train-920", "doc": "python move cursor to secific line", "code": "def _go_to_line(editor, line):\n        b = editor.application.current_buffer\n    b.cursor_position = b.document.translate_row_col_to_index(max(0, int(line) - 1), 0)", "method_name": "_go_to_line", "docstring_tokens": "Move cursor to this line in the current buffer ."}
{"idx": "cosqa-dev-72", "doc": "token to id python", "code": "def strids2ids(tokens: Iterable[str]) -> List[int]:\n        return list(map(int, tokens))", "method_name": "strids2ids", "docstring_tokens": "Returns sequence of integer ids given a sequence of string ids ."}
{"idx": "cosqa-train-19357", "doc": "python urlparse get domain", "code": "def get_domain(url):\n        parse_result = urlparse(url)\n    domain = \"{schema}://{netloc}\".format(\n        schema=parse_result.scheme, netloc=parse_result.netloc)\n    return domain", "method_name": "get_domain", "docstring_tokens": "Get domain part of an url ."}
{"idx": "cosqa-train-7880", "doc": "python turn a string into a number", "code": "def get_number(s, cast=int):\n        import string\n    d = \"\".join(x for x in str(s) if x in string.digits)\n    return cast(d)", "method_name": "get_number", "docstring_tokens": "Try to get a number out of a string and cast it ."}
{"idx": "cosqa-train-18111", "doc": "python check if all are type string in a column", "code": "def is_sqlatype_string(coltype: Union[TypeEngine, VisitableType]) -> bool:\n        coltype = _coltype_to_typeengine(coltype)\n    return isinstance(coltype, sqltypes.String)", "method_name": "is_sqlatype_string", "docstring_tokens": "Is the SQLAlchemy column type a string type?"}
{"idx": "cosqa-train-12805", "doc": "bin means python numpy", "code": "def val_to_bin(edges, x):\n        ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin", "method_name": "val_to_bin", "docstring_tokens": "Convert axis coordinate to bin index ."}
{"idx": "cosqa-train-14553", "doc": "python boto3 delete key from s3", "code": "def remove_file_from_s3(awsclient, bucket, key):\n        client_s3 = awsclient.get_client('s3')\n    response = client_s3.delete_object(Bucket=bucket, Key=key)", "method_name": "remove_file_from_s3", "docstring_tokens": "Remove a file from an AWS S3 bucket ."}
{"idx": "cosqa-train-19466", "doc": "random walk steps python", "code": "def returned(n):\n\tfor pos in randwalk() >> drop(1) >> takei(xrange(n-1)):\n\t\tif pos == Origin:\n\t\t\treturn True\n\treturn False", "method_name": "returned", "docstring_tokens": "Generate a random walk and return True if the walker has returned to the origin after taking n steps ."}
{"idx": "cosqa-train-8586", "doc": "python delete objects inside of objects", "code": "def _removeTags(tags, objects):\n        for t in tags:\n        for o in objects:\n            o.tags.remove(t)\n\n    return True", "method_name": "_removeTags", "docstring_tokens": "Removes tags from objects"}
{"idx": "cosqa-train-8348", "doc": "truncate seconds from a timestamp in python code", "code": "def RoundToSeconds(cls, timestamp):\n        leftovers = timestamp % definitions.MICROSECONDS_PER_SECOND\n    scrubbed = timestamp - leftovers\n    rounded = round(float(leftovers) / definitions.MICROSECONDS_PER_SECOND)\n\n    return int(scrubbed + rounded * definitions.MICROSECONDS_PER_SECOND)", "method_name": "RoundToSeconds", "docstring_tokens": "Takes a timestamp value and rounds it to a second precision ."}
{"idx": "cosqa-train-7002", "doc": "python json load unorde", "code": "def read_json(location):\n        location = ensure_path(location)\n    with location.open('r', encoding='utf8') as f:\n        return ujson.load(f)", "method_name": "read_json", "docstring_tokens": "Open and load JSON from file ."}
{"idx": "cosqa-train-10094", "doc": "python yaml expected single document", "code": "def yaml_to_param(obj, name):\n\treturn from_pyvalue(u\"yaml:%s\" % name, unicode(yaml.dump(obj)))", "method_name": "yaml_to_param", "docstring_tokens": "Return the top - level element of a document sub - tree containing the YAML serialization of a Python object ."}
{"idx": "cosqa-train-8758", "doc": "python filter object at", "code": "def __init__(self, function):\n\t\tsuper(filter, self).__init__()\n\t\tself.function = function", "method_name": "__init__", "docstring_tokens": "function : to be called with each stream element as its only argument"}
{"idx": "cosqa-train-9368", "doc": "python nonetype object has no attributte", "code": "def listlike(obj):\n        \n    return hasattr(obj, \"__iter__\") \\\n    and not issubclass(type(obj), str)\\\n    and not issubclass(type(obj), unicode)", "method_name": "listlike", "docstring_tokens": "Is an object iterable like a list ( and not a string ) ?"}
{"idx": "cosqa-train-16286", "doc": "python tkinter how to create scrollable canvas", "code": "def _set_scroll_v(self, *args):\n                self._canvas_categories.yview(*args)\n        self._canvas_scroll.yview(*args)", "method_name": "_set_scroll_v", "docstring_tokens": "Scroll both categories Canvas and scrolling container"}
{"idx": "cosqa-train-11132", "doc": "geojson to topojson python", "code": "def to_topojson(self):\n                topojson = self.topojson\n        topojson[\"objects\"][\"points\"] = {\n            \"type\": \"GeometryCollection\",\n            \"geometries\": [point.to_topojson() for point in self.points.all()],\n        }\n        return json.dumps(topojson)", "method_name": "to_topojson", "docstring_tokens": "Adds points and converts to topojson string ."}
{"idx": "cosqa-train-16972", "doc": "python get png image dimensions", "code": "def getDimensionForImage(filename, maxsize):\n        try:\n        from PIL import Image\n    except ImportError:\n        return None\n    img = Image.open(filename)\n    width, height = img.size\n    if width > maxsize[0] or height > maxsize[1]:\n        img.thumbnail(maxsize)\n        out.info(\"Downscaled display size from %s to %s\" % ((width, height), img.size))\n    return img.size", "method_name": "getDimensionForImage", "docstring_tokens": "Return scaled image size in ( width height ) format . The scaling preserves the aspect ratio . If PIL is not found returns None ."}
{"idx": "cosqa-train-6652", "doc": "python flask separate functions get and post", "code": "def handleFlaskPostRequest(flaskRequest, endpoint):\n        if flaskRequest.method == \"POST\":\n        return handleHttpPost(flaskRequest, endpoint)\n    elif flaskRequest.method == \"OPTIONS\":\n        return handleHttpOptions()\n    else:\n        raise exceptions.MethodNotAllowedException()", "method_name": "handleFlaskPostRequest", "docstring_tokens": "Handles the specified flask request for one of the POST URLS Invokes the specified endpoint to generate a response ."}
{"idx": "cosqa-train-18214", "doc": "return year from date python", "code": "def year(date):\n        try:\n        fmt = '%m/%d/%Y'\n        return datetime.strptime(date, fmt).timetuple().tm_year\n    except ValueError:\n        return 0", "method_name": "year", "docstring_tokens": "Returns the year ."}
{"idx": "cosqa-train-13715", "doc": "how to get all modes python", "code": "def __iter__(self):\n                return iter([v for k, v in sorted(self._modes.items())])", "method_name": "__iter__", "docstring_tokens": "Returns the list of modes ."}
{"idx": "cosqa-train-17708", "doc": "integer and returns a random bitstring of size python", "code": "def binary(length):\n        num = randint(1, 999999)\n    mask = '0' * length\n    return (mask + ''.join([str(num >> i & 1) for i in range(7, -1, -1)]))[-length:]", "method_name": "binary", "docstring_tokens": "returns a a random string that represent a binary representation"}
{"idx": "cosqa-train-11584", "doc": "how to get the encoding of a file python", "code": "def smartread(path):\n        with open(path, \"rb\") as f:\n        content = f.read()\n        result = chardet.detect(content)\n        return content.decode(result[\"encoding\"])", "method_name": "smartread", "docstring_tokens": "Read text from file automatically detect encoding . chardet required ."}
{"idx": "cosqa-train-14776", "doc": "python connect to aws rds", "code": "def connect_rds(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):\n        from boto.rds import RDSConnection\n    return RDSConnection(aws_access_key_id, aws_secret_access_key, **kwargs)", "method_name": "connect_rds", "docstring_tokens": ": type aws_access_key_id : string : param aws_access_key_id : Your AWS Access Key ID"}
{"idx": "cosqa-train-12714", "doc": "python cv2 check if image is empty", "code": "def is_empty(self):\n                if(((self.channels == []) and (not self.shape == (0, 0))) or\n           ((not self.channels == []) and (self.shape == (0, 0)))):\n            raise RuntimeError(\"Channels-shape mismatch.\")\n        return self.channels == [] and self.shape == (0, 0)", "method_name": "is_empty", "docstring_tokens": "Checks for an empty image ."}
{"idx": "cosqa-train-11606", "doc": "how to hide a window using a button in python", "code": "def hide(self):\n                if not HidePrevention(self.window).may_hide():\n            return\n        self.hidden = True\n        self.get_widget('window-root').unstick()\n        self.window.hide()", "method_name": "hide", "docstring_tokens": "Hides the main window of the terminal and sets the visible flag to False ."}
{"idx": "cosqa-train-13550", "doc": "python marshmallow validation schema from parent", "code": "def validate(schema, data, owner=None):\n        schema._validate(data=data, owner=owner)", "method_name": "validate", "docstring_tokens": "Validate input data with input schema ."}
{"idx": "cosqa-train-13211", "doc": "fillna with string for specific columnin python", "code": "def stringify_col(df, col_name):\n        df = df.copy()\n    df[col_name] = df[col_name].fillna(\"\")\n    df[col_name] = df[col_name].astype(str)\n    return df", "method_name": "stringify_col", "docstring_tokens": "Take a dataframe and string - i - fy a column of values . Turn nan / None into and all other values into strings ."}
{"idx": "cosqa-train-1345", "doc": "how to separate list elements by white space python", "code": "def split_strings_in_list_retain_spaces(orig_list):\n        temp_list = list()\n    for line in orig_list:\n        line_split = __re.split(r'(\\s+)', line)\n        temp_list.append(line_split)\n\n    return temp_list", "method_name": "split_strings_in_list_retain_spaces", "docstring_tokens": "Function to split every line in a list and retain spaces for a rejoin : param orig_list : Original list : return : A List with split lines"}
{"idx": "cosqa-train-13635", "doc": "how to default value in python", "code": "def safe_int(val, default=None):\n        try:\n        val = int(val)\n    except (ValueError, TypeError):\n        val = default\n\n    return val", "method_name": "safe_int", "docstring_tokens": "Returns int () of val if val is not convertable to int use default instead"}
{"idx": "cosqa-train-8623", "doc": "python dict keys lowercase", "code": "def keys_to_snake_case(camel_case_dict):\n        return dict((to_snake_case(key), value) for (key, value) in camel_case_dict.items())", "method_name": "keys_to_snake_case", "docstring_tokens": "Make a copy of a dictionary with all keys converted to snake case . This is just calls to_snake_case on each of the keys in the dictionary and returns a new dictionary ."}
{"idx": "cosqa-train-10955", "doc": "python get index of list values that equal", "code": "def equal(list1, list2):\n        return [item1 == item2 for item1, item2 in broadcast_zip(list1, list2)]", "method_name": "equal", "docstring_tokens": "takes flags returns indexes of True values"}
{"idx": "cosqa-train-9658", "doc": "python requests logging not work", "code": "def process_request(self, request, response):\n                self.logger.info('Requested: {0} {1} {2}'.format(request.method, request.relative_uri, request.content_type))", "method_name": "process_request", "docstring_tokens": "Logs the basic endpoint requested"}
{"idx": "cosqa-train-12001", "doc": "python static files flask", "code": "def glr_path_static():\n        return os.path.abspath(os.path.join(os.path.dirname(__file__), '_static'))", "method_name": "glr_path_static", "docstring_tokens": "Returns path to packaged static files"}
{"idx": "cosqa-train-19618", "doc": "rest json schema validation python", "code": "def validate(request: Union[Dict, List], schema: dict) -> Union[Dict, List]:\n        jsonschema_validate(request, schema)\n    return request", "method_name": "validate", "docstring_tokens": "Wraps jsonschema . validate returning the same object passed in ."}
{"idx": "cosqa-train-10560", "doc": "write in bold and read in color of the print mesaage in python", "code": "def good(txt):\n        print(\"%s    sys.stdout.flush()", "method_name": "good", "docstring_tokens": "Print emphasized good the given txt message"}
{"idx": "cosqa-train-14241", "doc": "python type cast to bigint", "code": "def _from_bytes(bytes, byteorder=\"big\", signed=False):\n        return int.from_bytes(bytes, byteorder=byteorder, signed=signed)", "method_name": "_from_bytes", "docstring_tokens": "This is the same functionality as int . from_bytes in python 3"}
{"idx": "cosqa-train-8782", "doc": "converts matrix to pictures by python", "code": "def im2mat(I):\n        return I.reshape((I.shape[0] * I.shape[1], I.shape[2]))", "method_name": "im2mat", "docstring_tokens": "Converts and image to matrix ( one pixel per line )"}
{"idx": "cosqa-train-11687", "doc": "python random selection from function", "code": "def sometimesish(fn):\n        def wrapped(*args, **kwargs):\n        if random.randint(1, 2) == 1:\n            return fn(*args, **kwargs)\n\n    return wrapped", "method_name": "sometimesish", "docstring_tokens": "Has a 50 / 50 chance of calling a function"}
{"idx": "cosqa-train-13450", "doc": "python keep processpool open until tasks complete", "code": "def wait(self, timeout=None):\n        if not self.__running:\n      raise RuntimeError(\"ThreadPool ain't running\")\n    self.__queue.wait(timeout)", "method_name": "wait", "docstring_tokens": "Block until all jobs in the ThreadPool are finished . Beware that this can make the program run into a deadlock if another thread adds new jobs to the pool!"}
{"idx": "cosqa-train-10307", "doc": "running a def a specified amount of time python 3", "code": "def seconds(num):\n        now = pytime.time()\n    end = now + num\n    until(end)", "method_name": "seconds", "docstring_tokens": "Pause for this many seconds"}
{"idx": "cosqa-train-19371", "doc": "python str to dateal time", "code": "def str_to_time(time_str: str) -> datetime.datetime:\n        pieces: Any = [int(piece) for piece in time_str.split('-')]\n    return datetime.datetime(*pieces)", "method_name": "str_to_time", "docstring_tokens": "Convert human readable string to datetime . datetime ."}
{"idx": "cosqa-train-12569", "doc": "python check if file is executable", "code": "def is_executable(path):\n    return os.path.isfile(path) and os.access(path, os.X_OK)", "method_name": "is_executable", "docstring_tokens": "Returns whether a path names an existing executable file ."}
{"idx": "cosqa-train-17715", "doc": "python how to check the queue lenght", "code": "def full(self):\n                return self.maxsize and len(self.list) >= self.maxsize or False", "method_name": "full", "docstring_tokens": "Return True if the queue is full False otherwise ( not reliable! ) ."}
{"idx": "cosqa-train-16490", "doc": "query server objects ldap in python", "code": "def search(self, filterstr, attrlist):\n                return self._paged_search_ext_s(self.settings.BASE, ldap.SCOPE_SUBTREE, filterstr=filterstr,\n                                        attrlist=attrlist, page_size=self.settings.PAGE_SIZE)", "method_name": "search", "docstring_tokens": "Query the configured LDAP server ."}
{"idx": "cosqa-train-15089", "doc": "python docx document section different page", "code": "def fill_document(doc):\n        with doc.create(Section('A section')):\n        doc.append('Some regular text and some ')\n        doc.append(italic('italic text. '))\n\n        with doc.create(Subsection('A subsection')):\n            doc.append('Also some crazy characters: $&#{}')", "method_name": "fill_document", "docstring_tokens": "Add a section a subsection and some text to the document ."}
{"idx": "cosqa-train-10557", "doc": "write a json object to file python", "code": "def _serialize_json(obj, fp):\n        json.dump(obj, fp, indent=4, default=serialize)", "method_name": "_serialize_json", "docstring_tokens": "Serialize obj as a JSON formatted stream to fp"}
{"idx": "cosqa-train-19263", "doc": "how to compute the minimum value of a tensor in python", "code": "def last_location_of_minimum(x):\n        x = np.asarray(x)\n    return 1.0 - np.argmin(x[::-1]) / len(x) if len(x) > 0 else np.NaN", "method_name": "last_location_of_minimum", "docstring_tokens": "Returns the last location of the minimal value of x . The position is calculated relatively to the length of x ."}
{"idx": "cosqa-train-16352", "doc": "python unittest how to assert 2 lists are almost equal", "code": "def expect_all(a, b):\n        assert all(_a == _b for _a, _b in zip_longest(a, b))", "method_name": "expect_all", "docstring_tokens": "\\ Asserts that two iterables contain the same values ."}
{"idx": "cosqa-dev-27", "doc": "how to check if 2 inputs are equal in python assert equal", "code": "def expect_all(a, b):\n        assert all(_a == _b for _a, _b in zip_longest(a, b))", "method_name": "expect_all", "docstring_tokens": "\\ Asserts that two iterables contain the same values ."}
{"idx": "cosqa-train-9249", "doc": "python loop through proxies request", "code": "def load(self):\n                self._list = self._source.load()\n        self._list_iter = itertools.cycle(self._list)", "method_name": "load", "docstring_tokens": "Load proxy list from configured proxy source"}
{"idx": "cosqa-train-834", "doc": "python loess with gaussian kernel", "code": "def lognorm(x, mu, sigma=1.0):\n        return stats.lognorm(sigma, scale=mu).pdf(x)", "method_name": "lognorm", "docstring_tokens": "Log - normal function from scipy"}
{"idx": "cosqa-train-17394", "doc": "greatest common divisor function in python", "code": "def gcd_float(numbers, tol=1e-8):\n        def pair_gcd_tol(a, b):\n                while b > tol:\n            a, b = b, a % b\n        return a\n\n    n = numbers[0]\n    for i in numbers:\n        n = pair_gcd_tol(n, i)\n    return n", "method_name": "gcd_float", "docstring_tokens": "Returns the greatest common divisor for a sequence of numbers . Uses a numerical tolerance so can be used on floats"}
{"idx": "cosqa-dev-530", "doc": "how to clear up memory python", "code": "def Flush(self):\n        while self._age:\n      node = self._age.PopLeft()\n      self.KillObject(node.data)\n\n    self._hash = dict()", "method_name": "Flush", "docstring_tokens": "Flush all items from cache ."}
{"idx": "cosqa-dev-591", "doc": "get eucliedan distance between two vectors python", "code": "def vector_distance(a, b):\n        a = np.array(a)\n    b = np.array(b)\n    return np.linalg.norm(a - b)", "method_name": "vector_distance", "docstring_tokens": "The Euclidean distance between two vectors ."}
{"idx": "cosqa-train-11239", "doc": "python interactive shell color", "code": "def auto():\n\ttry:\n\t\tStyle.enabled = False\n\t\tStyle.enabled = sys.stdout.isatty()\n\texcept (AttributeError, TypeError):\n\t\tpass", "method_name": "auto", "docstring_tokens": "set colouring on if STDOUT is a terminal device off otherwise"}
{"idx": "cosqa-train-8033", "doc": "passing a range of values python years", "code": "def from_years_range(start_year, end_year):\n                start = datetime.date(start_year, 1 , 1)\n        end = datetime.date(end_year, 12 , 31)\n        return DateRange(start, end)", "method_name": "from_years_range", "docstring_tokens": "Transform a range of years ( two ints ) to a DateRange object ."}
{"idx": "cosqa-train-12233", "doc": "python yaml for each key value", "code": "def safe_dump(data, stream=None, **kwds):\n        return yaml.dump(data, stream=stream, Dumper=ODYD, **kwds)", "method_name": "safe_dump", "docstring_tokens": "implementation of safe dumper using Ordered Dict Yaml Dumper"}
{"idx": "cosqa-train-14163", "doc": "python test if value is ctypes array", "code": "def is_array(type_):\n        nake_type = remove_alias(type_)\n    nake_type = remove_reference(nake_type)\n    nake_type = remove_cv(nake_type)\n    return isinstance(nake_type, cpptypes.array_t)", "method_name": "is_array", "docstring_tokens": "returns True if type represents C ++ array type False otherwise"}
{"idx": "cosqa-train-13261", "doc": "function return apply async python", "code": "def apply(self, func, args=(), kwds=dict()):\n                return self.apply_async(func, args, kwds).get()", "method_name": "apply", "docstring_tokens": "Equivalent of the apply () builtin function . It blocks till the result is ready ."}
{"idx": "cosqa-train-12308", "doc": "reload device program code in python", "code": "def reload(self, save_config=True):\n                if save_config:\n            self.device.send(\"copy running-config startup-config\")\n        self.device(\"reload\", wait_for_string=\"This command will reboot the system\")\n        self.device.ctrl.sendline(\"y\")", "method_name": "reload", "docstring_tokens": "Reload the device ."}
{"idx": "cosqa-train-4030", "doc": "split string into n parts python", "code": "def _split_str(s, n):\n        length = len(s)\n    return [s[i:i + n] for i in range(0, length, n)]", "method_name": "_split_str", "docstring_tokens": "split string into list of strings by specified number ."}
{"idx": "cosqa-train-10978", "doc": "python get object as dict", "code": "def conv_dict(self):\n                return dict(integer=self.integer, real=self.real, no_type=self.no_type)", "method_name": "conv_dict", "docstring_tokens": "dictionary of conversion"}
{"idx": "cosqa-train-18571", "doc": "selecting a range of 2d elements from a numpy array gives empty array in python 3", "code": "def to_0d_array(value: Any) -> np.ndarray:\n        if np.isscalar(value) or (isinstance(value, np.ndarray) and\n                              value.ndim == 0):\n        return np.array(value)\n    else:\n        return to_0d_object_array(value)", "method_name": "to_0d_array", "docstring_tokens": "Given a value wrap it in a 0 - D numpy . ndarray ."}
{"idx": "cosqa-train-19958", "doc": "python read tokens from line", "code": "def get_tokens(line: str) -> Iterator[str]:\n        for token in line.rstrip().split():\n        if len(token) > 0:\n            yield token", "method_name": "get_tokens", "docstring_tokens": "Yields tokens from input string ."}
{"idx": "cosqa-train-16924", "doc": "write data into fits file python", "code": "def write_fits(self, fitsfile):\n                tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)", "method_name": "write_fits", "docstring_tokens": "Write the ROI model to a FITS file ."}
{"idx": "cosqa-train-3162", "doc": "python print string with visible ansi codes", "code": "def ansi(color, text):\n        code = COLOR_CODES[color]\n    return '\\033[1;{0}m{1}{2}'.format(code, text, RESET_TERM)", "method_name": "ansi", "docstring_tokens": "Wrap text in an ansi escape sequence"}
{"idx": "cosqa-train-18616", "doc": "python check if value in enum", "code": "def has_value(cls, value: int) -> bool:\n                return any(value == item.value for item in cls)", "method_name": "has_value", "docstring_tokens": "True if specified value exists in int enum ; otherwise False ."}
{"idx": "cosqa-train-11995", "doc": "python sqlite table names in database", "code": "def get_table_names(connection):\n\tcursor = connection.cursor()\n\tcursor.execute(\"SELECT name FROM sqlite_master WHERE type == 'table'\")\n\treturn [name for (name,) in cursor]", "method_name": "get_table_names", "docstring_tokens": "Return a list of the table names in the database ."}
{"idx": "cosqa-train-18639", "doc": "how to remove all element from a python dictionary", "code": "def clean_map(obj: Mapping[Any, Any]) -> Mapping[Any, Any]:\n        return {k: v for k, v in obj.items() if v is not None}", "method_name": "clean_map", "docstring_tokens": "Return a new copied dictionary without the keys with None values from the given Mapping object ."}
{"idx": "cosqa-train-11560", "doc": "python parse query string from url", "code": "def parse_query_string(query):\n        result = {}\n    qparts = query.split('&')\n    for item in qparts:\n        key, value = item.split('=')\n        key = key.strip()\n        value = value.strip()\n        result[key] = unquote_plus(value)\n    return result", "method_name": "parse_query_string", "docstring_tokens": "parse_query_string : very simplistic . won t do the right thing with list values"}
{"idx": "cosqa-train-5390", "doc": "python remove element set", "code": "def isolate_element(self, x):\n                members = list(self.members(x))\n        self.delete_set(x)\n        self.union(*(v for v in members if v != x))", "method_name": "isolate_element", "docstring_tokens": "Isolates x from its equivalence class ."}
{"idx": "cosqa-train-10072", "doc": "manhattan distance in python using longitude and latitude", "code": "def _manhattan_distance(vec_a, vec_b):\n        if len(vec_a) != len(vec_b):\n        raise ValueError('len(vec_a) must equal len(vec_b)')\n    return sum(map(lambda a, b: abs(a - b), vec_a, vec_b))", "method_name": "_manhattan_distance", "docstring_tokens": "Return manhattan distance between two lists of numbers ."}
{"idx": "cosqa-train-11759", "doc": "how to read from a file to a list python", "code": "def get_list_from_file(file_name):\n        with open(file_name, mode='r', encoding='utf-8') as f1:\n        lst = f1.readlines()\n    return lst", "method_name": "get_list_from_file", "docstring_tokens": "read the lines from a file into a list"}
{"idx": "cosqa-train-8925", "doc": "dynamically update value in dictionary python", "code": "def update(self, params):\n                dev_info = self.json_state.get('deviceInfo')\n        dev_info.update({k: params[k] for k in params if dev_info.get(k)})", "method_name": "update", "docstring_tokens": "Update the dev_info data from a dictionary ."}
{"idx": "cosqa-train-19838", "doc": "python replace string from right", "code": "def right_replace(string, old, new, count=1):\n        if not string:\n        return string\n    return new.join(string.rsplit(old, count))", "method_name": "right_replace", "docstring_tokens": "Right replaces count occurrences of old with new in string . For example ::"}
{"idx": "cosqa-train-11373", "doc": "how to check if a path is writeable python", "code": "def _writable_dir(path):\n        return os.path.isdir(path) and os.access(path, os.W_OK)", "method_name": "_writable_dir", "docstring_tokens": "Whether path is a directory to which the user has write access ."}
{"idx": "cosqa-train-11142", "doc": "get attribute type in python", "code": "def get_attribute_name_id(attr):\n        return attr.value.id if isinstance(attr.value, ast.Name) else None", "method_name": "get_attribute_name_id", "docstring_tokens": "Return the attribute name identifier"}
{"idx": "cosqa-train-9067", "doc": "get fields of object python", "code": "def object_as_dict(obj):\n        return {c.key: getattr(obj, c.key)\n            for c in inspect(obj).mapper.column_attrs}", "method_name": "object_as_dict", "docstring_tokens": "Turn an SQLAlchemy model into a dict of field names and values ."}
{"idx": "cosqa-train-17371", "doc": "how to fetch one value from one row from mysql query in python", "code": "def fetchvalue(self, sql: str, *args) -> Optional[Any]:\n                row = self.fetchone(sql, *args)\n        if row is None:\n            return None\n        return row[0]", "method_name": "fetchvalue", "docstring_tokens": "Executes SQL ; returns the first value of the first row or None ."}
{"idx": "cosqa-train-6650", "doc": "python flask routes add", "code": "def add_url_rule(self, route, endpoint, handler):\n                self.app.add_url_rule(route, endpoint, handler)", "method_name": "add_url_rule", "docstring_tokens": "Add a new url route ."}
{"idx": "cosqa-train-10946", "doc": "define function arg type and default values python", "code": "def get_default_args(func):\n        args, varargs, keywords, defaults = getargspec_no_self(func)\n    return dict(zip(args[-len(defaults):], defaults))", "method_name": "get_default_args", "docstring_tokens": "returns a dictionary of arg_name : default_values for the input function"}
{"idx": "cosqa-dev-233", "doc": "python image shape detect", "code": "def get_shape(img):\n        if hasattr(img, 'shape'):\n        shape = img.shape\n    else:\n        shape = img.get_data().shape\n    return shape", "method_name": "get_shape", "docstring_tokens": "Return the shape of img ."}
{"idx": "cosqa-train-6306", "doc": "what can iterators be iterated only once in python", "code": "def _fill(self):\n        try:\n      self._head = self._iterable.next()\n    except StopIteration:\n      self._head = None", "method_name": "_fill", "docstring_tokens": "Advance the iterator without returning the old head ."}
{"idx": "cosqa-train-10207", "doc": "remove all characters in string in python", "code": "def drop_bad_characters(text):\n            text = ''.join([c for c in text if c in ALLOWED_CHARS])\n    return text", "method_name": "drop_bad_characters", "docstring_tokens": "Takes a text and drops all non - printable and non - ascii characters and also any whitespace characters that aren t space ."}
{"idx": "cosqa-train-12644", "doc": "python circle in a square bitmap array", "code": "def getBitmap(self):\n                return PlatformManager.getBitmapFromRect(self.x, self.y, self.w, self.h)", "method_name": "getBitmap", "docstring_tokens": "Captures screen area of this region at least the part that is on the screen"}
{"idx": "cosqa-train-12106", "doc": "location of maya python exe", "code": "def setup_environment():\n        osinter = ostool.get_interface()\n    pypath = osinter.get_maya_envpath()\n    for p in sys.path:\n        pypath = os.pathsep.join((pypath, p))\n    os.environ['PYTHONPATH'] = pypath", "method_name": "setup_environment", "docstring_tokens": "Set up neccessary environment variables"}
{"idx": "cosqa-train-19190", "doc": "how to make letters uppercase in python skipping spaces", "code": "def uppercase_chars(string: any) -> str:\n                return ''.join([c if c.isupper() else '' for c in str(string)])", "method_name": "uppercase_chars", "docstring_tokens": "Return all ( and only ) the uppercase chars in the given string ."}
{"idx": "cosqa-train-18016", "doc": "python delete element from set", "code": "def remove_once(gset, elem):\n        remove = getattr(gset, 'remove', None)\n    if remove is not None: remove(elem)\n    else: del gset[elem]\n    return elem", "method_name": "remove_once", "docstring_tokens": "Remove the element from a set lists or dict . >>> L = [ Lucy ] ; S = set ( [ Sky ] ) ; D = { Diamonds : True } ; >>> remove_once ( L Lucy ) ; remove_once ( S Sky ) ; remove_once ( D Diamonds ) ; >>> print L S D [] set ( [] ) {}"}
{"idx": "cosqa-train-13067", "doc": "python get current git branch", "code": "def get_last_commit(git_path=None):\n        if git_path is None: git_path = GIT_PATH\n    line = get_last_commit_line(git_path)\n    revision_id = line.split()[1]\n    return revision_id", "method_name": "get_last_commit", "docstring_tokens": "Get the HEAD commit SHA1 of repository in current dir ."}
{"idx": "cosqa-train-3274", "doc": "how to make a restart button using python", "code": "def do_restart(self, line):\n                self.application.master.Restart(opendnp3.RestartType.COLD, restart_callback)", "method_name": "do_restart", "docstring_tokens": "Request that the Outstation perform a cold restart . Command syntax is : restart"}
{"idx": "cosqa-train-14708", "doc": "tracing python code execution", "code": "def __run(self):\n        sys.settrace(self.globaltrace)\n    self.__run_backup()\n    self.run = self.__run_backup", "method_name": "__run", "docstring_tokens": "Hacked run function which installs the trace ."}
{"idx": "cosqa-train-8874", "doc": "delete pyc files from python script", "code": "def clean(dry_run='n'):\n        file_patterns = ['*.pyc', '*.pyo', '*~']\n    dir_patterns = ['__pycache__']\n    recursive_pattern_delete(project_paths.root, file_patterns, dir_patterns, dry_run=bool(dry_run.lower() == 'y'))", "method_name": "clean", "docstring_tokens": "Wipes compiled and cached python files . To simulate : pynt clean [ dry_run = y ]"}
{"idx": "cosqa-train-10370", "doc": "sleep holding up python", "code": "def test3():\n        import time\n    \n    p = MVisionProcess()\n    p.start()\n    time.sleep(5)\n    p.stop()", "method_name": "test3", "docstring_tokens": "Test the multiprocess"}
{"idx": "cosqa-train-8344", "doc": "traversal in tree in python", "code": "def walk_tree(root):\n        yield root\n\n    for child in root.children:\n        for el in walk_tree(child):\n            yield el", "method_name": "walk_tree", "docstring_tokens": "Pre - order depth - first"}
{"idx": "cosqa-train-19036", "doc": "timing a function call python", "code": "def timeit(func, *args, **kwargs):\n        start_time = time.time()\n    res = func(*args, **kwargs)\n    timing = time.time() - start_time\n    return res, timing", "method_name": "timeit", "docstring_tokens": "Time execution of function . Returns ( res seconds ) ."}
{"idx": "cosqa-train-9090", "doc": "python how to stop playsound", "code": "def stop(self):\n                if self.isPlaying is True:\n            self._execute(\"stop\")\n            self._changePlayingState(False)", "method_name": "stop", "docstring_tokens": "Stops playback"}
{"idx": "cosqa-train-18929", "doc": "python change dictioinary values in place", "code": "def dictlist_replace(dict_list: Iterable[Dict], key: str, value: Any) -> None:\n        for d in dict_list:\n        d[key] = value", "method_name": "dictlist_replace", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d change ( in place ) d [ key ] to value ."}
{"idx": "cosqa-train-10729", "doc": "can i pass instance method as variable python", "code": "def do(self):\n                self.restore_point = self.obj.copy()\n        return self.do_method(self.obj, *self.args)", "method_name": "do", "docstring_tokens": "Set a restore point ( copy the object ) then call the method . : return : obj . do_method ( * args )"}
{"idx": "cosqa-train-12261", "doc": "pickle python read entiere file", "code": "def read_raw(data_path):\n        with open(data_path, 'rb') as f:\n        data = pickle.load(f)\n    return data", "method_name": "read_raw", "docstring_tokens": "Parameters ---------- data_path : str"}
{"idx": "cosqa-train-1879", "doc": "should there be equal no of columns to concanate two df python", "code": "def cross_join(df1, df2):\n        if len(df1) == 0:\n        return df2\n\n    if len(df2) == 0:\n        return df1\n\n            all_columns = pd.Index(list(df1.columns) + list(df2.columns))\n    df1['key'] = 1\n    df2['key'] = 1\n    return pd.merge(df1, df2, on='key').loc[:, all_columns]", "method_name": "cross_join", "docstring_tokens": "Return a dataframe that is a cross between dataframes df1 and df2"}
{"idx": "cosqa-train-10841", "doc": "python flatten deep nested list", "code": "def flatten(nested):\n        flat_return = list()\n\n    def __inner_flat(nested,flat):\n        for i in nested:\n            __inner_flat(i, flat) if isinstance(i, list) else flat.append(i)\n        return flat\n\n    __inner_flat(nested,flat_return)\n\n    return flat_return", "method_name": "flatten", "docstring_tokens": "Return a flatten version of the nested argument"}
{"idx": "cosqa-train-11837", "doc": "how to show a variable amount of precision in python string format", "code": "def indented_show(text, howmany=1):\n                print(StrTemplate.pad_indent(text=text, howmany=howmany))", "method_name": "indented_show", "docstring_tokens": "Print a formatted indented text ."}
{"idx": "cosqa-train-14528", "doc": "python array get element by index with default", "code": "def list_get(l, idx, default=None):\n        try:\n        if l[idx]:\n            return l[idx]\n        else:\n            return default\n    except IndexError:\n        return default", "method_name": "list_get", "docstring_tokens": "Get from a list with an optional default value ."}
{"idx": "cosqa-train-19843", "doc": "check if string is int in python", "code": "def _isint(string):\n        return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)", "method_name": "_isint", "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"}
{"idx": "cosqa-train-5020", "doc": "how to change numpy array to list in python", "code": "def A(*a):\n        return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "method_name": "A", "docstring_tokens": "convert iterable object into numpy array"}
{"idx": "cosqa-train-19098", "doc": "read a file into a set python", "code": "def read_set_from_file(filename: str) -> Set[str]:\n        collection = set()\n    with open(filename, 'r') as file_:\n        for line in file_:\n            collection.add(line.rstrip())\n    return collection", "method_name": "read_set_from_file", "docstring_tokens": "Extract a de - duped collection ( set ) of text from a file . Expected file format is one item per line ."}
{"idx": "cosqa-train-13927", "doc": "python round float to int", "code": "def intround(value):\n        return int(decimal.Decimal.from_float(\n        value).to_integral_value(decimal.ROUND_HALF_EVEN))", "method_name": "intround", "docstring_tokens": "Given a float returns a rounded int . Should give the same result on both Py2 / 3"}
{"idx": "cosqa-train-5607", "doc": "how to write a parser on python", "code": "def __init__(self):\n                        self.parser = argparse.ArgumentParser()\n                self.subparsers = self.parser.add_subparsers()\n                self.parsers = {}", "method_name": "__init__", "docstring_tokens": "__init__ : Performs basic initialisations"}
{"idx": "cosqa-train-15068", "doc": "python dict with keys no value", "code": "def nonull_dict(self):\n                return {k: v for k, v in six.iteritems(self.dict) if v and k != '_codes'}", "method_name": "nonull_dict", "docstring_tokens": "Like dict but does not hold any null values ."}
{"idx": "cosqa-train-11777", "doc": "how to remove blank lines from a text file in python", "code": "def get_stripped_file_lines(filename):\n        try:\n        lines = open(filename).readlines()\n    except FileNotFoundError:\n        fatal(\"Could not open file: {!r}\".format(filename))\n\n    return [line.strip() for line in lines]", "method_name": "get_stripped_file_lines", "docstring_tokens": "Return lines of a file with whitespace removed"}
{"idx": "cosqa-train-7409", "doc": "how to hash a binary file in python", "code": "def generate_hash(filepath):\n        fr = FileReader(filepath)\n    data = fr.read_bin()\n    return _calculate_sha256(data)", "method_name": "generate_hash", "docstring_tokens": "Public function that reads a local file and generates a SHA256 hash digest for it"}
{"idx": "cosqa-train-6732", "doc": "python get function keyword names", "code": "def parse_func_kwarg_keys(func, with_vals=False):\n        sourcecode = get_func_sourcecode(func, strip_docstr=True,\n                                     strip_comments=True)\n    kwkeys = parse_kwarg_keys(sourcecode, with_vals=with_vals)\n        return kwkeys", "method_name": "parse_func_kwarg_keys", "docstring_tokens": "hacky inference of kwargs keys"}
{"idx": "cosqa-train-12054", "doc": "iterate through words in text file python", "code": "def extract_words(lines):\n        for line in lines:\n        for word in re.findall(r\"\\w+\", line):\n            yield word", "method_name": "extract_words", "docstring_tokens": "Extract from the given iterable of lines the list of words ."}
{"idx": "cosqa-train-18846", "doc": "python make a put request to restful endpoint", "code": "def put(self, endpoint: str, **kwargs) -> dict:\n                return self._request('PUT', endpoint, **kwargs)", "method_name": "put", "docstring_tokens": "HTTP PUT operation to API endpoint ."}
{"idx": "cosqa-train-13151", "doc": "python get the id of the current thread", "code": "def threadid(self):\n                current = self.thread.ident\n        main = get_main_thread()\n        if main is None:\n            return current\n        else:\n            return current if current != main.ident else None", "method_name": "threadid", "docstring_tokens": "Current thread ident . If current thread is main thread then it returns None ."}
{"idx": "cosqa-train-4543", "doc": "python function returning a list of all entities is called", "code": "def filtany(entities, **kw):\n    ret = set()\n  for k,v in kw.items():\n    for entity in entities:\n      if getattr(entity, k)() == v:\n        ret.add(entity)\n  return ret", "method_name": "filtany", "docstring_tokens": "Filter a set of entities based on method return . Use keyword arguments . Example : filtmeth ( entities id = 123 ) filtmeth ( entities name = bart )"}
{"idx": "cosqa-train-19579", "doc": "how to flat a list of list python", "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"      return [item for sublist in x for item in sublist]", "method_name": "flatten_list", "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"}
{"idx": "cosqa-train-19307", "doc": "python read yaml to numpy", "code": "def numpy_to_yaml(representer: Representer, data: np.ndarray) -> Sequence[Any]:\n        return representer.represent_sequence(\n        \"!numpy_array\",\n        data.tolist()\n    )", "method_name": "numpy_to_yaml", "docstring_tokens": "Write a numpy array to YAML ."}
{"idx": "cosqa-train-10997", "doc": "discord python get user from id string", "code": "def get_user_by_id(self, id):\n                return self.db_adapter.get_object(self.UserClass, id=id)", "method_name": "get_user_by_id", "docstring_tokens": "Retrieve a User object by ID ."}
{"idx": "cosqa-train-18792", "doc": "list of arbitrary objects to counts in python", "code": "def count(args):\n        counts = defaultdict(int)\n    for arg in args:\n        for item in arg:\n            counts[item] = counts[item] + 1\n    return counts", "method_name": "count", "docstring_tokens": "count occurences in a list of lists >>> count ( [[ a b ] [ a ]] ) defaultdict ( int { a : 2 b : 1 } )"}
{"idx": "cosqa-train-11636", "doc": "how to know queue size in python", "code": "def qsize(self):\n                self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n", "method_name": "qsize", "docstring_tokens": "Return the approximate size of the queue ( not reliable! ) ."}
{"idx": "cosqa-train-12000", "doc": "impute missing values in python", "code": "def impute_data(self,x):\n                imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n        return imp.fit_transform(x)", "method_name": "impute_data", "docstring_tokens": "Imputes data set containing Nan values"}
{"idx": "cosqa-dev-78", "doc": "python dict rank by value", "code": "def revrank_dict(dict, key=lambda t: t[1], as_tuple=False):\n        sorted_list = sorted(dict.items(), key=key, reverse=True)\n    return OrderedDict(sorted_list) if not as_tuple else tuple(sorted_list)", "method_name": "revrank_dict", "docstring_tokens": "Reverse sorts a #dict by a given key optionally returning it as a #tuple . By default the @dict is sorted by it s value ."}
{"idx": "cosqa-train-13276", "doc": "generate short unique id python", "code": "def generate_unique_host_id():\n        host = \".\".join(reversed(socket.gethostname().split(\".\")))\n    pid = os.getpid()\n    return \"%s.%d\" % (host, pid)", "method_name": "generate_unique_host_id", "docstring_tokens": "Generate a unique ID that is somewhat guaranteed to be unique among all instances running at the same time ."}
{"idx": "cosqa-train-11501", "doc": "python numpy inverse of the matrix", "code": "def MatrixInverse(a, adj):\n        return np.linalg.inv(a if not adj else _adjoint(a)),", "method_name": "MatrixInverse", "docstring_tokens": "Matrix inversion op ."}
{"idx": "cosqa-train-11153", "doc": "python how to mix backslash and forward slashes in path", "code": "def norm_slash(name):\n        if isinstance(name, str):\n        return name.replace('/', \"\\\\\") if not is_case_sensitive() else name\n    else:\n        return name.replace(b'/', b\"\\\\\") if not is_case_sensitive() else name", "method_name": "norm_slash", "docstring_tokens": "Normalize path slashes ."}
{"idx": "cosqa-train-14436", "doc": "reduce functon not defined in python", "code": "def compose(func_list):\n        def f(G, bim):\n        for func in func_list:\n            G, bim = func(G, bim)\n        return G, bim\n\n    return f", "method_name": "compose", "docstring_tokens": "composion of preprocessing functions"}
{"idx": "cosqa-train-19789", "doc": "python detect key press linux", "code": "def _kbhit_unix() -> bool:\n        dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []", "method_name": "_kbhit_unix", "docstring_tokens": "Under UNIX : is a keystroke available?"}
{"idx": "cosqa-train-17572", "doc": "how to generate random binary tree in python", "code": "def getRandomBinaryTreeLeafNode(binaryTree):\n        if binaryTree.internal == True:\n        if random.random() > 0.5:\n            return getRandomBinaryTreeLeafNode(binaryTree.left)\n        else:\n            return getRandomBinaryTreeLeafNode(binaryTree.right)\n    else:\n        return binaryTree", "method_name": "getRandomBinaryTreeLeafNode", "docstring_tokens": "Get random binary tree node ."}
{"idx": "cosqa-train-2445", "doc": "python get epoch milis from datetime", "code": "def _dt_to_epoch(dt):\n                try:\n            epoch = dt.timestamp()\n        except AttributeError:              epoch = (dt - datetime(1970, 1, 1)).total_seconds()\n        return epoch", "method_name": "_dt_to_epoch", "docstring_tokens": "Convert datetime to epoch seconds ."}
{"idx": "cosqa-train-15289", "doc": "python get environ user windows", "code": "def get_user_name():\n        if sys.platform == 'win32':\n                user = os.getenv('USERNAME')\n    else:\n        user = os.getenv('LOGNAME')\n\n    return user", "method_name": "get_user_name", "docstring_tokens": "Get user name provide by operating system"}
{"idx": "cosqa-train-9986", "doc": "iterator is past the end python", "code": "def __next__(self):\n        res = self._head\n    self._fill()\n    if res is None:\n      raise StopIteration()\n    return res", "method_name": "__next__", "docstring_tokens": "Pop the head off the iterator and return it ."}
{"idx": "cosqa-train-9114", "doc": "python if file not exist then creat", "code": "def check_create_folder(filename):\n        os.makedirs(os.path.dirname(filename), exist_ok=True)", "method_name": "check_create_folder", "docstring_tokens": "Check if the folder exisits . If not create the folder"}
{"idx": "cosqa-train-18440", "doc": "python howe to tell if path passed in is absolute or relative", "code": "def is_relative_url(url):\n        if url.startswith(\"        return None\n    if url.find(\"://\") > 0 or url.startswith(\"//\"):\n                return False\n    return True", "method_name": "is_relative_url", "docstring_tokens": "simple method to determine if a url is relative or absolute"}
{"idx": "cosqa-train-16521", "doc": "maker a string lowercase pythong", "code": "def to_snake_case(text):\n        s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()", "method_name": "to_snake_case", "docstring_tokens": "Convert to snake case ."}
{"idx": "cosqa-train-9880", "doc": "python sys stdout write new line", "code": "def println(msg):\n        sys.stdout.write(msg)\n    sys.stdout.flush()\n    sys.stdout.write('\\x08' * len(msg))\n    sys.stdout.flush()", "method_name": "println", "docstring_tokens": "Convenience function to print messages on a single line in the terminal"}
{"idx": "cosqa-train-11091", "doc": "python how to create a iterable", "code": "def force_iterable(f):\n        def wrapper(*args, **kwargs):\n        r = f(*args, **kwargs)\n        if hasattr(r, '__iter__'):\n            return r\n        else:\n            return [r]\n    return wrapper", "method_name": "force_iterable", "docstring_tokens": "Will make any functions return an iterable objects by wrapping its result in a list ."}
{"idx": "cosqa-train-9907", "doc": "how to use python function in tensorflow", "code": "def _float_feature(value):\n    if not isinstance(value, list):\n    value = [value]\n  return tf.train.Feature(float_list=tf.train.FloatList(value=value))", "method_name": "_float_feature", "docstring_tokens": "Wrapper for inserting float features into Example proto ."}
{"idx": "cosqa-train-11127", "doc": "python how to get range of array with positive values numpy", "code": "def _interval_to_bound_points(array):\n        array_boundaries = np.array([x.left for x in array])\n    array_boundaries = np.concatenate(\n        (array_boundaries, np.array([array[-1].right])))\n\n    return array_boundaries", "method_name": "_interval_to_bound_points", "docstring_tokens": "Helper function which returns an array with the Intervals boundaries ."}
{"idx": "cosqa-train-10271", "doc": "python 3 a build string from iterable", "code": "def commajoin_as_strings(iterable):\n        return _(u',').join((six.text_type(i) for i in iterable))", "method_name": "commajoin_as_strings", "docstring_tokens": "Join the given iterable with"}
{"idx": "cosqa-train-12615", "doc": "unchecking a radio button python", "code": "def checkbox_uncheck(self, force_check=False):\n                if self.get_attribute('checked'):\n            self.click(force_click=force_check)", "method_name": "checkbox_uncheck", "docstring_tokens": "Wrapper to uncheck a checkbox"}
{"idx": "cosqa-train-12906", "doc": "python expected type sized", "code": "def _requiredSize(shape, dtype):\n\treturn math.floor(np.prod(np.asarray(shape, dtype=np.uint64)) * np.dtype(dtype).itemsize)", "method_name": "_requiredSize", "docstring_tokens": "Determines the number of bytes required to store a NumPy array with the specified shape and datatype ."}
{"idx": "cosqa-train-18559", "doc": "python load csv to numpy array", "code": "def csv_to_numpy(string_like, dtype=None):          stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')", "method_name": "csv_to_numpy", "docstring_tokens": "Convert a CSV object to a numpy array ."}
{"idx": "cosqa-dev-141", "doc": "python remove element from list time complexity", "code": "def remove_elements(target, indices):\n        copied = list(target)\n\n    for index in reversed(indices):\n        del copied[index]\n    return copied", "method_name": "remove_elements", "docstring_tokens": "Remove multiple elements from a list and return result . This implementation is faster than the alternative below . Also note the creation of a new list to avoid altering the original . We don t have any current use for the original intact list but may in the future ..."}
{"idx": "cosqa-train-9520", "doc": "python property by string name", "code": "def get_propety_by_name(pif, name):\n        warn(\"This method has been deprecated in favor of get_property_by_name\")\n    return next((x for x in pif.properties if x.name == name), None)", "method_name": "get_propety_by_name", "docstring_tokens": "Get a property by name"}
{"idx": "cosqa-train-7816", "doc": "index of an entry in a list python", "code": "def is_in(self, search_list, pair):\n                index = -1\n        for nr, i in enumerate(search_list):\n            if(np.all(i == pair)):\n                return nr\n        return index", "method_name": "is_in", "docstring_tokens": "If pair is in search_list return the index . Otherwise return - 1"}
{"idx": "cosqa-train-4764", "doc": "python how to determine if an iterable is iterable", "code": "def _is_iterable(item):\n        return isinstance(item, collections.Iterable) and not isinstance(item, six.string_types)", "method_name": "_is_iterable", "docstring_tokens": "Checks if an item is iterable ( list tuple generator ) but not string"}
{"idx": "cosqa-train-18858", "doc": "python how to create date from string", "code": "def get_from_gnucash26_date(date_str: str) -> date:\n        date_format = \"%Y%m%d\"\n    result = datetime.strptime(date_str, date_format).date()\n    return result", "method_name": "get_from_gnucash26_date", "docstring_tokens": "Creates a datetime from GnuCash 2 . 6 date string"}
{"idx": "cosqa-train-11312", "doc": "how to append a line in a file in the middle of file in python", "code": "def prepend_line(filepath, line):\n        with open(filepath) as f:\n        lines = f.readlines()\n\n    lines.insert(0, line)\n\n    with open(filepath, 'w') as f:\n        f.writelines(lines)", "method_name": "prepend_line", "docstring_tokens": "Rewrite a file adding a line to its beginning ."}
{"idx": "cosqa-train-11876", "doc": "how to split a string by every character in python", "code": "def _split(string, splitters):\n        part = ''\n    for character in string:\n        if character in splitters:\n            yield part\n            part = ''\n        else:\n            part += character\n    yield part", "method_name": "_split", "docstring_tokens": "Splits a string into parts at multiple characters"}
{"idx": "cosqa-train-19520", "doc": "python get index of element each time it appears in list", "code": "def index(self, item):\n                for i, x in enumerate(self.iter()):\n            if x == item:\n                return i\n        return None", "method_name": "index", "docstring_tokens": "Not recommended for use on large lists due to time complexity but it works"}
{"idx": "cosqa-train-4792", "doc": "python how to make dot character", "code": "def _dotify(cls, data):\n        return ''.join(char if char in cls.PRINTABLE_DATA else '.' for char in data)", "method_name": "_dotify", "docstring_tokens": "Add dots ."}
{"idx": "cosqa-train-15375", "doc": "python heap top element", "code": "def pop(h):\n        n = h.size() - 1\n    h.swap(0, n)\n    down(h, 0, n)\n    return h.pop()", "method_name": "pop", "docstring_tokens": "Pop the heap value from the heap ."}
{"idx": "cosqa-train-5644", "doc": "in python, how to print strings in different colours", "code": "def cprint(string, fg=None, bg=None, end='\\n', target=sys.stdout):\n        _color_manager.set_color(fg, bg)\n    target.write(string + end)\n    target.flush()      _color_manager.set_defaults()", "method_name": "cprint", "docstring_tokens": "Print a colored string to the target handle ."}
{"idx": "cosqa-train-10096", "doc": "python yield unsupported operand type(s)", "code": "def visit_BinOp(self, node):\n                args = [self.visit(arg) for arg in (node.left, node.right)]\n        return list({frozenset.union(*x) for x in itertools.product(*args)})", "method_name": "visit_BinOp", "docstring_tokens": "Return type depend from both operand of the binary operation ."}
{"idx": "cosqa-train-7703", "doc": "how to sort files by filename python", "code": "def sort_filenames(filenames):\n        basenames = [os.path.basename(x) for x in filenames]\n    indexes = [i[0] for i in sorted(enumerate(basenames), key=lambda x:x[1])]\n    return [filenames[x] for x in indexes]", "method_name": "sort_filenames", "docstring_tokens": "sort a list of files by filename only ignoring the directory names"}
{"idx": "cosqa-train-7165", "doc": "how to change the axis range in a plot in python for subplots", "code": "def set_xlimits(self, row, column, min=None, max=None):\n                subplot = self.get_subplot_at(row, column)\n        subplot.set_xlimits(min, max)", "method_name": "set_xlimits", "docstring_tokens": "Set x - axis limits of a subplot ."}
{"idx": "cosqa-train-5794", "doc": "python view vector to asimuth elevation", "code": "def world_to_view(v):\n        return v.x * config.scale_x, v.y * config.scale_y", "method_name": "world_to_view", "docstring_tokens": "world coords to view coords ; v an eu . Vector2 returns ( float float )"}
{"idx": "cosqa-train-7664", "doc": "python sort data by variable", "code": "def sort_data(x, y):\n        xy = sorted(zip(x, y))\n    x, y = zip(*xy)\n    return x, y", "method_name": "sort_data", "docstring_tokens": "Sort the data ."}
{"idx": "cosqa-train-10854", "doc": "compute the middle index in list python", "code": "def bisect_index(a, x):\n        i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError", "method_name": "bisect_index", "docstring_tokens": "Find the leftmost index of an element in a list using binary search ."}
{"idx": "cosqa-train-6992", "doc": "python josn dump to file", "code": "def save_notebook(work_notebook, write_file):\n        with open(write_file, 'w') as out_nb:\n        json.dump(work_notebook, out_nb, indent=2)", "method_name": "save_notebook", "docstring_tokens": "Saves the Jupyter work_notebook to write_file"}
{"idx": "cosqa-train-13856", "doc": "python remove condition apply to dict", "code": "def _remove_dict_keys_with_value(dict_, val):\n    return {k: v for k, v in dict_.items() if v is not val}", "method_name": "_remove_dict_keys_with_value", "docstring_tokens": "Removes dict keys which have have self as value ."}
{"idx": "cosqa-train-11770", "doc": "python remove directory tree if no files", "code": "def clean_out_dir(directory):\n        if not isinstance(directory, path):\n        directory = path(directory)\n    for file_path in directory.files():\n        file_path.remove()\n    for dir_path in directory.dirs():\n        dir_path.rmtree()", "method_name": "clean_out_dir", "docstring_tokens": "Delete all the files and subdirectories in a directory ."}
{"idx": "cosqa-train-13922", "doc": "how to pop a node off a stack python", "code": "def push(h, x):\n        h.push(x)\n    up(h, h.size()-1)", "method_name": "push", "docstring_tokens": "Push a new value into heap ."}
{"idx": "cosqa-train-15821", "doc": "python open file with exclusive access permissions", "code": "def chmod_add_excute(filename):\n                st = os.stat(filename)\n        os.chmod(filename, st.st_mode | stat.S_IEXEC)", "method_name": "chmod_add_excute", "docstring_tokens": "Adds execute permission to file . : param filename : : return :"}
{"idx": "cosqa-train-11046", "doc": "python gevent combine multiprocessing", "code": "def fetch_event(urls):\n        rs = (grequests.get(u) for u in urls)\n    return [content.json() for content in grequests.map(rs)]", "method_name": "fetch_event", "docstring_tokens": "This parallel fetcher uses gevent one uses gevent"}
{"idx": "cosqa-train-6681", "doc": "create copy that doesn't alter original python", "code": "def copy(obj):\n    def copy(self):\n                from copy import deepcopy\n\n        return deepcopy(self)\n    obj.copy = copy\n    return obj", "method_name": "copy", "docstring_tokens": ""}
{"idx": "cosqa-train-16570", "doc": "remove trailing whitespace in python", "code": "def clean(s):\n    lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)", "method_name": "clean", "docstring_tokens": "Removes trailing whitespace on each line ."}
{"idx": "cosqa-train-6463", "doc": "python default menuitem select", "code": "def get_python(self):\n                if self.multiselect:\n            return super(MultiSelectField, self).get_python()\n\n        return self._get()", "method_name": "get_python", "docstring_tokens": "Only return cursor instance if configured for multiselect"}
{"idx": "cosqa-dev-408", "doc": "get sort indexes in a list python", "code": "def _index_ordering(redshift_list):\n                redshift_list = np.array(redshift_list)\n        sort_index = np.argsort(redshift_list)\n        return sort_index", "method_name": "_index_ordering", "docstring_tokens": ""}
{"idx": "cosqa-train-14103", "doc": "how to start a new line in python gui", "code": "def go_to_new_line(self):\n                self.stdkey_end(False, False)\n        self.insert_text(self.get_line_separator())", "method_name": "go_to_new_line", "docstring_tokens": "Go to the end of the current line and create a new line"}
{"idx": "cosqa-train-15982", "doc": "how to get tuple of colors in image python", "code": "def rgba_bytes_tuple(self, x):\n                return tuple(int(u*255.9999) for u in self.rgba_floats_tuple(x))", "method_name": "rgba_bytes_tuple", "docstring_tokens": "Provides the color corresponding to value x in the form of a tuple ( R G B A ) with int values between 0 and 255 ."}
{"idx": "cosqa-train-12120", "doc": "make datetime aware python", "code": "def date_to_datetime(x):\n        if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x", "method_name": "date_to_datetime", "docstring_tokens": "Convert a date into a datetime"}
{"idx": "cosqa-train-8617", "doc": "python dict drop empty", "code": "def purge_dict(idict):\n        odict = {}\n    for key, val in idict.items():\n        if is_null(val):\n            continue\n        odict[key] = val\n    return odict", "method_name": "purge_dict", "docstring_tokens": "Remove null items from a dictionary"}
{"idx": "cosqa-train-7344", "doc": "python pretty print without sort", "code": "def pprint(obj, verbose=False, max_width=79, newline='\\n'):\n        printer = RepresentationPrinter(sys.stdout, verbose, max_width, newline)\n    printer.pretty(obj)\n    printer.flush()\n    sys.stdout.write(newline)\n    sys.stdout.flush()", "method_name": "pprint", "docstring_tokens": "Like pretty but print to stdout ."}
{"idx": "cosqa-train-12579", "doc": "python check if interactive", "code": "def determine_interactive(self):\n\t\ttry:\n\t\t\tif not sys.stdout.isatty() or os.getpgrp() != os.tcgetpgrp(sys.stdout.fileno()):\n\t\t\t\tself.interactive = 0\n\t\t\t\treturn False\n\t\texcept Exception:\n\t\t\tself.interactive = 0\n\t\t\treturn False\n\t\tif self.interactive == 0:\n\t\t\treturn False\n\t\treturn True", "method_name": "determine_interactive", "docstring_tokens": "Determine whether we re in an interactive shell . Sets interactivity off if appropriate . cf http : // stackoverflow . com / questions / 24861351 / how - to - detect - if - python - script - is - being - run - as - a - background - process"}
{"idx": "cosqa-train-13747", "doc": "python pid determine existence", "code": "def pid_exists(pid):\n        try:\n        os.kill(pid, 0)\n    except OSError as exc:\n        return exc.errno == errno.EPERM\n    else:\n        return True", "method_name": "pid_exists", "docstring_tokens": "Determines if a system process identifer exists in process table ."}
{"idx": "cosqa-train-9532", "doc": "python pymongo insert without duplicatte", "code": "def insert_one(self, mongo_collection, doc, mongo_db=None, **kwargs):\n                collection = self.get_collection(mongo_collection, mongo_db=mongo_db)\n\n        return collection.insert_one(doc, **kwargs)", "method_name": "insert_one", "docstring_tokens": "Inserts a single document into a mongo collection https : // api . mongodb . com / python / current / api / pymongo / collection . html#pymongo . collection . Collection . insert_one"}
{"idx": "cosqa-train-13962", "doc": "how to read json files with multiple object python", "code": "def _read_json_file(self, json_file):\n                self.log.debug(\"Reading '%s' JSON file...\" % json_file)\n\n        with open(json_file, 'r') as f:\n            return json.load(f, object_pairs_hook=OrderedDict)", "method_name": "_read_json_file", "docstring_tokens": "Helper function to read JSON file as OrderedDict"}
{"idx": "cosqa-train-6510", "doc": "python discord leave voice channel", "code": "async def join(self, ctx, *, channel: discord.VoiceChannel):\n                if ctx.voice_client is not None:\n            return await ctx.voice_client.move_to(channel)\n\n        await channel.connect()", "method_name": "join", "docstring_tokens": "Joins a voice channel"}
{"idx": "cosqa-train-9993", "doc": "python unittest make tests discoverable", "code": "def test():\n        import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)", "method_name": "test", "docstring_tokens": "Run the unit tests ."}
{"idx": "cosqa-train-7967", "doc": "multiline text send message python", "code": "async def _send_plain_text(self, request: Request, stack: Stack):\n                await self._send_text(request, stack, None)", "method_name": "_send_plain_text", "docstring_tokens": "Sends plain text using _send_text () ."}
{"idx": "cosqa-train-6837", "doc": "extract integers from string in python", "code": "def get_numbers(s):\n        result = map(int, re.findall(r'[0-9]+', unicode(s)))\n    return result + [1] * (2 - len(result))", "method_name": "get_numbers", "docstring_tokens": "Extracts all integers from a string an return them in a list"}
{"idx": "cosqa-train-14143", "doc": "python take a string after the title", "code": "def _format_title_string(self, title_string):\n                return self._title_string_format_text_tag(title_string.replace(self.icy_tokkens[0], self.icy_title_prefix))", "method_name": "_format_title_string", "docstring_tokens": "format mpv s title"}
{"idx": "cosqa-dev-130", "doc": "how to randomly select rows in ndarray in python", "code": "def downsample(array, k):\n        length = array.shape[0]\n    indices = random.sample(xrange(length), k)\n    return array[indices]", "method_name": "downsample", "docstring_tokens": "Choose k random elements of array ."}
{"idx": "cosqa-train-13902", "doc": "how to open a file with a path in python", "code": "def get_file_string(filepath):\n        with open(os.path.abspath(filepath)) as f:\n        return f.read()", "method_name": "get_file_string", "docstring_tokens": "Get string from file ."}
{"idx": "cosqa-dev-123", "doc": "python count distance between two vectors", "code": "def distance(vec1, vec2):\n                if isinstance(vec1, Vector2) \\\n                and isinstance(vec2, Vector2):\n            dist_vec = vec2 - vec1\n            return dist_vec.length()\n        else:\n            raise TypeError(\"vec1 and vec2 must be Vector2's\")", "method_name": "distance", "docstring_tokens": "Calculate the distance between two Vectors"}
{"idx": "cosqa-train-10937", "doc": "python get dimensions of list", "code": "def get_dimension_array(array):\n        if all(isinstance(el, list) for el in array):\n        result = [len(array), len(max([x for x in array], key=len,))]\n\n        else:\n        result = [len(array), 1]\n\n    return result", "method_name": "get_dimension_array", "docstring_tokens": "Get dimension of an array getting the number of rows and the max num of columns ."}
{"idx": "cosqa-train-6627", "doc": "python filter lowpass minmum cutoff frequency", "code": "def fft_bandpassfilter(data, fs, lowcut, highcut):\n        fft = np.fft.fft(data)\n                bp = fft.copy()\n\n                    bp *= fft.dot(fft) / bp.dot(bp)\n\n        ibp = 12 * np.fft.ifft(bp)\n    return ibp", "method_name": "fft_bandpassfilter", "docstring_tokens": "http : // www . swharden . com / blog / 2009 - 01 - 21 - signal - filtering - with - python / #comment - 16801"}
{"idx": "cosqa-train-12362", "doc": "python 3, seperate a string into a list at comma", "code": "def comma_delimited_to_list(list_param):\n        if isinstance(list_param, list):\n        return list_param\n    if isinstance(list_param, str):\n        return list_param.split(',')\n    else:\n        return []", "method_name": "comma_delimited_to_list", "docstring_tokens": "Convert comma - delimited list / string into a list of strings"}
{"idx": "cosqa-train-19381", "doc": "how to delete an element in a python dictionary", "code": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None:\n        for d in dict_list:\n        d.pop(key, None)", "method_name": "dictlist_wipe_key", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d delete d [ key ] if it exists ."}
{"idx": "cosqa-train-9187", "doc": "how know if the box was selected in checkbox in python", "code": "def set_value(self, value):\n                if value:\n            self.setChecked(Qt.Checked)\n        else:\n            self.setChecked(Qt.Unchecked)", "method_name": "set_value", "docstring_tokens": "Set value of the checkbox ."}
{"idx": "cosqa-train-10404", "doc": "standard scalar function in python", "code": "def Softsign(a):\n        return np.divide(a, np.add(np.abs(a), 1)),", "method_name": "Softsign", "docstring_tokens": "Softsign op ."}
{"idx": "cosqa-train-9537", "doc": "python random gaussian distribution noise", "code": "def rlognormal(mu, tau, size=None):\n        return np.random.lognormal(mu, np.sqrt(1. / tau), size)", "method_name": "rlognormal", "docstring_tokens": "Return random lognormal variates ."}
{"idx": "cosqa-train-12390", "doc": "return the number of numeric attributes in python", "code": "def __len__(self):\n\t\treturn len([i for i in (set(dir(self)) - self._STANDARD_ATTRS) if i[0] != '_'])", "method_name": "__len__", "docstring_tokens": "Get a list of the public data attributes ."}
{"idx": "cosqa-train-7322", "doc": "python pil camera capture", "code": "def read(self):\n                stream = BytesIO()\n        self.cam.capture(stream, format='png')\n                stream.seek(0)\n        return Image.open(stream)", "method_name": "read", "docstring_tokens": "https : // picamera . readthedocs . io / en / release - 1 . 13 / recipes1 . html#capturing - to - a - pil - image"}
{"idx": "cosqa-train-12959", "doc": "python flask create cookie expiration", "code": "def logout(cache):\n        cache.set(flask.session['auth0_key'], None)\n    flask.session.clear()\n    return True", "method_name": "logout", "docstring_tokens": "Logs out the current session by removing it from the cache . This is expected to only occur when a session has"}
{"idx": "cosqa-train-11983", "doc": "python sqlalchemy model *", "code": "def save(self):\n                self.session.add(self)\n        self.session.flush()\n        return self", "method_name": "save", "docstring_tokens": "Saves the updated model to the current entity db ."}
{"idx": "cosqa-train-636", "doc": "python how to move to next command in for loop", "code": "def do_next(self, args):\n                self._do_print_from_last_cmd = True\n        self._interp.step_over()\n        return True", "method_name": "do_next", "docstring_tokens": "Step over the next statement"}
{"idx": "cosqa-train-10526", "doc": "python check if object is a char", "code": "def is_string(obj):\n        if PYTHON3:\n        str_type = (bytes, str)\n    else:\n        str_type = (bytes, str, unicode)\n    return isinstance(obj, str_type)", "method_name": "is_string", "docstring_tokens": "Is this a string ."}
{"idx": "cosqa-train-7078", "doc": "how to achieve logarithmic complexity in python", "code": "def log_loss(preds, labels):\n        log_likelihood = np.sum(labels * np.log(preds)) / len(preds)\n    return -log_likelihood", "method_name": "log_loss", "docstring_tokens": "Logarithmic loss with non - necessarily - binary labels ."}
{"idx": "cosqa-train-4971", "doc": "python listbox scrollbar not tk", "code": "def __init__(self, master=None, compound=tk.RIGHT, autohidescrollbar=True, **kwargs):\n                ttk.Frame.__init__(self, master)\n        self.columnconfigure(1, weight=1)\n        self.rowconfigure(0, weight=1)\n        self.listbox = tk.Listbox(self, **kwargs)\n        if autohidescrollbar:\n            self.scrollbar = AutoHideScrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview)\n        else:\n            self.scrollbar = ttk.Scrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview)\n        self.config_listbox(yscrollcommand=self.scrollbar.set)\n        if compound is not tk.LEFT and compound is not tk.RIGHT:\n            raise ValueError(\"Invalid compound value passed: {0}\".format(compound))\n        self.__compound = compound\n        self._grid_widgets()", "method_name": "__init__", "docstring_tokens": "Create a Listbox with a vertical scrollbar ."}
{"idx": "cosqa-train-18815", "doc": "identify the most common number in an array python", "code": "def most_significant_bit(lst: np.ndarray) -> int:\n        return np.argwhere(np.asarray(lst) == 1)[0][0]", "method_name": "most_significant_bit", "docstring_tokens": "A helper function that finds the position of the most significant bit in a 1darray of 1s and 0s i . e . the first position where a 1 appears reading left to right ."}
{"idx": "cosqa-train-8090", "doc": "pull multiple values to make table python", "code": "def _tab(content):\n        response = _data_frame(content).to_csv(index=False,sep='\\t')\n    return response", "method_name": "_tab", "docstring_tokens": "Helper funcation that converts text - based get response to tab separated values for additional manipulation ."}
{"idx": "cosqa-train-10324", "doc": "python adjust data to normal distribution", "code": "def normalize(data):\n        out_data = data.copy()\n\n    for i, sample in enumerate(out_data):\n        out_data[i] /= sum(out_data[i])\n\n    return out_data", "method_name": "normalize", "docstring_tokens": "Normalize the data to be in the [ 0 1 ] range ."}
{"idx": "cosqa-train-17806", "doc": "python check if float has no floating points", "code": "def is_finite(value: Any) -> bool:\n        return isinstance(value, int) or (isinstance(value, float) and isfinite(value))", "method_name": "is_finite", "docstring_tokens": "Return true if a value is a finite number ."}
{"idx": "cosqa-train-18378", "doc": "string remove the last blank python", "code": "def remove_blank_lines(string):\n        return \"\\n\".join(line\n                     for line in string.split(\"\\n\")\n                     if len(line.strip()))", "method_name": "remove_blank_lines", "docstring_tokens": "Removes all blank lines in @string"}
{"idx": "cosqa-train-15422", "doc": "python how to display object attributes", "code": "def _repr(obj):\n        vals = \", \".join(\"{}={!r}\".format(\n        name, getattr(obj, name)) for name in obj._attribs)\n    if vals:\n        t = \"{}(name={}, {})\".format(obj.__class__.__name__, obj.name, vals)\n    else:\n        t = \"{}(name={})\".format(obj.__class__.__name__, obj.name)\n    return t", "method_name": "_repr", "docstring_tokens": "Show the received object as precise as possible ."}
{"idx": "cosqa-train-19985", "doc": "determine if a list of numbers contains duplicates python", "code": "def find_duplicates(l: list) -> set:\n        return set([x for x in l if l.count(x) > 1])", "method_name": "find_duplicates", "docstring_tokens": "Return the duplicates in a list ."}
{"idx": "cosqa-train-12927", "doc": "python figure add title label size", "code": "def label_saves(name):\n        plt.legend(loc=0)\n    plt.ylim([0, 1.025])\n    plt.xlabel('$U/D$', fontsize=20)\n    plt.ylabel('$Z$', fontsize=20)\n    plt.savefig(name, dpi=300, format='png',\n            transparent=False, bbox_inches='tight', pad_inches=0.05)", "method_name": "label_saves", "docstring_tokens": "Labels plots and saves file"}
{"idx": "cosqa-train-19204", "doc": "python networkx longest path directed acyclic graph", "code": "def dag_longest_path(graph, source, target):\n        if source == target:\n        return [source]\n    allpaths = nx.all_simple_paths(graph, source, target)\n    longest_path = []\n    for l in allpaths:\n        if len(l) > len(longest_path):\n            longest_path = l\n    return longest_path", "method_name": "dag_longest_path", "docstring_tokens": "Finds the longest path in a dag between two nodes"}
{"idx": "cosqa-train-14117", "doc": "how to take list as input in python seperated with spaces", "code": "def itemlist(item, sep, suppress_trailing=True):\n        return condense(item + ZeroOrMore(addspace(sep + item)) + Optional(sep.suppress() if suppress_trailing else sep))", "method_name": "itemlist", "docstring_tokens": "Create a list of items seperated by seps ."}
{"idx": "cosqa-train-12036", "doc": "is a list in python an array", "code": "def to_list(self):\n                return [[int(self.table.cell_values[0][1]), int(self.table.cell_values[0][2])],\n                [int(self.table.cell_values[1][1]), int(self.table.cell_values[1][2])]]", "method_name": "to_list", "docstring_tokens": "Convert this confusion matrix into a 2x2 plain list of values ."}
{"idx": "cosqa-train-10603", "doc": "python cosine similarity of two vectors", "code": "def cross_v2(vec1, vec2):\n        return vec1.y * vec2.x - vec1.x * vec2.y", "method_name": "cross_v2", "docstring_tokens": "Return the crossproduct of the two vectors as a Vec2 . Cross product doesn t really make sense in 2D but return the Z component of the 3d result ."}
{"idx": "cosqa-train-13884", "doc": "how to model a sphere python", "code": "def Fsphere(q, R):\n        return 4 * np.pi / q ** 3 * (np.sin(q * R) - q * R * np.cos(q * R))", "method_name": "Fsphere", "docstring_tokens": "Scattering form - factor amplitude of a sphere normalized to F ( q = 0 ) = V"}
{"idx": "cosqa-train-13567", "doc": "how to check paths in python", "code": "def is_readable_dir(path):\n    return os.path.isdir(path) and os.access(path, os.R_OK) and os.access(path, os.X_OK)", "method_name": "is_readable_dir", "docstring_tokens": "Returns whether a path names an existing directory we can list and read files from ."}
{"idx": "cosqa-train-9910", "doc": "python test truth value of list", "code": "def assert_exactly_one_true(bool_list):\n        assert isinstance(bool_list, list)\n    counter = 0\n    for item in bool_list:\n        if item:\n            counter += 1\n    return counter == 1", "method_name": "assert_exactly_one_true", "docstring_tokens": "This method asserts that only one value of the provided list is True ."}
{"idx": "cosqa-train-3556", "doc": "python string value of enum", "code": "def EnumValueName(self, enum, value):\n        return self.enum_types_by_name[enum].values_by_number[value].name", "method_name": "EnumValueName", "docstring_tokens": "Returns the string name of an enum value ."}
{"idx": "cosqa-train-6407", "doc": "python create null pointer with ctypes", "code": "def POINTER(obj):\n        p = ctypes.POINTER(obj)\n    if not isinstance(p.from_param, classmethod):\n        def from_param(cls, x):\n            if x is None:\n                return cls()\n            else:\n                return x\n        p.from_param = classmethod(from_param)\n\n    return p", "method_name": "POINTER", "docstring_tokens": "Create ctypes pointer to object ."}
{"idx": "cosqa-train-11407", "doc": "python md5 hash string", "code": "def md5_string(s):\n        m = hashlib.md5()\n    m.update(s)\n    return str(m.hexdigest())", "method_name": "md5_string", "docstring_tokens": "Shortcut to create md5 hash : param s : : return :"}
{"idx": "cosqa-train-11151", "doc": "python how to match dictionarys", "code": "def intersect(d1, d2):\n        return dict((k, d1[k]) for k in d1 if k in d2 and d1[k] == d2[k])", "method_name": "intersect", "docstring_tokens": "Intersect dictionaries d1 and d2 by key * and * value ."}
{"idx": "cosqa-train-10325", "doc": "select elements from a list, then delete these elements in the original list python", "code": "def remove_elements(target, indices):\n        copied = list(target)\n\n    for index in reversed(indices):\n        del copied[index]\n    return copied", "method_name": "remove_elements", "docstring_tokens": "Remove multiple elements from a list and return result . This implementation is faster than the alternative below . Also note the creation of a new list to avoid altering the original . We don t have any current use for the original intact list but may in the future ..."}
{"idx": "cosqa-train-8092", "doc": "pybool to c++ python 3", "code": "def convertToBool():\n        if not OPTIONS.strictBool.value:\n        return []\n\n    REQUIRES.add('strictbool.asm')\n\n    result = []\n    result.append('pop af')\n    result.append('call __NORMALIZE_BOOLEAN')\n    result.append('push af')\n\n    return result", "method_name": "convertToBool", "docstring_tokens": "Convert a byte value to boolean ( 0 or 1 ) if the global flag strictBool is True"}
{"idx": "cosqa-train-11296", "doc": "how to add a ? in python url", "code": "def append_query_parameter(url, parameters, ignore_if_exists=True):\n        if ignore_if_exists:\n        for key in parameters.keys():\n            if key + \"=\" in url:\n                del parameters[key]\n    parameters_str = \"&\".join(k + \"=\" + v for k, v in parameters.items())\n    append_token = \"&\" if \"?\" in url else \"?\"\n    return url + append_token + parameters_str", "method_name": "append_query_parameter", "docstring_tokens": "quick and dirty appending of query parameters to a url"}
{"idx": "cosqa-train-13226", "doc": "python how to check whether the process with pid exist", "code": "def pid_exists(pid):\n        try:\n        os.kill(pid, 0)\n    except OSError as exc:\n        return exc.errno == errno.EPERM\n    else:\n        return True", "method_name": "pid_exists", "docstring_tokens": "Determines if a system process identifer exists in process table ."}
{"idx": "cosqa-train-11339", "doc": "how to cehck if somethign is a constant python", "code": "def is_static(*p):\n        return all(is_CONST(x) or\n               is_number(x) or\n               is_const(x)\n               for x in p)", "method_name": "is_static", "docstring_tokens": "A static value ( does not change at runtime ) which is known at compile time"}
{"idx": "cosqa-train-8363", "doc": "python check if variable exists in locals", "code": "def getvariable(name):\n        import inspect\n    fr = inspect.currentframe()\n    try:\n        while fr:\n            fr = fr.f_back\n            vars = fr.f_locals\n            if name in vars:\n                return vars[name]\n    except:\n        pass\n    return None", "method_name": "getvariable", "docstring_tokens": "Get the value of a local variable somewhere in the call stack ."}
{"idx": "cosqa-train-18344", "doc": "python filter a dictionary by value", "code": "def _(f, x):\n        return {k: v for k, v in x.items() if f(k, v)}", "method_name": "_", "docstring_tokens": "filter for dict note f should have signature : f :: key - > value - > bool"}
{"idx": "cosqa-train-17007", "doc": "read json file and turn into dictionary using python", "code": "def from_file(file_path) -> dict:\n                with io.open(file_path, 'r', encoding='utf-8') as json_stream:\n            return Json.parse(json_stream, True)", "method_name": "from_file", "docstring_tokens": "Load JSON file"}
{"idx": "cosqa-train-10471", "doc": "python change the shape of list", "code": "def shape_list(l,shape,dtype):\n        return np.array(l, dtype=dtype).reshape(shape)", "method_name": "shape_list", "docstring_tokens": "Shape a list of lists into the appropriate shape and data type"}
{"idx": "cosqa-train-17916", "doc": "how to get the datatypes in python", "code": "def dtypes(self):\n                return [(str(f.name), f.dataType.simpleString()) for f in self.schema.fields]", "method_name": "dtypes", "docstring_tokens": "Returns all column names and their data types as a list ."}
{"idx": "cosqa-train-12023", "doc": "initializing an empty string with a size python", "code": "def random_str(size=10):\n        return ''.join(random.choice(string.ascii_lowercase) for _ in range(size))", "method_name": "random_str", "docstring_tokens": "create random string of selected size"}
{"idx": "cosqa-train-17405", "doc": "cast str as int in python", "code": "def try_cast_int(s):\n        try:\n        temp = re.findall('\\d', str(s))\n        temp = ''.join(temp)\n        return int(temp)\n    except:\n        return s", "method_name": "try_cast_int", "docstring_tokens": "( str ) - > int All the digits in a given string are concatenated and converted into a single number ."}
{"idx": "cosqa-train-5849", "doc": "python, sql table column details", "code": "def column_names(self, table):\n            table_info = self.execute(\n        u'PRAGMA table_info(%s)' % quote(table))\n      return (column['name'] for column in table_info)", "method_name": "column_names", "docstring_tokens": "An iterable of column names for a particular table or view ."}
{"idx": "cosqa-dev-560", "doc": "python pathlib to traverse directories", "code": "def get_files(dir_name):\n        return [(os.path.join('.', d), [os.path.join(d, f) for f in files]) for d, _, files in os.walk(dir_name)]", "method_name": "get_files", "docstring_tokens": "Simple directory walker"}
{"idx": "cosqa-train-14803", "doc": "python create list of columns with their dtype", "code": "def _get_str_columns(sf):\n        return [name for name in sf.column_names() if sf[name].dtype == str]", "method_name": "_get_str_columns", "docstring_tokens": "Returns a list of names of columns that are string type ."}
{"idx": "cosqa-train-9967", "doc": "python turn all nested object to dict", "code": "def as_dict(self):\n                dicts = [x.as_dict for x in self.children]\n        return {'{0} {1}'.format(self.name, self.value): dicts}", "method_name": "as_dict", "docstring_tokens": "Return all child objects in nested dict ."}
{"idx": "cosqa-train-11699", "doc": "python read dicom images", "code": "def numpy(self):\n                        image_reader = gdcm.ImageReader()\n        image_reader.SetFileName(self.fname)\n        if not image_reader.Read():\n            raise IOError(\"Could not read DICOM image\")\n        pixel_array = self._gdcm_to_numpy(image_reader.GetImage())\n        return pixel_array", "method_name": "numpy", "docstring_tokens": "Grabs image data and converts it to a numpy array"}
{"idx": "cosqa-train-9285", "doc": "python making string lower case", "code": "def to_camel(s):\n            return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), '_' + s)", "method_name": "to_camel", "docstring_tokens": ": param string s : under_scored string to be CamelCased : return : CamelCase version of input : rtype : str"}
{"idx": "cosqa-train-9519", "doc": "how to implement a macro in python", "code": "def define_macro(self, name, themacro):\n                from IPython.core import macro\n\n        if isinstance(themacro, basestring):\n            themacro = macro.Macro(themacro)\n        if not isinstance(themacro, macro.Macro):\n            raise ValueError('A macro must be a string or a Macro instance.')\n        self.user_ns[name] = themacro", "method_name": "define_macro", "docstring_tokens": "Define a new macro"}
{"idx": "cosqa-train-14131", "doc": "python subprocess close stdin", "code": "def _finish(self):\n                if self._process.returncode is None:\n            self._process.stdin.flush()\n            self._process.stdin.close()\n            self._process.wait()\n            self.closed = True", "method_name": "_finish", "docstring_tokens": "Closes and waits for subprocess to exit ."}
{"idx": "cosqa-train-16776", "doc": "sum within a comprehension python", "code": "def _accumulate(sequence, func):\n        iterator = iter(sequence)\n    total = next(iterator)\n    yield total\n    for element in iterator:\n        total = func(total, element)\n        yield total", "method_name": "_accumulate", "docstring_tokens": "Python2 accumulate implementation taken from https : // docs . python . org / 3 / library / itertools . html#itertools . accumulate"}
{"idx": "cosqa-train-12089", "doc": "python timedelta without microseconds", "code": "def timedelta_seconds(timedelta):\n        return (timedelta.total_seconds() if hasattr(timedelta, \"total_seconds\")\n            else timedelta.days * 24 * 3600 + timedelta.seconds +\n                 timedelta.microseconds / 1000000.)", "method_name": "timedelta_seconds", "docstring_tokens": "Returns the total timedelta duration in seconds ."}
{"idx": "cosqa-train-16968", "doc": "change python object to string", "code": "def string(value) -> str:\n                return system_json.dumps(Json(value).safe_object(), ensure_ascii=False)", "method_name": "string", "docstring_tokens": "string dict / object / value to JSON"}
{"idx": "cosqa-train-4701", "doc": "eit request header in python flask", "code": "def get_trace_id_from_flask():\n        if flask is None or not flask.request:\n        return None\n\n    header = flask.request.headers.get(_FLASK_TRACE_HEADER)\n\n    if header is None:\n        return None\n\n    trace_id = header.split(\"/\", 1)[0]\n\n    return trace_id", "method_name": "get_trace_id_from_flask", "docstring_tokens": "Get trace_id from flask request headers ."}
{"idx": "cosqa-dev-423", "doc": "python lower all elements in list", "code": "def gen_lower(x: Iterable[str]) -> Generator[str, None, None]:\n        for string in x:\n        yield string.lower()", "method_name": "gen_lower", "docstring_tokens": "Args : x : iterable of strings"}
{"idx": "cosqa-train-14769", "doc": "using sort to move element in to new position in list python", "code": "def insort_no_dup(lst, item):\n        import bisect\n    ix = bisect.bisect_left(lst, item)\n    if lst[ix] != item: \n        lst[ix:ix] = [item]", "method_name": "insort_no_dup", "docstring_tokens": "If item is not in lst add item to list at its sorted position"}
{"idx": "cosqa-train-19246", "doc": "remove special characters from column names in python", "code": "def normalize_column_names(df):\n    r    columns = df.columns if hasattr(df, 'columns') else df\n    columns = [c.lower().replace(' ', '_') for c in columns]\n    return columns", "method_name": "normalize_column_names", "docstring_tokens": "r Clean up whitespace in column names . See better version at pugnlp . clean_columns"}
{"idx": "cosqa-dev-345", "doc": "calculate the average of a given list in python", "code": "def mean(inlist):\n        sum = 0\n    for item in inlist:\n        sum = sum + item\n    return sum / float(len(inlist))", "method_name": "mean", "docstring_tokens": "Returns the arithematic mean of the values in the passed list . Assumes a 1D list but will function on the 1st dim of an array ( ! ) ."}
{"idx": "cosqa-train-10217", "doc": "past python git clone", "code": "def mkhead(repo, path):\n        return git.Head(repo, git.Head.to_full_path(path))", "method_name": "mkhead", "docstring_tokens": ": return : New branch / head instance"}
{"idx": "cosqa-train-7023", "doc": "python lambda function with 3 params", "code": "def make_lambda(call):\n        empty_args = ast.arguments(args=[], vararg=None, kwarg=None, defaults=[])\n    return ast.Lambda(args=empty_args, body=call)", "method_name": "make_lambda", "docstring_tokens": "Wrap an AST Call node to lambda expression node . call : ast . Call node"}
{"idx": "cosqa-train-12911", "doc": "check for punctuation python", "code": "def is_punctuation(text):\n        return not (text.lower() in config.AVRO_VOWELS or\n                text.lower() in config.AVRO_CONSONANTS)", "method_name": "is_punctuation", "docstring_tokens": "Check if given string is a punctuation"}
{"idx": "cosqa-train-4157", "doc": "unsupported media type json python", "code": "def parse(self, data, mimetype):\n                encoding = mimetype.params.get('charset') or 'utf-8'\n\n        return json.loads(data.decode(encoding))", "method_name": "parse", "docstring_tokens": "Parses a byte array containing a JSON document and returns a Python object . : param data : The byte array containing a JSON document . : param MimeType mimetype : The mimetype chose to parse the data . : return : A Python object ."}
{"idx": "cosqa-train-19905", "doc": "python separate string to list", "code": "def _str_to_list(value, separator):\n        value_list = [item.strip() for item in value.split(separator)]\n    value_list_sanitized = builtins.list(filter(None, value_list))\n    if len(value_list_sanitized) > 0:\n        return value_list_sanitized\n    else:\n        raise ValueError('Invalid list variable.')", "method_name": "_str_to_list", "docstring_tokens": "Convert a string to a list with sanitization ."}
{"idx": "cosqa-train-18773", "doc": "python remove phrase from list of strings", "code": "def remove_empty_text(utterances: List[Utterance]) -> List[Utterance]:\n        return [utter for utter in utterances if utter.text.strip() != \"\"]", "method_name": "remove_empty_text", "docstring_tokens": "Remove empty utterances from a list of utterances Args : utterances : The list of utterance we are processing"}
{"idx": "cosqa-train-4468", "doc": "python fastest way to load data", "code": "def get_data(self):\n                try:\n            return DocumentDataDict(self.__dict__['data'])\n        except KeyError:\n            self._lazy_load()\n            return DocumentDataDict(self.__dict__['data'])", "method_name": "get_data", "docstring_tokens": "Fetch the data field if it does not exist ."}
{"idx": "cosqa-train-10637", "doc": "add noise to the audio python", "code": "def synthesize(self, duration):\n                sr = self.samplerate.samples_per_second\n        seconds = duration / Seconds(1)\n        samples = np.random.uniform(low=-1., high=1., size=int(sr * seconds))\n        return AudioSamples(samples, self.samplerate)", "method_name": "synthesize", "docstring_tokens": "Synthesize white noise"}
{"idx": "cosqa-train-10163", "doc": "object with commas turned into list python", "code": "def seq_to_str(obj, sep=\",\"):\n        if isinstance(obj, string_classes):\n        return obj\n    elif isinstance(obj, (list, tuple)):\n        return sep.join([str(x) for x in obj])\n    else:\n        return str(obj)", "method_name": "seq_to_str", "docstring_tokens": "Given a sequence convert it to a comma separated string . If however the argument is a single object return its string representation ."}
{"idx": "cosqa-train-9747", "doc": "python set limits on x axis", "code": "def set_xlimits(self, min=None, max=None):\n                self.limits['xmin'] = min\n        self.limits['xmax'] = max", "method_name": "set_xlimits", "docstring_tokens": "Set limits for the x - axis ."}
{"idx": "cosqa-train-7841", "doc": "is python ssl socket connection thread safe", "code": "def enable_ssl(self, *args, **kwargs):\n                if self.handshake_sent:\n            raise SSLError('can only enable SSL before handshake')\n\n        self.secure = True\n        self.sock = ssl.wrap_socket(self.sock, *args, **kwargs)", "method_name": "enable_ssl", "docstring_tokens": "Transforms the regular socket . socket to an ssl . SSLSocket for secure connections . Any arguments are passed to ssl . wrap_socket : http : // docs . python . org / dev / library / ssl . html#ssl . wrap_socket"}
{"idx": "cosqa-train-7998", "doc": "python3 encode decode bytes", "code": "def to_bytes(value):\n        vtype = type(value)\n\n    if vtype == bytes or vtype == type(None):\n        return value\n\n    try:\n        return vtype.encode(value)\n    except UnicodeEncodeError:\n        pass\n    return value", "method_name": "to_bytes", "docstring_tokens": "str to bytes ( py3k )"}
{"idx": "cosqa-train-2119", "doc": "xsd file to python object", "code": "def from_file(cls, file_path, validate=True):\n                return xmlmap.load_xmlobject_from_file(file_path, xmlclass=cls, validate=validate)", "method_name": "from_file", "docstring_tokens": "Creates a Python object from a XML file"}
{"idx": "cosqa-train-10773", "doc": "python expand a path", "code": "def expandpath(path):\n        return os.path.expandvars(os.path.expanduser(path)).replace(\"//\", \"/\")", "method_name": "expandpath", "docstring_tokens": "Expand a filesystem path that may or may not contain user / env vars ."}
{"idx": "cosqa-train-12970", "doc": "python flask template table example", "code": "def index():\n        global productpage\n\n    table = json2html.convert(json = json.dumps(productpage),\n                              table_attributes=\"class=\\\"table table-condensed table-bordered table-hover\\\"\")\n\n    return render_template('index.html', serviceTable=table)", "method_name": "index", "docstring_tokens": "Display productpage with normal user and test user buttons"}
{"idx": "cosqa-train-2983", "doc": "how to check if object defined python", "code": "def is_defined(self, objtxt, force_import=False):\n                return self.interpreter.is_defined(objtxt, force_import)", "method_name": "is_defined", "docstring_tokens": "Return True if object is defined"}
{"idx": "cosqa-train-14540", "doc": "s3 sync between bucket python", "code": "def s3(ctx, bucket_name, data_file, region):\n        if not ctx.data_file:\n        ctx.data_file = data_file\n\n    if not ctx.bucket_name:\n        ctx.bucket_name = bucket_name\n\n    if not ctx.region:\n        ctx.region = region\n\n    ctx.type = 's3'", "method_name": "s3", "docstring_tokens": "Use the S3 SWAG backend ."}
{"idx": "cosqa-train-6525", "doc": "change the position of 3d coordinate in python", "code": "def list(self):\n                return [self._pos3d.x, self._pos3d.y, self._pos3d.z]", "method_name": "list", "docstring_tokens": "position in 3d space"}
{"idx": "cosqa-train-11131", "doc": "python how to get the number of cores in a computer", "code": "def _num_cpus_darwin():\n        p = subprocess.Popen(['sysctl','-n','hw.ncpu'],stdout=subprocess.PIPE)\n    return p.stdout.read()", "method_name": "_num_cpus_darwin", "docstring_tokens": "Return the number of active CPUs on a Darwin system ."}
{"idx": "cosqa-train-4829", "doc": "python how to use pdb set trace", "code": "def set_trace():\n            pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)", "method_name": "set_trace", "docstring_tokens": "Start a Pdb instance at the calling frame with stdout routed to sys . __stdout__ ."}
{"idx": "cosqa-train-10710", "doc": "python dictionary url encode", "code": "def get_dict_to_encoded_url(data):\n        unicode_data = dict([(k, smart_str(v)) for k, v in data.items()])\n    encoded = urllib.urlencode(unicode_data)\n    return encoded", "method_name": "get_dict_to_encoded_url", "docstring_tokens": "Converts a dict to an encoded URL . Example : given data = { a : 1 b : 2 } it returns a = 1&b = 2"}
{"idx": "cosqa-train-18842", "doc": "how to check whether a string is int in python", "code": "def _isint(string):\n        return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)", "method_name": "_isint", "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"}
{"idx": "cosqa-train-16717", "doc": "python 3 change permission of file chmod", "code": "def add_exec_permission_to(target_file):\n        mode = os.stat(target_file).st_mode\n    os.chmod(target_file, mode | stat.S_IXUSR)", "method_name": "add_exec_permission_to", "docstring_tokens": "Add executable permissions to the file"}
{"idx": "cosqa-train-8829", "doc": "python gaussian filter array", "code": "def smooth_gaussian(image, sigma=1):\n        return scipy.ndimage.filters.gaussian_filter(image, sigma=sigma, mode=\"nearest\")", "method_name": "smooth_gaussian", "docstring_tokens": "Returns Gaussian smoothed image ."}
{"idx": "cosqa-train-17526", "doc": "how to cut off a calculated number to two decimals in python", "code": "def truncate(value: Decimal, n_digits: int) -> Decimal:\n        return Decimal(math.trunc(value * (10 ** n_digits))) / (10 ** n_digits)", "method_name": "truncate", "docstring_tokens": "Truncates a value to a number of decimals places"}
{"idx": "cosqa-train-14497", "doc": "replace many value at once in python", "code": "def replace_list(items, match, replacement):\n        return [replace(item, match, replacement) for item in items]", "method_name": "replace_list", "docstring_tokens": "Replaces occurrences of a match string in a given list of strings and returns a list of new strings . The match string can be a regex expression ."}
{"idx": "cosqa-train-15806", "doc": "python numpy conver to float64", "code": "def as_float_array(a):\n        return np.asarray(a, dtype=np.quaternion).view((np.double, 4))", "method_name": "as_float_array", "docstring_tokens": "View the quaternion array as an array of floats"}
{"idx": "cosqa-train-11161", "doc": "python how to rank a list object", "code": "def ranks(self, key, value):\n        return [normalize_rank(el) for el in force_list(value.get('a'))]", "method_name": "ranks", "docstring_tokens": "Populate the ranks key ."}
{"idx": "cosqa-train-7195", "doc": "how to check if file doesn't exist in python", "code": "def is_valid_file(parser, arg):\n        arg = os.path.abspath(arg)\n    if not os.path.exists(arg):\n        parser.error(\"The file %s does not exist!\" % arg)\n    else:\n        return arg", "method_name": "is_valid_file", "docstring_tokens": "Check if arg is a valid file that already exists on the file system ."}
{"idx": "cosqa-train-7384", "doc": "how to get the parent directory in python", "code": "def get_parent_dir(name):\n        parent_dir = os.path.dirname(os.path.dirname(name))\n    if parent_dir:\n        return parent_dir\n    return os.path.abspath('.')", "method_name": "get_parent_dir", "docstring_tokens": "Get the parent directory of a filename ."}
{"idx": "cosqa-train-8125", "doc": "resize an image python pil", "code": "def resize(self, size):\n                return Image(self.pil_image.resize(size, PIL.Image.ANTIALIAS))", "method_name": "resize", "docstring_tokens": "Return a new Image instance with the given size ."}
{"idx": "cosqa-train-8244", "doc": "python boxplot data frame", "code": "def compute_boxplot(self, series):\n                from matplotlib.cbook import boxplot_stats\n        series = series[series.notnull()]\n        if len(series.values) == 0:\n            return {}\n        elif not is_numeric_dtype(series):\n            return self.non_numeric_stats(series)\n        stats = boxplot_stats(list(series.values))[0]\n        stats['count'] = len(series.values)\n        stats['fliers'] = \"|\".join(map(str, stats['fliers']))\n        return stats", "method_name": "compute_boxplot", "docstring_tokens": "Compute boxplot for given pandas Series ."}
{"idx": "cosqa-train-11056", "doc": "python glpk read from lp file", "code": "def glpk_read_cplex(path):\n        from swiglpk import glp_create_prob, glp_read_lp\n\n    problem = glp_create_prob()\n    glp_read_lp(problem, None, path)\n    return problem", "method_name": "glpk_read_cplex", "docstring_tokens": "Reads cplex file and returns glpk problem ."}
{"idx": "cosqa-train-12080", "doc": "python threadpool close join", "code": "def join(self):\n\t\tself.inputfeeder_thread.join()\n\t\tself.pool.join()\n\t\tself.resulttracker_thread.join()\n\t\tself.failuretracker_thread.join()", "method_name": "join", "docstring_tokens": "Note that the Executor must be close () d elsewhere or join () will never return ."}
{"idx": "cosqa-train-11940", "doc": "python sklearn onehotencoder string values", "code": "def one_hot2string(arr, vocab):\n        tokens = one_hot2token(arr)\n    indexToLetter = _get_index_dict(vocab)\n\n    return [''.join([indexToLetter[x] for x in row]) for row in tokens]", "method_name": "one_hot2string", "docstring_tokens": "Convert a one - hot encoded array back to string"}
{"idx": "cosqa-train-19085", "doc": "python change to bytes", "code": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"      if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')", "method_name": "to_bytes", "docstring_tokens": "Convert anything to a bytearray . See - http : // stackoverflow . com / questions / 7585435 / best - way - to - convert - string - to - bytes - in - python - 3 - http : // stackoverflow . com / questions / 10459067 / how - to - convert - my - bytearrayb - x9e - x18k - x9a - to - something - like - this - x9e - x1"}
{"idx": "cosqa-train-7005", "doc": "python json loads try", "code": "def json(body, charset='utf-8', **kwargs):\n        return json_converter.loads(text(body, charset=charset))", "method_name": "json", "docstring_tokens": "Takes JSON formatted data converting it into native Python objects"}
{"idx": "cosqa-train-6677", "doc": "create an empty column in data frame python", "code": "def add_blank_row(self, label):\n                col_labels = self.df.columns\n        blank_item = pd.Series({}, index=col_labels, name=label)\n                self.df.loc[blank_item.name] = blank_item\n        return self.df", "method_name": "add_blank_row", "docstring_tokens": "Add a blank row with only an index value to self . df . This is done inplace ."}
{"idx": "cosqa-train-5971", "doc": "remove whitespace at end of line in python", "code": "def clean(s):\n    lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)", "method_name": "clean", "docstring_tokens": "Removes trailing whitespace on each line ."}
{"idx": "cosqa-train-12933", "doc": "python file opening modes", "code": "def open_file(file, mode):\n\tif hasattr(file, \"read\"):\n\t\treturn file\n\tif hasattr(file, \"open\"):\n\t\treturn file.open(mode)\n\treturn open(file, mode)", "method_name": "open_file", "docstring_tokens": "Open a file ."}
{"idx": "cosqa-train-8432", "doc": "python code input prompt for questions", "code": "def string_input(prompt=''):\n        v = sys.version[0]\n    if v == '3':\n        return input(prompt)\n    else:\n        return raw_input(prompt)", "method_name": "string_input", "docstring_tokens": "Python 3 input () / Python 2 raw_input ()"}
{"idx": "cosqa-train-9433", "doc": "python parse a log file that is logging", "code": "def parse(self):\n                f = open(self.parse_log_path, \"r\")\n        self.parse2(f)\n        f.close()", "method_name": "parse", "docstring_tokens": "Parse file specified by constructor ."}
{"idx": "cosqa-train-19595", "doc": "remove an entry from a dict python", "code": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None:\n        for d in dict_list:\n        d.pop(key, None)", "method_name": "dictlist_wipe_key", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d delete d [ key ] if it exists ."}
{"idx": "cosqa-train-7984", "doc": "new line statemnt pythong write", "code": "def write_line(self, line, count=1):\n                self.write(line)\n        self.write_newlines(count)", "method_name": "write_line", "docstring_tokens": "writes the line and count newlines after the line"}
{"idx": "cosqa-train-5792", "doc": "python view as series column format string", "code": "def format(x, format):\n            sl = vaex.strings.format(x, format)\n    return column.ColumnStringArrow(sl.bytes, sl.indices, sl.length, sl.offset, string_sequence=sl)", "method_name": "format", "docstring_tokens": "Uses http : // www . cplusplus . com / reference / string / to_string / for formatting"}
{"idx": "cosqa-train-7598", "doc": "python select not null column values", "code": "def selectnotnone(table, field, complement=False):\n        return select(table, field, lambda v: v is not None,\n                  complement=complement)", "method_name": "selectnotnone", "docstring_tokens": "Select rows where the given field is not None ."}
{"idx": "cosqa-train-11238", "doc": "how do functions in python know the parametr type", "code": "def is_symbol(string):\n        return (\n        is_int(string) or is_float(string) or\n        is_constant(string) or is_unary(string) or\n        is_binary(string) or\n        (string == '(') or (string == ')')\n    )", "method_name": "is_symbol", "docstring_tokens": "Return true if the string is a mathematical symbol ."}
{"idx": "cosqa-train-13050", "doc": "cursor positioning python windows", "code": "def ensure_hbounds(self):\n                self.cursor.x = min(max(0, self.cursor.x), self.columns - 1)", "method_name": "ensure_hbounds", "docstring_tokens": "Ensure the cursor is within horizontal screen bounds ."}
{"idx": "cosqa-train-11103", "doc": "python how to equally space points in an ellipse", "code": "def create_ellipse(width,height,angle):\n        angle = angle / 180.0 * np.pi\n    thetas = np.linspace(0,2*np.pi,200)\n    a = width / 2.0\n    b = height / 2.0\n\n    x = a*np.cos(thetas)*np.cos(angle) - b*np.sin(thetas)*np.sin(angle)\n    y = a*np.cos(thetas)*np.sin(angle) + b*np.sin(thetas)*np.cos(angle)\n    z = np.zeros(thetas.shape)\n    return np.vstack((x,y,z)).T", "method_name": "create_ellipse", "docstring_tokens": "Create parametric ellipse from 200 points ."}
{"idx": "cosqa-train-9780", "doc": "how to see how similar two images are in python", "code": "def _sim_fill(r1, r2, imsize):\n        bbsize = (\n        (max(r1[\"max_x\"], r2[\"max_x\"]) - min(r1[\"min_x\"], r2[\"min_x\"]))\n        * (max(r1[\"max_y\"], r2[\"max_y\"]) - min(r1[\"min_y\"], r2[\"min_y\"]))\n    )\n    return 1.0 - (bbsize - r1[\"size\"] - r2[\"size\"]) / imsize", "method_name": "_sim_fill", "docstring_tokens": "calculate the fill similarity over the image"}
{"idx": "cosqa-train-9562", "doc": "how to make a input to have no spaces in python\\", "code": "def pass_from_pipe(cls):\n                is_pipe = not sys.stdin.isatty()\n        return is_pipe and cls.strip_last_newline(sys.stdin.read())", "method_name": "pass_from_pipe", "docstring_tokens": "Return password from pipe if not on TTY else False ."}
{"idx": "cosqa-train-14356", "doc": "next line to read in python", "code": "def __next__(self):\n                        row = super(UnicodeReaderWithLineNumber, self).__next__()\n        return self.lineno + 1, row", "method_name": "__next__", "docstring_tokens": ""}
{"idx": "cosqa-train-14340", "doc": "move an item in list to front python", "code": "def list_move_to_front(l,value='other'):\n        l=list(l)\n    if value in l:\n        l.remove(value)\n        l.insert(0,value)\n    return l", "method_name": "list_move_to_front", "docstring_tokens": "if the value is in the list move it to the front and return it ."}
{"idx": "cosqa-train-10077", "doc": "python wrap (s,w) print", "code": "def _wrap(text, columns=80):\n        out = []\n    for cnt, char in enumerate(text):\n        out.append(char)\n\n        if (cnt + 1) % columns == 0:\n            out.append(\"\\n\")\n\n    return \"\".join(out)", "method_name": "_wrap", "docstring_tokens": "Own dumb reimplementation of textwrap . wrap () ."}
{"idx": "cosqa-train-18137", "doc": "how to check if missing values are blanks or nan or none in python", "code": "def warn_if_nans_exist(X):\n        null_count = count_rows_with_nans(X)\n    total = len(X)\n    percent = 100 * null_count / total\n\n    if null_count > 0:\n        warning_message = \\\n            'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' \\\n            'complete rows will be plotted.'.format(null_count, total, percent)\n        warnings.warn(warning_message, DataWarning)", "method_name": "warn_if_nans_exist", "docstring_tokens": "Warn if nans exist in a numpy array ."}
{"idx": "cosqa-train-12117", "doc": "python to get the indices of bin edges", "code": "def val_to_bin(edges, x):\n        ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin", "method_name": "val_to_bin", "docstring_tokens": "Convert axis coordinate to bin index ."}
{"idx": "cosqa-train-10587", "doc": "python comma separated value", "code": "def list_to_csv(value):\n        if isinstance(value, (list, tuple, set)):\n        value = \",\".join(value)\n    return value", "method_name": "list_to_csv", "docstring_tokens": "Converts list to string with comma separated values . For string is no - op ."}
{"idx": "cosqa-train-13897", "doc": "python requests disable ssl certificate verification", "code": "def disable_insecure_request_warning():\n        import requests\n    from requests.packages.urllib3.exceptions import InsecureRequestWarning\n    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)", "method_name": "disable_insecure_request_warning", "docstring_tokens": "Suppress warning about untrusted SSL certificate ."}
{"idx": "cosqa-train-7918", "doc": "python var and distribution of probability", "code": "def pdf(x, mu, std):\n        return (1.0 / (std * sqrt(2 * pi))) * np.exp(-(x - mu) ** 2 / (2 * std ** 2))", "method_name": "pdf", "docstring_tokens": "Probability density function ( normal distribution )"}
{"idx": "cosqa-dev-269", "doc": "how to determine it's a orthogonal matrix using python", "code": "def is_orthogonal(\n        matrix: np.ndarray,\n        *,\n        rtol: float = 1e-5,\n        atol: float = 1e-8) -> bool:\n        return (matrix.shape[0] == matrix.shape[1] and\n            np.all(np.imag(matrix) == 0) and\n            np.allclose(matrix.dot(matrix.T), np.eye(matrix.shape[0]),\n                        rtol=rtol,\n                        atol=atol))", "method_name": "is_orthogonal", "docstring_tokens": "Determines if a matrix is approximately orthogonal ."}
{"idx": "cosqa-train-10422", "doc": "strip html tags in python", "code": "def do_striptags(value):\n        if hasattr(value, '__html__'):\n        value = value.__html__()\n    return Markup(unicode(value)).striptags()", "method_name": "do_striptags", "docstring_tokens": "Strip SGML / XML tags and replace adjacent whitespace by one space ."}
{"idx": "cosqa-train-12879", "doc": "center align python text", "code": "def center_text(text, width=80):\n        centered = []\n    for line in text.splitlines():\n        centered.append(line.center(width))\n    return \"\\n\".join(centered)", "method_name": "center_text", "docstring_tokens": "Center all lines of the text . It is assumed that all lines width is smaller then B { width } because the line width will not be checked . Args : text ( str ) : Text to wrap . width ( int ) : Maximum number of characters per line . Returns : str : Centered text ."}
{"idx": "cosqa-train-2468", "doc": "python get list of keys on an object", "code": "def get_keys_from_class(cc):\n        return [prop.name for prop in cc.properties.values() \\\n            if 'key' in prop.qualifiers]", "method_name": "get_keys_from_class", "docstring_tokens": "Return list of the key property names for a class"}
{"idx": "cosqa-train-9972", "doc": "is there any python function to check for nan valu", "code": "def reduce_fn(x):\n        values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN", "method_name": "reduce_fn", "docstring_tokens": "Aggregation function to get the first non - zero value ."}
{"idx": "cosqa-train-13065", "doc": "python get cookie for request", "code": "def parse_cookies(self, req, name, field):\n                return core.get_value(req.COOKIES, name, field)", "method_name": "parse_cookies", "docstring_tokens": "Pull the value from the cookiejar ."}
{"idx": "cosqa-train-13388", "doc": "python is list no na", "code": "def is_listish(obj):\n        if isinstance(obj, (list, tuple, set)):\n        return True\n    return is_sequence(obj)", "method_name": "is_listish", "docstring_tokens": "Check if something quacks like a list ."}
{"idx": "cosqa-train-15046", "doc": "python determine if a file is image", "code": "def is_image(filename):\n            return os.path.isfile(filename) and filename.lower().endswith(ImageExts)", "method_name": "is_image", "docstring_tokens": "Determine if given filename is an image ."}
{"idx": "cosqa-train-11796", "doc": "python reorganise a data frame", "code": "def _preprocess(df):\n        df = df.stack()\n\n    df.index.rename([\"id\", \"time\"], inplace=True)      df.name = \"value\"\n    df = df.reset_index()\n\n    return df", "method_name": "_preprocess", "docstring_tokens": "given a DataFrame where records are stored row - wise rearrange it such that records are stored column - wise ."}
{"idx": "cosqa-train-12282", "doc": "read first line in txt file in python", "code": "def getfirstline(file, default):\n        with open(file, 'rb') as fh:\n        content = fh.readlines()\n        if len(content) == 1:\n            return content[0].decode('utf-8').strip('\\n')\n\n    return default", "method_name": "getfirstline", "docstring_tokens": "Returns the first line of a file ."}
{"idx": "cosqa-train-16638", "doc": "pass defined parser object to subparser python", "code": "def sub(name, func,**kwarg):\n        sp = subparsers.add_parser(name, **kwarg)\n    sp.set_defaults(func=func)\n    sp.arg = sp.add_argument\n    return sp", "method_name": "sub", "docstring_tokens": "Add subparser"}
{"idx": "cosqa-train-7552", "doc": "how to print generic error in python", "code": "def print_err(*args, end='\\n'):\n        print(*args, end=end, file=sys.stderr)\n    sys.stderr.flush()", "method_name": "print_err", "docstring_tokens": "Similar to print but prints to stderr ."}
{"idx": "cosqa-train-14625", "doc": "python change the name of a key", "code": "def unit_key_from_name(name):\n    result = name\n\n  for old, new in six.iteritems(UNIT_KEY_REPLACEMENTS):\n    result = result.replace(old, new)\n\n    result = re.sub(r'_+', '_', result.upper())\n\n  return result", "method_name": "unit_key_from_name", "docstring_tokens": "Return a legal python name for the given name for use as a unit key ."}
{"idx": "cosqa-train-12190", "doc": "moving mouse python click", "code": "def mouse_move_event(self, event):\n                self.example.mouse_position_event(event.x(), event.y())", "method_name": "mouse_move_event", "docstring_tokens": "Forward mouse cursor position events to the example"}
{"idx": "cosqa-train-14209", "doc": "python to determine if services are running", "code": "def service_available(service_name):\n        try:\n        subprocess.check_output(\n            ['service', service_name, 'status'],\n            stderr=subprocess.STDOUT).decode('UTF-8')\n    except subprocess.CalledProcessError as e:\n        return b'unrecognized service' not in e.output\n    else:\n        return True", "method_name": "service_available", "docstring_tokens": "Determine whether a system service is available"}
{"idx": "cosqa-train-18231", "doc": "python set contains multiple items", "code": "def issuperset(self, items):\n                return all(_compat.map(self._seen.__contains__, items))", "method_name": "issuperset", "docstring_tokens": "Return whether this collection contains all items ."}
{"idx": "cosqa-train-17616", "doc": "python protobyf parse from byte", "code": "def decode(self, bytes, raw=False):\n                return struct.unpack(self.format, buffer(bytes))[0]", "method_name": "decode", "docstring_tokens": "decode ( bytearray raw = False ) - > value"}
{"idx": "cosqa-train-2007", "doc": "python check if a directory is writable", "code": "def _writable_dir(path):\n        return os.path.isdir(path) and os.access(path, os.W_OK)", "method_name": "_writable_dir", "docstring_tokens": "Whether path is a directory to which the user has write access ."}
{"idx": "cosqa-train-16594", "doc": "object as list python", "code": "def as_list(self):\n                return [self.name, self.value, [x.as_list for x in self.children]]", "method_name": "as_list", "docstring_tokens": "Return all child objects in nested lists of strings ."}
{"idx": "cosqa-dev-486", "doc": "replace function nan python", "code": "def _replace_nan(a, val):\n        mask = isnull(a)\n    return where_method(val, mask, a), mask", "method_name": "_replace_nan", "docstring_tokens": "replace nan in a by val and returns the replaced array and the nan position"}
{"idx": "cosqa-train-19425", "doc": "python hash table check if key exist", "code": "def check_key(self, key: str) -> bool:\n                keys = self.get_keys()\n        return key in keys", "method_name": "check_key", "docstring_tokens": "Checks if key exists in datastore . True if yes False if no ."}
{"idx": "cosqa-train-14671", "doc": "take all points in box python", "code": "def point8_to_box(points):\n        p = points.reshape((-1, 4, 2))\n    minxy = p.min(axis=1)       maxxy = p.max(axis=1)       return np.concatenate((minxy, maxxy), axis=1)", "method_name": "point8_to_box", "docstring_tokens": "Args : points : ( nx4 ) x2 Returns : nx4 boxes ( x1y1x2y2 )"}
{"idx": "cosqa-train-14950", "doc": "python create enum by name", "code": "def get_enum_from_name(self, enum_name):\n                return next((e for e in self.enums if e.name == enum_name), None)", "method_name": "get_enum_from_name", "docstring_tokens": "Return an enum from a name Args : enum_name ( str ) : name of the enum Returns : Enum"}
{"idx": "cosqa-train-11399", "doc": "python matplotlib use arrow markers", "code": "def add_arrow(self, x1, y1, x2, y2, **kws):\n                self.panel.add_arrow(x1, y1, x2, y2, **kws)", "method_name": "add_arrow", "docstring_tokens": "add arrow to plot"}
{"idx": "cosqa-train-8819", "doc": "python function default args", "code": "def get_default_args(func):\n        args, varargs, keywords, defaults = getargspec_no_self(func)\n    return dict(zip(args[-len(defaults):], defaults))", "method_name": "get_default_args", "docstring_tokens": "returns a dictionary of arg_name : default_values for the input function"}
{"idx": "cosqa-train-19364", "doc": "python how to select first 100 rows", "code": "def genfirstvalues(cursor: Cursor, arraysize: int = 1000) \\\n        -> Generator[Any, None, None]:\n        return (row[0] for row in genrows(cursor, arraysize))", "method_name": "genfirstvalues", "docstring_tokens": "Generate the first value in each row ."}
{"idx": "cosqa-train-17740", "doc": "removing columnsns in data frame python", "code": "def clean_column_names(df: DataFrame) -> DataFrame:\n        f = df.copy()\n    f.columns = [col.strip() for col in f.columns]\n    return f", "method_name": "clean_column_names", "docstring_tokens": "Strip the whitespace from all column names in the given DataFrame and return the result ."}
{"idx": "cosqa-train-19654", "doc": "python array to torch tensor", "code": "def astensor(array: TensorLike) -> BKTensor:\n        tensor = tf.convert_to_tensor(value=array, dtype=CTYPE)\n    return tensor", "method_name": "astensor", "docstring_tokens": "Covert numpy array to tensorflow tensor"}
{"idx": "cosqa-dev-116", "doc": "how to turn a list into a csv python", "code": "def list_to_csv(value):\n        if isinstance(value, (list, tuple, set)):\n        value = \",\".join(value)\n    return value", "method_name": "list_to_csv", "docstring_tokens": "Converts list to string with comma separated values . For string is no - op ."}
{"idx": "cosqa-train-13423", "doc": "how do i unzip file in python", "code": "def _unzip_handle(handle):\n        if isinstance(handle, basestring):\n        handle = _gzip_open_filename(handle)\n    else:\n        handle = _gzip_open_handle(handle)\n    return handle", "method_name": "_unzip_handle", "docstring_tokens": "Transparently unzip the file handle"}
=======
<<<<<<< HEAD
{"idx": "cosqa-train-12467", "doc": "sort by a token in string python", "code": "def _process_and_sort(s, force_ascii, full_process=True):\n            ts = utils.full_process(s, force_ascii=force_ascii) if full_process else s\n    tokens = ts.split()\n\n        sorted_string = u\" \".join(sorted(tokens))\n    return sorted_string.strip()", "method_name": "_process_and_sort", "docstring_tokens": "Return a cleaned string with token sorted ."}
{"idx": "cosqa-train-14641", "doc": "python check file is readonly", "code": "def is_readable(filename):\n        return os.path.isfile(filename) and os.access(filename, os.R_OK)", "method_name": "is_readable", "docstring_tokens": "Check if file is a regular file and is readable ."}
{"idx": "cosqa-train-13074", "doc": "declaring empty numpy array in python", "code": "def empty(self, name, **kwargs):\n                return self._write_op(self._empty_nosync, name, **kwargs)", "method_name": "empty", "docstring_tokens": "Create an array . Keyword arguments as per : func : zarr . creation . empty ."}
{"idx": "cosqa-train-14677", "doc": "test for iterable is string in python", "code": "def is_iterable_but_not_string(obj):\n        return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)", "method_name": "is_iterable_but_not_string", "docstring_tokens": "Determine whether or not obj is iterable but not a string ( eg a list set tuple etc ) ."}
{"idx": "cosqa-train-9500", "doc": "python print results of query loop", "code": "def print_runs(query):\n        if query is None:\n        return\n\n    for tup in query:\n        print((\"{0} @ {1} - {2} id: {3} group: {4}\".format(\n            tup.end, tup.experiment_name, tup.project_name,\n            tup.experiment_group, tup.run_group)))", "method_name": "print_runs", "docstring_tokens": "Print all rows in this result query ."}
{"idx": "cosqa-train-1335", "doc": "how to save header of fits file to export python", "code": "def write_fits(self, fitsfile):\n                tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)", "method_name": "write_fits", "docstring_tokens": "Write the ROI model to a FITS file ."}
{"idx": "cosqa-train-19221", "doc": "python calc page align", "code": "def page_align_content_length(length):\n            mod = length % _PAGEBLOB_BOUNDARY\n    if mod != 0:\n        return length + (_PAGEBLOB_BOUNDARY - mod)\n    return length", "method_name": "page_align_content_length", "docstring_tokens": "Compute page boundary alignment : param int length : content length : rtype : int : return : aligned byte boundary"}
{"idx": "cosqa-train-971", "doc": "python numpy array as float", "code": "def as_float_array(a):\n        return np.asarray(a, dtype=np.quaternion).view((np.double, 4))", "method_name": "as_float_array", "docstring_tokens": "View the quaternion array as an array of floats"}
{"idx": "cosqa-train-18162", "doc": "input string that replaces occurences python", "code": "def __replace_all(repls: dict, input: str) -> str:\n        return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)", "method_name": "__replace_all", "docstring_tokens": "Replaces from a string ** input ** all the occurrences of some symbols according to mapping ** repls ** ."}
{"idx": "cosqa-train-14635", "doc": "python check all items in list are ints", "code": "def is_iterable_of_int(l):\n    r    if not is_iterable(l):\n        return False\n\n    return all(is_int(value) for value in l)", "method_name": "is_iterable_of_int", "docstring_tokens": "r Checks if l is iterable and contains only integral types"}
{"idx": "cosqa-train-9770", "doc": "how to save variable to text file python", "code": "def save(variable, filename):\n        fileObj = open(filename, 'wb')\n    pickle.dump(variable, fileObj)\n    fileObj.close()", "method_name": "save", "docstring_tokens": "Save variable on given path using Pickle Args : variable : what to save path ( str ) : path of the output"}
{"idx": "cosqa-train-11848", "doc": "how to skip an index in a for loop python", "code": "def stop_at(iterable, idx):\n        for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item", "method_name": "stop_at", "docstring_tokens": "Stops iterating before yielding the specified idx ."}
{"idx": "cosqa-train-13623", "doc": "how to create a tokenization code in python", "code": "def token(name):\n        def wrap(f):\n        tokenizers.append((name, f))\n        return f\n\n    return wrap", "method_name": "token", "docstring_tokens": "Marker for a token"}
{"idx": "cosqa-train-19558", "doc": "python raise without parentheses", "code": "def assert_or_raise(stmt: bool, exception: Exception,\n                    *exception_args, **exception_kwargs) -> None:\n    if not stmt:\n    raise exception(*exception_args, **exception_kwargs)", "method_name": "assert_or_raise", "docstring_tokens": "If the statement is false raise the given exception ."}
{"idx": "cosqa-train-7659", "doc": "how to seperate list with commas python", "code": "def _return_comma_list(self, l):\n                if isinstance(l, (text_type, int)):\n            return l\n\n        if not isinstance(l, list):\n            raise TypeError(l, ' should be a list of integers, \\\nnot {0}'.format(type(l)))\n\n        str_ids = ','.join(str(i) for i in l)\n\n        return str_ids", "method_name": "_return_comma_list", "docstring_tokens": "get a list and return a string with comma separated list values Examples [ to ta ] will return to ta ."}
{"idx": "cosqa-train-6056", "doc": "python asynchronous function call return", "code": "def asynchronous(function, event):\n        thread = Thread(target=synchronous, args=(function, event))\n    thread.daemon = True\n    thread.start()", "method_name": "asynchronous", "docstring_tokens": "Runs the function asynchronously taking care of exceptions ."}
{"idx": "cosqa-train-11671", "doc": "how to make a seconds to time in python", "code": "def time2seconds(t):\n        return t.hour * 3600 + t.minute * 60 + t.second + float(t.microsecond) / 1e6", "method_name": "time2seconds", "docstring_tokens": "Returns seconds since 0h00 ."}
{"idx": "cosqa-train-14597", "doc": "python cast true or false as numbers", "code": "def _to_numeric(val):\n        if isinstance(val, (int, float, datetime.datetime, datetime.timedelta)):\n        return val\n    return float(val)", "method_name": "_to_numeric", "docstring_tokens": "Helper function for conversion of various data types into numeric representation ."}
{"idx": "cosqa-train-2166", "doc": "add milliseconds to datetime python", "code": "def datetime_to_ms(dt):\n        seconds = calendar.timegm(dt.utctimetuple())\n    return seconds * 1000 + int(dt.microsecond / 1000)", "method_name": "datetime_to_ms", "docstring_tokens": "Converts a datetime to a millisecond accuracy timestamp"}
{"idx": "cosqa-train-7579", "doc": "how to read the last n lines of a program on python", "code": "def get_readline_tail(self, n=10):\n                end = self.shell.readline.get_current_history_length() + 1\n        start = max(end-n, 1)\n        ghi = self.shell.readline.get_history_item\n        return [ghi(x) for x in range(start, end)]", "method_name": "get_readline_tail", "docstring_tokens": "Get the last n items in readline history ."}
{"idx": "cosqa-train-11454", "doc": "python mysql get list of table columns", "code": "def get_table_columns(dbconn, tablename):\n        cur = dbconn.cursor()\n    cur.execute(\"PRAGMA table_info('%s');\" % tablename)\n    info = cur.fetchall()\n    cols = [(i[1], i[2]) for i in info]\n    return cols", "method_name": "get_table_columns", "docstring_tokens": "Return a list of tuples specifying the column name and type"}
{"idx": "cosqa-train-17712", "doc": "how to get domain part of a url in python", "code": "def url_host(url: str) -> str:\n        from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''", "method_name": "url_host", "docstring_tokens": "Parses hostname from URL . : param url : URL : return : hostname"}
{"idx": "cosqa-train-18531", "doc": "python flatten a nested dictionaary", "code": "def flatten_multidict(multidict):\n        return dict([(key, value if len(value) > 1 else value[0])\n                 for (key, value) in multidict.iterlists()])", "method_name": "flatten_multidict", "docstring_tokens": "Return flattened dictionary from MultiDict ."}
{"idx": "cosqa-train-3393", "doc": "python session set get", "code": "def _session_set(self, key, value):\n                self.session[self._session_key(key)] = value", "method_name": "_session_set", "docstring_tokens": "Saves a value to session ."}
{"idx": "cosqa-dev-5", "doc": "python save graph into file", "code": "def to_dotfile(G: nx.DiGraph, filename: str):\n        A = to_agraph(G)\n    A.write(filename)", "method_name": "to_dotfile", "docstring_tokens": "Output a networkx graph to a DOT file ."}
{"idx": "cosqa-train-10817", "doc": "chmod python windows to remove file", "code": "def rmfile(path):\n        if osp.isfile(path):\n        if is_win:\n            os.chmod(path, 0o777)\n        os.remove(path)", "method_name": "rmfile", "docstring_tokens": "Ensure file deleted also on * Windows * where read - only files need special treatment ."}
{"idx": "cosqa-train-6390", "doc": "add suffixes on concat python", "code": "def add_suffix(fullname, suffix):\n        name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext", "method_name": "add_suffix", "docstring_tokens": "Add suffix to a full file name"}
{"idx": "cosqa-train-11396", "doc": "how to check python object iterable", "code": "def is_iterable_but_not_string(obj):\n        return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)", "method_name": "is_iterable_but_not_string", "docstring_tokens": "Determine whether or not obj is iterable but not a string ( eg a list set tuple etc ) ."}
{"idx": "cosqa-train-8122", "doc": "python 3 tkinter open file dialog", "code": "def askopenfilename(**kwargs):\n        try:\n        from Tkinter import Tk\n        import tkFileDialog as filedialog\n    except ImportError:\n        from tkinter import Tk, filedialog\n    root = Tk()\n    root.withdraw()\n    root.update()\n    filenames = filedialog.askopenfilename(**kwargs)\n    root.destroy()\n    return filenames", "method_name": "askopenfilename", "docstring_tokens": "Return file name ( s ) from Tkinter s file open dialog ."}
{"idx": "cosqa-train-11614", "doc": "how to indent self python", "code": "def _pad(self):\n        if self._indent:\n      self.whitespace(self._indent * len(self._open_elements))", "method_name": "_pad", "docstring_tokens": "Pads the output with an amount of indentation appropriate for the number of open element ."}
{"idx": "cosqa-train-10474", "doc": "tracking centroid of an object python", "code": "def compute_centroid(points):\n        lats = [p[1] for p in points]\n    lons = [p[0] for p in points]\n    return Point(np.mean(lats), np.mean(lons), None)", "method_name": "compute_centroid", "docstring_tokens": "Computes the centroid of set of points"}
{"idx": "cosqa-train-10122", "doc": "python3 ctypes return float array", "code": "def cfloat32_array_to_numpy(cptr, length):\n        if isinstance(cptr, ctypes.POINTER(ctypes.c_float)):\n        return np.fromiter(cptr, dtype=np.float32, count=length)\n    else:\n        raise RuntimeError('Expected float pointer')", "method_name": "cfloat32_array_to_numpy", "docstring_tokens": "Convert a ctypes float pointer array to a numpy array ."}
{"idx": "cosqa-train-13872", "doc": "how to make paragraphs in python", "code": "def paragraph(separator='\\n\\n', wrap_start='', wrap_end='',\n              html=False, sentences_quantity=3):\n        return paragraphs(quantity=1, separator=separator, wrap_start=wrap_start,\n                      wrap_end=wrap_end, html=html,\n                      sentences_quantity=sentences_quantity)", "method_name": "paragraph", "docstring_tokens": "Return a random paragraph ."}
{"idx": "cosqa-train-17177", "doc": "python rest requests delete", "code": "def delete(self, endpoint: str, **kwargs) -> dict:\n                return self._request('DELETE', endpoint, **kwargs)", "method_name": "delete", "docstring_tokens": "HTTP DELETE operation to API endpoint ."}
{"idx": "cosqa-train-5418", "doc": "python replace month number", "code": "def replace_month_abbr_with_num(date_str, lang=DEFAULT_DATE_LANG):\n        num, abbr = get_month_from_date_str(date_str, lang)\n    return re.sub(abbr, str(num), date_str, flags=re.IGNORECASE)", "method_name": "replace_month_abbr_with_num", "docstring_tokens": "Replace month strings occurrences with month number ."}
{"idx": "cosqa-train-9873", "doc": "how to tell what type of data object is in python", "code": "def is_integer(obj):\n        if PYTHON3:\n        return isinstance(obj, int)\n    return isinstance(obj, (int, long))", "method_name": "is_integer", "docstring_tokens": "Is this an integer ."}
{"idx": "cosqa-train-13440", "doc": "python jsonschema validate schema file", "code": "def _validate(data, schema, ac_schema_safe=True, **options):\n        try:\n        jsonschema.validate(data, schema, **options)\n\n    except (jsonschema.ValidationError, jsonschema.SchemaError,\n            Exception) as exc:\n        if ac_schema_safe:\n            return (False, str(exc))          raise\n\n    return (True, '')", "method_name": "_validate", "docstring_tokens": "See the descritpion of : func : validate for more details of parameters and return value ."}
{"idx": "cosqa-train-18685", "doc": "get wechat access token python", "code": "def access_token(self):\n                access_token = self.session.get(self.access_token_key)\n        if access_token:\n            if not self.expires_at:\n                                return access_token\n\n            timestamp = time.time()\n            if self.expires_at - timestamp > 60:\n                return access_token\n\n        self.fetch_access_token()\n        return self.session.get(self.access_token_key)", "method_name": "access_token", "docstring_tokens": "WeChat access token"}
{"idx": "cosqa-train-12523", "doc": "python change str value to int", "code": "def str2int(num, radix=10, alphabet=BASE85):\n        return NumConv(radix, alphabet).str2int(num)", "method_name": "str2int", "docstring_tokens": "helper function for quick base conversions from strings to integers"}
{"idx": "cosqa-train-7800", "doc": "implementing drag and drop python", "code": "def drag_and_drop(self, droppable):\n                self.scroll_to()\n        ActionChains(self.parent.driver).drag_and_drop(self._element, droppable._element).perform()", "method_name": "drag_and_drop", "docstring_tokens": "Performs drag a element to another elmenet ."}
{"idx": "cosqa-train-9131", "doc": "get unique list from two lists python", "code": "def unique_list(lst):\n        uniq = []\n    for item in lst:\n        if item not in uniq:\n            uniq.append(item)\n    return uniq", "method_name": "unique_list", "docstring_tokens": "Make a list unique retaining order of initial appearance ."}
{"idx": "cosqa-train-5981", "doc": "python 3 not runnning in git bash", "code": "def check_git():\n        try:\n        with open(os.devnull, \"wb\") as devnull:\n            subprocess.check_call([\"git\", \"--version\"], stdout=devnull, stderr=devnull)\n    except:\n        raise RuntimeError(\"Please make sure git is installed and on your path.\")", "method_name": "check_git", "docstring_tokens": "Check if git command is available ."}
{"idx": "cosqa-train-15181", "doc": "create unknown number of names to print in python", "code": "def prt_nts(data_nts, prtfmt=None, prt=sys.stdout, nt_fields=None, **kws):\n        prt_txt(prt, data_nts, prtfmt, nt_fields, **kws)", "method_name": "prt_nts", "docstring_tokens": "Print list of namedtuples into a table using prtfmt ."}
{"idx": "cosqa-train-13426", "doc": "python json if element exists", "code": "def task_property_present_predicate(service, task, prop):\n        try:\n        response = get_service_task(service, task)\n    except Exception as e:\n        pass\n\n    return (response is not None) and (prop in response)", "method_name": "task_property_present_predicate", "docstring_tokens": "True if the json_element passed is present for the task specified ."}
{"idx": "cosqa-train-16586", "doc": "number of unique values in list python", "code": "def count_list(the_list):\n        count = the_list.count\n    result = [(item, count(item)) for item in set(the_list)]\n    result.sort()\n    return result", "method_name": "count_list", "docstring_tokens": "Generates a count of the number of times each unique item appears in a list"}
{"idx": "cosqa-train-13950", "doc": "how to randomize items in a list in python", "code": "def get_randomized_guid_sample(self, item_count):\n                dataset = self.get_whitelist()\n        random.shuffle(dataset)\n        return dataset[:item_count]", "method_name": "get_randomized_guid_sample", "docstring_tokens": "Fetch a subset of randomzied GUIDs from the whitelist"}
{"idx": "cosqa-train-19258", "doc": "python windows check for keypress", "code": "def _kbhit_unix() -> bool:\n        dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []", "method_name": "_kbhit_unix", "docstring_tokens": "Under UNIX : is a keystroke available?"}
{"idx": "cosqa-train-14549", "doc": "python bind scrollbar to canvas", "code": "def set_scrollregion(self, event=None):\n                self.canvas.configure(scrollregion=self.canvas.bbox('all'))", "method_name": "set_scrollregion", "docstring_tokens": "Set the scroll region on the canvas"}
{"idx": "cosqa-train-13999", "doc": "python setlevel how to only record error", "code": "def print_fatal_results(results, level=0):\n        print_level(logger.critical, _RED + \"[X] Fatal Error: %s\", level, results.error)", "method_name": "print_fatal_results", "docstring_tokens": "Print fatal errors that occurred during validation runs ."}
{"idx": "cosqa-dev-442", "doc": "format string with *args python", "code": "def safe_format(s, **kwargs):\n    return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))", "method_name": "safe_format", "docstring_tokens": ": type s str"}
{"idx": "cosqa-train-17869", "doc": "python get hostip from url", "code": "def url_host(url: str) -> str:\n        from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''", "method_name": "url_host", "docstring_tokens": "Parses hostname from URL . : param url : URL : return : hostname"}
{"idx": "cosqa-train-11505", "doc": "python numpy masked vailding", "code": "def asMaskedArray(self):\n                return ma.masked_array(data=self.data, mask=self.mask, fill_value=self.fill_value)", "method_name": "asMaskedArray", "docstring_tokens": "Creates converts to a masked array"}
{"idx": "cosqa-train-14720", "doc": "python child widget close signal", "code": "def closeEvent(self, e):\n                self.emit('close_widget')\n        super(DockWidget, self).closeEvent(e)", "method_name": "closeEvent", "docstring_tokens": "Qt slot when the window is closed ."}
{"idx": "cosqa-train-17314", "doc": "python read from csv into numpy array", "code": "def csv_to_numpy(string_like, dtype=None):          stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')", "method_name": "csv_to_numpy", "docstring_tokens": "Convert a CSV object to a numpy array ."}
{"idx": "cosqa-train-19154", "doc": "cast string to bytearray python", "code": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"      if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')", "method_name": "to_bytes", "docstring_tokens": "Convert anything to a bytearray . See - http : // stackoverflow . com / questions / 7585435 / best - way - to - convert - string - to - bytes - in - python - 3 - http : // stackoverflow . com / questions / 10459067 / how - to - convert - my - bytearrayb - x9e - x18k - x9a - to - something - like - this - x9e - x1"}
{"idx": "cosqa-train-12100", "doc": "load str into python object", "code": "def loads(s, model=None, parser=None):\n        with StringIO(s) as f:\n        return load(f, model=model, parser=parser)", "method_name": "loads", "docstring_tokens": "Deserialize s ( a str ) to a Python object ."}
{"idx": "cosqa-train-13463", "doc": "python ldap get all groups a user belongs to", "code": "def get_groups(self, username):\n                username = ldap.filter.escape_filter_chars(self._byte_p2(username))\n        userdn = self._get_user(username, NO_ATTR)\n\n        searchfilter = self.group_filter_tmpl % {\n            'userdn': userdn,\n            'username': username\n        }\n\n        groups = self._search(searchfilter, NO_ATTR, self.groupdn)\n        ret = []\n        for entry in groups:\n            ret.append(self._uni(entry[0]))\n        return ret", "method_name": "get_groups", "docstring_tokens": "Get all groups of a user"}
{"idx": "cosqa-train-19108", "doc": "python check type if string", "code": "def is_unicode(string):\n        str_type = str(type(string))\n\n    if str_type.find('str') > 0 or str_type.find('unicode') > 0:\n        return True\n\n    return False", "method_name": "is_unicode", "docstring_tokens": "Validates that the object itself is some kinda string"}
{"idx": "cosqa-train-10931", "doc": "python get current globals", "code": "def caller_locals():\n        import inspect\n    frame = inspect.currentframe()\n    try:\n        return frame.f_back.f_back.f_locals\n    finally:\n        del frame", "method_name": "caller_locals", "docstring_tokens": "Get the local variables in the caller s frame ."}
{"idx": "cosqa-train-6946", "doc": "get child loggers python", "code": "def _get_loggers():\n        from .. import loader\n    modules = loader.get_package_modules('logger')\n    return list(loader.get_plugins(modules, [_Logger]))", "method_name": "_get_loggers", "docstring_tokens": "Return list of Logger classes ."}
{"idx": "cosqa-train-19023", "doc": "how to know if a text file is empty in python", "code": "def _cnx_is_empty(in_file):\n        with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True", "method_name": "_cnx_is_empty", "docstring_tokens": "Check if cnr or cns files are empty ( only have a header )"}
{"idx": "cosqa-train-15782", "doc": "python normal distribution p values", "code": "def EvalGaussianPdf(x, mu, sigma):\n        return scipy.stats.norm.pdf(x, mu, sigma)", "method_name": "EvalGaussianPdf", "docstring_tokens": "Computes the unnormalized PDF of the normal distribution ."}
{"idx": "cosqa-train-17937", "doc": "python ctypes array of arrays", "code": "def GetAllPixelColors(self) -> ctypes.Array:\n                return self.GetPixelColorsOfRect(0, 0, self.Width, self.Height)", "method_name": "GetAllPixelColors", "docstring_tokens": "Return ctypes . Array an iterable array of int values in argb ."}
{"idx": "cosqa-train-14548", "doc": "scale 1d array python to between 0 and 1", "code": "def _rescale_array(self, array, scale, zero):\n                if scale != 1.0:\n            sval = numpy.array(scale, dtype=array.dtype)\n            array *= sval\n        if zero != 0.0:\n            zval = numpy.array(zero, dtype=array.dtype)\n            array += zval", "method_name": "_rescale_array", "docstring_tokens": "Scale the input array"}
{"idx": "cosqa-train-12156", "doc": "python upper case lower case converter", "code": "def upcaseTokens(s,l,t):\n        return [ tt.upper() for tt in map(_ustr,t) ]", "method_name": "upcaseTokens", "docstring_tokens": "Helper parse action to convert tokens to upper case ."}
{"idx": "cosqa-train-8061", "doc": "ply python expression evaluator", "code": "def build(self, **kwargs):\n                self.lexer = ply.lex.lex(object=self, **kwargs)", "method_name": "build", "docstring_tokens": "Build the lexer ."}
{"idx": "cosqa-train-13196", "doc": "python hashlib calc sha1 of file", "code": "def _get_file_sha1(file):\n        bits = file.read()\n    file.seek(0)\n    h = hashlib.new('sha1', bits).hexdigest()\n    return h", "method_name": "_get_file_sha1", "docstring_tokens": "Return the SHA1 hash of the given a file - like object as file . This will seek the file back to 0 when it s finished ."}
{"idx": "cosqa-train-11579", "doc": "python pdb no capture std output", "code": "def set_trace():\n            pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)", "method_name": "set_trace", "docstring_tokens": "Start a Pdb instance at the calling frame with stdout routed to sys . __stdout__ ."}
{"idx": "cosqa-train-17702", "doc": "python how to write a factorial", "code": "def factorial(n, mod=None):\n        if not (isinstance(n, int) and n >= 0):\n        raise ValueError(\"'n' must be a non-negative integer.\")\n    if mod is not None and not (isinstance(mod, int) and mod > 0):\n        raise ValueError(\"'mod' must be a positive integer\")\n    result = 1\n    if n == 0:\n        return 1\n    for i in range(2, n+1):\n        result *= i\n        if mod:\n            result %= mod\n    return result", "method_name": "factorial", "docstring_tokens": "Calculates factorial iteratively . If mod is not None then return ( n! % mod ) Time Complexity - O ( n )"}
{"idx": "cosqa-train-11019", "doc": "python get the last column", "code": "def get_last_row(dbconn, tablename, n=1, uuid=None):\n        return fetch(dbconn, tablename, n, uuid, end=True)", "method_name": "get_last_row", "docstring_tokens": "Returns the last n rows in the table"}
{"idx": "cosqa-train-13220", "doc": "python how to change file extension", "code": "def lower_ext(abspath):\n        fname, ext = os.path.splitext(abspath)\n    return fname + ext.lower()", "method_name": "lower_ext", "docstring_tokens": "Convert file extension to lowercase ."}
{"idx": "cosqa-train-6758", "doc": "python get process memory info", "code": "def machine_info():\n        import psutil\n    BYTES_IN_GIG = 1073741824.0\n    free_bytes = psutil.virtual_memory().total\n    return [{\"memory\": float(\"%.1f\" % (free_bytes / BYTES_IN_GIG)), \"cores\": multiprocessing.cpu_count(),\n             \"name\": socket.gethostname()}]", "method_name": "machine_info", "docstring_tokens": "Retrieve core and memory information for the current machine ."}
{"idx": "cosqa-dev-481", "doc": "check if 2 string are equal python", "code": "def indexes_equal(a: Index, b: Index) -> bool:\n        return str(a) == str(b)", "method_name": "indexes_equal", "docstring_tokens": "Are two indexes equal? Checks by comparing str () versions of them . ( AM UNSURE IF THIS IS ENOUGH . )"}
{"idx": "cosqa-train-11094", "doc": "flask python create one table sqlalchemy", "code": "def create_db(app, appbuilder):\n        from flask_appbuilder.models.sqla import Base\n\n    _appbuilder = import_application(app, appbuilder)\n    engine = _appbuilder.get_session.get_bind(mapper=None, clause=None)\n    Base.metadata.create_all(engine)\n    click.echo(click.style(\"DB objects created\", fg=\"green\"))", "method_name": "create_db", "docstring_tokens": "Create all your database objects ( SQLAlchemy specific ) ."}
{"idx": "cosqa-train-8731", "doc": "clean output folder in python", "code": "def cleanup():\n        if _output_dir and os.path.exists(_output_dir):\n        log.msg_warn(\"Cleaning up output directory at '{output_dir}' ...\"\n                     .format(output_dir=_output_dir))\n        if not _dry_run:\n            shutil.rmtree(_output_dir)", "method_name": "cleanup", "docstring_tokens": "Cleanup the output directory"}
{"idx": "cosqa-train-19285", "doc": "python print nodes binary tree", "code": "def debugTreePrint(node,pfx=\"->\"):\n    print pfx,node.item\n  for c in node.children:\n    debugTreePrint(c,\"  \"+pfx)", "method_name": "debugTreePrint", "docstring_tokens": "Purely a debugging aid : Ascii - art picture of a tree descended from node"}
{"idx": "cosqa-train-15941", "doc": "python query string parsing", "code": "def urlencoded(body, charset='ascii', **kwargs):\n        return parse_query_string(text(body, charset=charset), False)", "method_name": "urlencoded", "docstring_tokens": "Converts query strings into native Python objects"}
{"idx": "cosqa-train-15200", "doc": "cycle through a folder of images python", "code": "def each_img(dir_path):\n        for fname in os.listdir(dir_path):\n        if fname.endswith('.jpg') or fname.endswith('.png') or fname.endswith('.bmp'):\n            yield fname", "method_name": "each_img", "docstring_tokens": "Iterates through each image in the given directory . ( not recursive ) : param dir_path : Directory path where images files are present : return : Iterator to iterate through image files"}
{"idx": "cosqa-train-17344", "doc": "check if a date is valid python", "code": "def valid_date(x: str) -> bool:\n        try:\n        if x != dt.datetime.strptime(x, DATE_FORMAT).strftime(DATE_FORMAT):\n            raise ValueError\n        return True\n    except ValueError:\n        return False", "method_name": "valid_date", "docstring_tokens": "Retrun True if x is a valid YYYYMMDD date ; otherwise return False ."}
{"idx": "cosqa-train-5599", "doc": "python spherical bessel functions", "code": "def sbessely(x, N):\n        out = np.zeros(N, dtype=np.float64)\n\n    out[0] = -np.cos(x) / x\n    out[1] = -np.cos(x) / (x ** 2) - np.sin(x) / x\n\n    for n in xrange(2, N):\n        out[n] = ((2.0 * n - 1.0) / x) * out[n - 1] - out[n - 2]\n\n    return out", "method_name": "sbessely", "docstring_tokens": "Returns a vector of spherical bessel functions yn : x : The argument . N : values of n will run from 0 to N - 1 ."}
{"idx": "cosqa-train-19367", "doc": "how to check a file is empty in python", "code": "def _cnx_is_empty(in_file):\n        with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True", "method_name": "_cnx_is_empty", "docstring_tokens": "Check if cnr or cns files are empty ( only have a header )"}
{"idx": "cosqa-train-14104", "doc": "python stop process multiprocessing", "code": "def stop(self, timeout=None):\n                self.stopping = True\n\n        for process in list(self.processes):\n            self.stop_process(process, timeout=timeout)", "method_name": "stop", "docstring_tokens": "Initiates a graceful stop of the processes"}
{"idx": "cosqa-train-9279", "doc": "python make sure all words are separated by a single space", "code": "def sanitize_word(s):\n        s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')", "method_name": "sanitize_word", "docstring_tokens": "Remove non - alphanumerical characters from metric word . And trim excessive underscores ."}
{"idx": "cosqa-train-12138", "doc": "making a multidimensional array of only 1 in python", "code": "def A(*a):\n        return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "method_name": "A", "docstring_tokens": "convert iterable object into numpy array"}
{"idx": "cosqa-train-15519", "doc": "python initialize variable of an object", "code": "def __init__(self):\n                self.state = self.STATE_INITIALIZING\n        self.state_start = time.time()", "method_name": "__init__", "docstring_tokens": "Initialize the state of the object"}
{"idx": "cosqa-train-6551", "doc": "python elasticsearch limit results", "code": "def scan(client, query=None, scroll='5m', raise_on_error=True,\n         preserve_order=False, size=1000, **kwargs):\n        if not preserve_order:\n        kwargs['search_type'] = 'scan'\n        resp = client.search(body=query, scroll=scroll, size=size, **kwargs)\n\n    scroll_id = resp.get('_scroll_id')\n    if scroll_id is None:\n        return\n\n    first_run = True\n    while True:\n                if preserve_order and first_run:\n            first_run = False\n        else:\n            resp = client.scroll(scroll_id, scroll=scroll)\n\n        for hit in resp['hits']['hits']:\n            yield hit\n\n                if resp[\"_shards\"][\"failed\"]:\n            logger.warning(\n                'Scroll request has failed on %d shards out of %d.',\n                resp['_shards']['failed'], resp['_shards']['total']\n            )\n            if raise_on_error:\n                raise ScanError(\n                    'Scroll request has failed on %d shards out of %d.' %\n                    (resp['_shards']['failed'], resp['_shards']['total'])\n                )\n\n        scroll_id = resp.get('_scroll_id')\n                if scroll_id is None or not resp['hits']['hits']:\n            break", "method_name": "scan", "docstring_tokens": "Simple abstraction on top of the : meth : ~elasticsearch . Elasticsearch . scroll api - a simple iterator that yields all hits as returned by underlining scroll requests . By default scan does not return results in any pre - determined order . To have a standard order in the returned documents ( either by score or explicit sort definition ) when scrolling use preserve_order = True . This may be an expensive operation and will negate the performance benefits of using scan . : arg client : instance of : class : ~elasticsearch . Elasticsearch to use : arg query : body for the : meth : ~elasticsearch . Elasticsearch . search api : arg scroll : Specify how long a consistent view of the index should be maintained for scrolled search : arg raise_on_error : raises an exception ( ScanError ) if an error is encountered ( some shards fail to execute ) . By default we raise . : arg preserve_order : don t set the search_type to scan - this will cause the scroll to paginate with preserving the order . Note that this can be an extremely expensive operation and can easily lead to unpredictable results use with caution . : arg size : size ( per shard ) of the batch send at each iteration . Any additional keyword arguments will be passed to the initial : meth : ~elasticsearch . Elasticsearch . search call :: scan ( es query = { query : { match : { title : python }}} index = orders - * doc_type = books )"}
{"idx": "cosqa-train-5203", "doc": "how to force exit python without raise", "code": "def __exit__(self, type, value, traceback):\n                if not self.asarfile:\n            return\n\n        self.asarfile.close()\n        self.asarfile = None", "method_name": "__exit__", "docstring_tokens": "When the with statement ends ."}
{"idx": "cosqa-train-10049", "doc": "python weak reference to bound method", "code": "def attr_cache_clear(self):\n        node = extract_node(\"\"\"def cache_clear(self): pass\"\"\")\n        return BoundMethod(proxy=node, bound=self._instance.parent.scope())", "method_name": "attr_cache_clear", "docstring_tokens": ""}
{"idx": "cosqa-train-10725", "doc": "calling index iterable python", "code": "def stop_at(iterable, idx):\n        for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item", "method_name": "stop_at", "docstring_tokens": "Stops iterating before yielding the specified idx ."}
{"idx": "cosqa-train-12736", "doc": "python datetime maybe undefined", "code": "def date_to_datetime(x):\n        if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x", "method_name": "date_to_datetime", "docstring_tokens": "Convert a date into a datetime"}
{"idx": "cosqa-train-8954", "doc": "python go to next page", "code": "def accel_next(self, *args):\n                if self.get_notebook().get_current_page() + 1 == self.get_notebook().get_n_pages():\n            self.get_notebook().set_current_page(0)\n        else:\n            self.get_notebook().next_page()\n        return True", "method_name": "accel_next", "docstring_tokens": "Callback to go to the next tab . Called by the accel key ."}
{"idx": "cosqa-train-6854", "doc": "filling null value sin data frame in python", "code": "def clean_dataframe(df):\n        df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df", "method_name": "clean_dataframe", "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"}
{"idx": "cosqa-train-5484", "doc": "python run external command and get output", "code": "def check_output(args, env=None, sp=subprocess):\n        log.debug('calling %s with env %s', args, env)\n    output = sp.check_output(args=args, env=env)\n    log.debug('output: %r', output)\n    return output", "method_name": "check_output", "docstring_tokens": "Call an external binary and return its stdout ."}
{"idx": "cosqa-train-13589", "doc": "how to compile python program to use in c++", "code": "def cpp_prog_builder(build_context, target):\n        yprint(build_context.conf, 'Build CppProg', target)\n    workspace_dir = build_context.get_workspace('CppProg', target.name)\n    build_cpp(build_context, target, target.compiler_config, workspace_dir)", "method_name": "cpp_prog_builder", "docstring_tokens": "Build a C ++ binary executable"}
{"idx": "cosqa-train-13360", "doc": "python img to bytearray", "code": "def to_bytes(self):\n\t\tchunks = [PNG_SIGN]\n\t\tchunks.extend(c[1] for c in self.chunks)\n\t\treturn b\"\".join(chunks)", "method_name": "to_bytes", "docstring_tokens": "Convert the entire image to bytes . : rtype : bytes"}
{"idx": "cosqa-train-9903", "doc": "how to use access token oauth python", "code": "def fetch_token(self, **kwargs):\n                return super(AsanaOAuth2Session, self).fetch_token(self.token_url, client_secret=self.client_secret, **kwargs)", "method_name": "fetch_token", "docstring_tokens": "Exchange a code ( and state token ) for a bearer token"}
{"idx": "cosqa-train-15551", "doc": "have python line continue on to next line", "code": "def advance_one_line(self):\n        current_line = self._current_token.line_number\n    while current_line == self._current_token.line_number:\n      self._current_token = ConfigParser.Token(*next(self._token_generator))", "method_name": "advance_one_line", "docstring_tokens": "Advances to next line ."}
{"idx": "cosqa-train-10234", "doc": "precision of ints in python", "code": "def round_to_int(number, precision):\n        precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded", "method_name": "round_to_int", "docstring_tokens": "Round a number to a precision"}
{"idx": "cosqa-train-5838", "doc": "modify the dice roll program to call a function for the die roll s python", "code": "def roll_dice():\n        sums = 0      while True:\n        roll = random.randint(1, 6)\n        sums += roll\n        if(input(\"Enter y or n to continue: \").upper()) == 'N':\n            print(sums)              break", "method_name": "roll_dice", "docstring_tokens": "Roll a die ."}
{"idx": "cosqa-train-10253", "doc": "python 'namespace' object is not iterable", "code": "def __add_namespaceinfo(self, ni):\n                self.__ns_uri_map[ni.uri] = ni\n        for prefix in ni.prefixes:\n            self.__prefix_map[prefix] = ni", "method_name": "__add_namespaceinfo", "docstring_tokens": "Internal method to directly add a _NamespaceInfo object to this set . No sanity checks are done ( e . g . checking for prefix conflicts ) so be sure to do it yourself before calling this ."}
{"idx": "cosqa-train-3453", "doc": "how to specify seed for python random", "code": "def generate_seed(seed):\n        if seed is None:\n        random.seed()\n        seed = random.randint(0, sys.maxsize)\n    random.seed(a=seed)\n\n    return seed", "method_name": "generate_seed", "docstring_tokens": "Generate seed for random number generator"}
{"idx": "cosqa-train-10014", "doc": "python use default arg", "code": "def arg_default(*args, **kwargs):\n        parser = argparse.ArgumentParser()\n    parser.add_argument(*args, **kwargs)\n    args = vars(parser.parse_args([]))\n    _, default = args.popitem()\n    return default", "method_name": "arg_default", "docstring_tokens": "Return default argument value as given by argparse s add_argument () ."}
{"idx": "cosqa-train-17635", "doc": "python change array dtype to int", "code": "def to_int64(a):\n            def promote_i4(typestr):\n        if typestr[1:] == 'i4':\n            typestr = typestr[0]+'i8'\n        return typestr\n\n    dtype = [(name, promote_i4(typestr)) for name,typestr in a.dtype.descr]\n    return a.astype(dtype)", "method_name": "to_int64", "docstring_tokens": "Return view of the recarray with all int32 cast to int64 ."}
{"idx": "cosqa-train-10859", "doc": "python forcible close socket before opening", "code": "def close(self):\n        try:\n      self._conn.send((self._CLOSE, None))\n      self._conn.close()\n    except IOError:\n            pass\n    self._process.join()", "method_name": "close", "docstring_tokens": "Send a close message to the external process and join it ."}
{"idx": "cosqa-train-11902", "doc": "python series'value non zero index", "code": "def reduce_fn(x):\n        values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN", "method_name": "reduce_fn", "docstring_tokens": "Aggregation function to get the first non - zero value ."}
{"idx": "cosqa-train-11300", "doc": "how to add a number to certain elements of an array numpy python", "code": "def _increment(arr, indices):\n        arr = _as_array(arr)\n    indices = _as_array(indices)\n    bbins = np.bincount(indices)\n    arr[:len(bbins)] += bbins\n    return arr", "method_name": "_increment", "docstring_tokens": "Increment some indices in a 1D vector of non - negative integers . Repeated indices are taken into account ."}
{"idx": "cosqa-train-12149", "doc": "python unit test and coverage at same time", "code": "def coverage(ctx, opts=\"\"):\n        return test(ctx, coverage=True, include_slow=True, opts=opts)", "method_name": "coverage", "docstring_tokens": "Execute all tests ( normal and slow ) with coverage enabled ."}
{"idx": "cosqa-train-987", "doc": "python only list files with specific extension", "code": "def glob_by_extensions(directory, extensions):\n        directorycheck(directory)\n    files = []\n    xt = files.extend\n    for ex in extensions:\n        xt(glob.glob('{0}/*.{1}'.format(directory, ex)))\n    return files", "method_name": "glob_by_extensions", "docstring_tokens": "Returns files matched by all extensions in the extensions list"}
{"idx": "cosqa-train-11054", "doc": "python global type hinting", "code": "def is_builtin_type(tp):\n        return hasattr(__builtins__, tp.__name__) and tp is getattr(__builtins__, tp.__name__)", "method_name": "is_builtin_type", "docstring_tokens": "Checks if the given type is a builtin one ."}
{"idx": "cosqa-train-9558", "doc": "how to make a function in python to take the average of list numbers", "code": "def calc_list_average(l):\n        total = 0.0\n    for value in l:\n        total += value\n    return total / len(l)", "method_name": "calc_list_average", "docstring_tokens": "Calculates the average value of a list of numbers Returns a float"}
{"idx": "cosqa-train-15051", "doc": "check if two arrays are equal python", "code": "def numpy_aware_eq(a, b):\n        if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n        return np.array_equal(a, b)\n    if ((isinstance(a, Iterable) and isinstance(b, Iterable)) and\n            not isinstance(a, str) and not isinstance(b, str)):\n        if len(a) != len(b):\n            return False\n        return all(numpy_aware_eq(x, y) for x, y in zip(a, b))\n    return a == b", "method_name": "numpy_aware_eq", "docstring_tokens": "Return whether two objects are equal via recursion using : func : numpy . array_equal for comparing numpy arays ."}
{"idx": "cosqa-train-5478", "doc": "python round down numpy", "code": "def round_array(array_in):\n        if isinstance(array_in, ndarray):\n        return np.round(array_in).astype(int)\n    else:\n        return int(np.round(array_in))", "method_name": "round_array", "docstring_tokens": "arr_out = round_array ( array_in )"}
{"idx": "cosqa-dev-421", "doc": "python pywin32 screenshoot refresh", "code": "def win32_refresh_window(cls):\n                        handle = windll.kernel32.GetConsoleWindow()\n\n        RDW_INVALIDATE = 0x0001\n        windll.user32.RedrawWindow(handle, None, None, c_uint(RDW_INVALIDATE))", "method_name": "win32_refresh_window", "docstring_tokens": "Call win32 API to refresh the whole Window ."}
{"idx": "cosqa-train-13319", "doc": "get largest date from a list python", "code": "def _latest_date(self, query, datetime_field_name):\n                return list(\n            query.aggregate(django.db.models.Max(datetime_field_name)).values()\n        )[0]", "method_name": "_latest_date", "docstring_tokens": "Given a QuerySet and the name of field containing datetimes return the latest ( most recent ) date ."}
{"idx": "cosqa-train-11348", "doc": "python lock no blocking", "code": "def lock(self, block=True):\n\t\tself._locked = True\n\t\treturn self._lock.acquire(block)", "method_name": "lock", "docstring_tokens": "Lock connection from being used else where"}
{"idx": "cosqa-train-19073", "doc": "delete item from a set python", "code": "def remove_once(gset, elem):\n        remove = getattr(gset, 'remove', None)\n    if remove is not None: remove(elem)\n    else: del gset[elem]\n    return elem", "method_name": "remove_once", "docstring_tokens": "Remove the element from a set lists or dict . >>> L = [ Lucy ] ; S = set ( [ Sky ] ) ; D = { Diamonds : True } ; >>> remove_once ( L Lucy ) ; remove_once ( S Sky ) ; remove_once ( D Diamonds ) ; >>> print L S D [] set ( [] ) {}"}
{"idx": "cosqa-train-16040", "doc": "how to make a sentence into underscores with python", "code": "def us2mc(string):\n        return re.sub(r'_([a-z])', lambda m: (m.group(1).upper()), string)", "method_name": "us2mc", "docstring_tokens": "Transform an underscore_case string to a mixedCase string"}
{"idx": "cosqa-train-9920", "doc": "python timestamp remove timezone", "code": "def convert_tstamp(response):\n\tif response is None:\n\t\treturn response\n\n\ttz = timezone.utc if settings.USE_TZ else None\n\n\treturn datetime.datetime.fromtimestamp(response, tz)", "method_name": "convert_tstamp", "docstring_tokens": "Convert a Stripe API timestamp response ( unix epoch ) to a native datetime ."}
{"idx": "cosqa-train-9697", "doc": "python sanic change all object id to string", "code": "def generate_id(self, obj):\n                object_type = type(obj).__name__.lower()\n        return '{}_{}'.format(object_type, self.get_object_id(obj))", "method_name": "generate_id", "docstring_tokens": "Generate unique document id for ElasticSearch ."}
{"idx": "cosqa-train-9318", "doc": "python mock mark a test as expected failure", "code": "def assert_called(_mock_self):\n                self = _mock_self\n        if self.call_count == 0:\n            msg = (\"Expected '%s' to have been called.\" %\n                   self._mock_name or 'mock')\n            raise AssertionError(msg)", "method_name": "assert_called", "docstring_tokens": "assert that the mock was called at least once"}
{"idx": "cosqa-train-13071", "doc": "python get current users desktop", "code": "def get_current_desktop(self):\n                desktop = ctypes.c_long(0)\n        _libxdo.xdo_get_current_desktop(self._xdo, ctypes.byref(desktop))\n        return desktop.value", "method_name": "get_current_desktop", "docstring_tokens": "Get the current desktop . Uses _NET_CURRENT_DESKTOP of the EWMH spec ."}
{"idx": "cosqa-train-6354", "doc": "python connect to redis in other docker container", "code": "def __connect():\n        global redis_instance\n    if use_tcp_socket:\n        redis_instance = redis.StrictRedis(host=hostname, port=port)\n    else:\n        redis_instance = redis.StrictRedis(unix_socket_path=unix_socket)", "method_name": "__connect", "docstring_tokens": "Connect to a redis instance ."}
{"idx": "cosqa-train-7773", "doc": "python subplot second y axis", "code": "def show_yticklabels(self, row, column):\n                subplot = self.get_subplot_at(row, column)\n        subplot.show_yticklabels()", "method_name": "show_yticklabels", "docstring_tokens": "Show the y - axis tick labels for a subplot ."}
{"idx": "cosqa-train-18714", "doc": "python function to detect first element of list", "code": "def find_first_in_list(txt: str, str_list: [str]) -> int:          start = len(txt) + 1\n    for item in str_list:\n        if start > txt.find(item) > -1:\n            start = txt.find(item)\n    return start if len(txt) + 1 > start > -1 else -1", "method_name": "find_first_in_list", "docstring_tokens": "Returns the index of the earliest occurence of an item from a list in a string"}
{"idx": "cosqa-train-5201", "doc": "how to flip a matrix in python", "code": "def imflip(img, direction='horizontal'):\n        assert direction in ['horizontal', 'vertical']\n    if direction == 'horizontal':\n        return np.flip(img, axis=1)\n    else:\n        return np.flip(img, axis=0)", "method_name": "imflip", "docstring_tokens": "Flip an image horizontally or vertically ."}
{"idx": "cosqa-train-15243", "doc": "python full name of object from global", "code": "def _fullname(o):\n        return o.__module__ + \".\" + o.__name__ if o.__module__ else o.__name__", "method_name": "_fullname", "docstring_tokens": "Return the fully - qualified name of a function ."}
{"idx": "cosqa-train-17087", "doc": "check if input is an integer or boolean python", "code": "def is_integer(value: Any) -> bool:\n        return (isinstance(value, int) and not isinstance(value, bool)) or (\n        isinstance(value, float) and isfinite(value) and int(value) == value\n    )", "method_name": "is_integer", "docstring_tokens": "Return true if a value is an integer number ."}
{"idx": "cosqa-train-14642", "doc": "storing columns as array python", "code": "def to_array(self):\n                dt = np.dtype(list(zip(self.labels, (c.dtype for c in self.columns))))\n        arr = np.empty_like(self.columns[0], dt)\n        for label in self.labels:\n            arr[label] = self[label]\n        return arr", "method_name": "to_array", "docstring_tokens": "Convert the table to a structured NumPy array ."}
{"idx": "cosqa-train-15173", "doc": "create column in python by joining columns", "code": "def join_cols(cols):\n        return \", \".join([i for i in cols]) if isinstance(cols, (list, tuple, set)) else cols", "method_name": "join_cols", "docstring_tokens": "Join list of columns into a string for a SQL query"}
{"idx": "cosqa-train-16155", "doc": "how to remove blank lines in python file", "code": "def lines(input):\n        for raw_line in input:\n        line = raw_line.strip()\n        if line and not line.startswith('            yield strip_comments(line)", "method_name": "lines", "docstring_tokens": "Remove comments and empty lines"}
{"idx": "cosqa-train-11638", "doc": "how to know size of queue in python", "code": "def qsize(self):\n                self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n", "method_name": "qsize", "docstring_tokens": "Return the approximate size of the queue ( not reliable! ) ."}
{"idx": "cosqa-train-9868", "doc": "python substring index of", "code": "def get_substring_idxs(substr, string):\n        return [match.start() for match in re.finditer(substr, string)]", "method_name": "get_substring_idxs", "docstring_tokens": "Return a list of indexes of substr . If substr not found list is empty ."}
{"idx": "cosqa-train-19683", "doc": "comparing int to none python", "code": "def is_natural(x):\n        try:\n        is_integer = int(x) == x\n    except (TypeError, ValueError):\n        return False\n    return is_integer and x >= 0", "method_name": "is_natural", "docstring_tokens": "A non - negative integer ."}
{"idx": "cosqa-train-7857", "doc": "json to protobuf python", "code": "def toJson(protoObject, indent=None):\n            js = json_format.MessageToDict(protoObject, False)\n    return json.dumps(js, indent=indent)", "method_name": "toJson", "docstring_tokens": "Serialises a protobuf object as json"}
{"idx": "cosqa-train-11626", "doc": "how to join 2 data frames in python", "code": "def cross_join(df1, df2):\n        if len(df1) == 0:\n        return df2\n\n    if len(df2) == 0:\n        return df1\n\n            all_columns = pd.Index(list(df1.columns) + list(df2.columns))\n    df1['key'] = 1\n    df2['key'] = 1\n    return pd.merge(df1, df2, on='key').loc[:, all_columns]", "method_name": "cross_join", "docstring_tokens": "Return a dataframe that is a cross between dataframes df1 and df2"}
{"idx": "cosqa-train-18817", "doc": "how to product of a list in python", "code": "def dotproduct(X, Y):\n        return sum([x * y for x, y in zip(X, Y)])", "method_name": "dotproduct", "docstring_tokens": "Return the sum of the element - wise product of vectors x and y . >>> dotproduct ( [ 1 2 3 ] [ 1000 100 10 ] ) 1230"}
{"idx": "cosqa-train-9034", "doc": "get all dates between range datetime python", "code": "def dates_in_range(start_date, end_date):\n        return [\n        start_date + timedelta(n)\n        for n in range(int((end_date - start_date).days))\n    ]", "method_name": "dates_in_range", "docstring_tokens": "Returns all dates between two dates ."}
{"idx": "cosqa-train-12370", "doc": "python access file on remote", "code": "def get_remote_content(filepath):\n                with hide('running'):\n            temp = BytesIO()\n            get(filepath, temp)\n            content = temp.getvalue().decode('utf-8')\n        return content.strip()", "method_name": "get_remote_content", "docstring_tokens": "A handy wrapper to get a remote file content"}
{"idx": "cosqa-train-9399", "doc": "how to download txt file from internet in python", "code": "def get_dates_link(url):\n        urllib.request.urlretrieve(url, \"temp.txt\")\n    dates = get_dates_file(\"temp.txt\")\n    os.remove(\"temp.txt\")\n    return dates", "method_name": "get_dates_link", "docstring_tokens": "download the dates file from the internet and parse it as a dates file"}
{"idx": "cosqa-train-12507", "doc": "stopwords list remove python", "code": "def _removeStopwords(text_list):\n        output_list = []\n\n    for word in text_list:\n        if word.lower() not in _stopwords:\n            output_list.append(word)\n\n    return output_list", "method_name": "_removeStopwords", "docstring_tokens": "Removes stopwords contained in a list of words ."}
{"idx": "cosqa-train-7885", "doc": "limit on open file handles in python", "code": "def _increase_file_handle_limit():\n        logging.info('Increasing file handle limit to {}'.format(constants.FILE_HANDLE_LIMIT))\n    resource.setrlimit(resource.RLIMIT_NOFILE,\n                       (constants.FILE_HANDLE_LIMIT, resource.RLIM_INFINITY))", "method_name": "_increase_file_handle_limit", "docstring_tokens": "Raise the open file handles permitted by the Dusty daemon process and its child processes . The number we choose here needs to be within the OS X default kernel hard limit which is 10240 ."}
{"idx": "cosqa-train-6745", "doc": "determine the longest sentence in corpus in nlp python ocde", "code": "def get_longest_orf(orfs):\n        sorted_orf = sorted(orfs, key=lambda x: len(x['sequence']), reverse=True)[0]\n    return sorted_orf", "method_name": "get_longest_orf", "docstring_tokens": "Find longest ORF from the given list of ORFs ."}
{"idx": "cosqa-train-8615", "doc": "python deterministic dictionary printing", "code": "def pprint_for_ordereddict():\n        od_saved = OrderedDict.__repr__\n    try:\n        OrderedDict.__repr__ = dict.__repr__\n        yield\n    finally:\n        OrderedDict.__repr__ = od_saved", "method_name": "pprint_for_ordereddict", "docstring_tokens": "Context manager that causes pprint () to print OrderedDict objects as nicely as standard Python dictionary objects ."}
{"idx": "cosqa-train-10233", "doc": "remove namespace from xml tag python", "code": "def strip_xml_namespace(root):\n        try:\n        root.tag = root.tag.split('}')[1]\n    except IndexError:\n        pass\n\n    for element in root.getchildren():\n        strip_xml_namespace(element)", "method_name": "strip_xml_namespace", "docstring_tokens": "Strip out namespace data from an ElementTree ."}
{"idx": "cosqa-train-13207", "doc": "fill is null with other columns python", "code": "def clean_dataframe(df):\n        df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df", "method_name": "clean_dataframe", "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"}
{"idx": "cosqa-train-8216", "doc": "python async input from gui", "code": "async def async_input(prompt):\n        print(prompt, end='', flush=True)\n    return (await loop.run_in_executor(None, sys.stdin.readline)).rstrip()", "method_name": "async_input", "docstring_tokens": "Python s input () is blocking which means the event loop we set above can t be running while we re blocking there . This method will let the loop run while we wait for input ."}
{"idx": "cosqa-train-9515", "doc": "how to identify the index of an element of a set in python", "code": "def find_geom(geom, geoms):\n        for i, g in enumerate(geoms):\n        if g is geom:\n            return i", "method_name": "find_geom", "docstring_tokens": "Returns the index of a geometry in a list of geometries avoiding expensive equality checks of in operator ."}
{"idx": "cosqa-train-12351", "doc": "python 3 print object string", "code": "def _get_pretty_string(obj):\n        sio = StringIO()\n    pprint.pprint(obj, stream=sio)\n    return sio.getvalue()", "method_name": "_get_pretty_string", "docstring_tokens": "Return a prettier version of obj"}
{"idx": "cosqa-train-13120", "doc": "python get most recent file containing string", "code": "def newest_file(file_iterable):\n    return max(file_iterable, key=lambda fname: os.path.getmtime(fname))", "method_name": "newest_file", "docstring_tokens": "Returns the name of the newest file given an iterable of file names ."}
{"idx": "cosqa-train-14086", "doc": "python sqlite3 delete doesn't delete records", "code": "def truncate_table(self, tablename):\n                self.get(tablename).remove()\n        self.db.commit()", "method_name": "truncate_table", "docstring_tokens": "SQLite3 doesn t support direct truncate so we just use delete here"}
{"idx": "cosqa-train-8166", "doc": "python apply function to iterator", "code": "def find_all(self, string, callback):\n\t\tfor index, output in self.iter(string):\n\t\t\tcallback(index, output)", "method_name": "find_all", "docstring_tokens": "Wrapper on iter method callback gets an iterator result"}
{"idx": "cosqa-train-12637", "doc": "use python next to iterate through", "code": "def __next__(self, reward, ask_id, lbl):\n                return self.next(reward, ask_id, lbl)", "method_name": "__next__", "docstring_tokens": "For Python3 compatibility of generator ."}
{"idx": "cosqa-train-7547", "doc": "how to print all the variables in an object python", "code": "def var_dump(*obs):\n\ti = 0\n\tfor x in obs:\n\t\t\n\t\tstr = var_dump_output(x, 0, '  ', '\\n', True)\n\t\tprint (str.strip())\n\t\t\n\t\ti += 1", "method_name": "var_dump", "docstring_tokens": "shows structured information of a object list tuple etc"}
{"idx": "cosqa-train-18478", "doc": "how to determine the index interval for given range of array python", "code": "def _infer_interval_breaks(coord):\n        coord = np.asarray(coord)\n    deltas = 0.5 * (coord[1:] - coord[:-1])\n    first = coord[0] - deltas[0]\n    last = coord[-1] + deltas[-1]\n    return np.r_[[first], coord[:-1] + deltas, [last]]", "method_name": "_infer_interval_breaks", "docstring_tokens": ">>> _infer_interval_breaks ( np . arange ( 5 )) array ( [ - 0 . 5 0 . 5 1 . 5 2 . 5 3 . 5 4 . 5 ] )"}
{"idx": "cosqa-train-17091", "doc": "python print numpy array with string", "code": "def array2string(arr: numpy.ndarray) -> str:\n                shape = str(arr.shape)[1:-1]\n        if shape.endswith(\",\"):\n            shape = shape[:-1]\n        return numpy.array2string(arr, threshold=11) + \"%s[%s]\" % (arr.dtype, shape)", "method_name": "array2string", "docstring_tokens": "Format numpy array as a string ."}
{"idx": "cosqa-train-14536", "doc": "python assert value is of type", "code": "def _assert_is_type(name, value, value_type):\n        if not isinstance(value, value_type):\n        if type(value_type) is tuple:\n            types = ', '.join(t.__name__ for t in value_type)\n            raise ValueError('{0} must be one of ({1})'.format(name, types))\n        else:\n            raise ValueError('{0} must be {1}'\n                             .format(name, value_type.__name__))", "method_name": "_assert_is_type", "docstring_tokens": "Assert that a value must be a given type ."}
{"idx": "cosqa-train-11450", "doc": "python multiproccessing map with multiple inputs", "code": "def imapchain(*a, **kwa):\n        imap_results = map( *a, **kwa )\n    return itertools.chain( *imap_results )", "method_name": "imapchain", "docstring_tokens": "Like map but also chains the results ."}
{"idx": "cosqa-train-14502", "doc": "python add suffix to filename", "code": "def add_suffix(fullname, suffix):\n        name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext", "method_name": "add_suffix", "docstring_tokens": "Add suffix to a full file name"}
{"idx": "cosqa-train-14904", "doc": "best way to deal with pagination in python", "code": "def paginate(self, request, offset=0, limit=None):\n                return self.collection.offset(offset).limit(limit), self.collection.count()", "method_name": "paginate", "docstring_tokens": "Paginate queryset ."}
{"idx": "cosqa-train-18641", "doc": "finding factors in python and return list", "code": "def factors(n):\n        return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))", "method_name": "factors", "docstring_tokens": "Computes all the integer factors of the number n"}
{"idx": "cosqa-train-4338", "doc": "best way to read xml in python", "code": "def xmltreefromfile(filename):\n        try:\n        return ElementTree.parse(filename, ElementTree.XMLParser(collect_ids=False))\n    except TypeError:\n        return ElementTree.parse(filename, ElementTree.XMLParser())", "method_name": "xmltreefromfile", "docstring_tokens": "Internal function to read an XML file"}
{"idx": "cosqa-train-9678", "doc": "how to put a string in a yaml file python", "code": "def generate_yaml_file(filename, contents):\n        with open(filename, 'w') as file:\n        file.write(yaml.dump(contents, default_flow_style=False))", "method_name": "generate_yaml_file", "docstring_tokens": "Creates a yaml file with the given content ."}
{"idx": "cosqa-train-920", "doc": "python move cursor to secific line", "code": "def _go_to_line(editor, line):\n        b = editor.application.current_buffer\n    b.cursor_position = b.document.translate_row_col_to_index(max(0, int(line) - 1), 0)", "method_name": "_go_to_line", "docstring_tokens": "Move cursor to this line in the current buffer ."}
{"idx": "cosqa-dev-72", "doc": "token to id python", "code": "def strids2ids(tokens: Iterable[str]) -> List[int]:\n        return list(map(int, tokens))", "method_name": "strids2ids", "docstring_tokens": "Returns sequence of integer ids given a sequence of string ids ."}
{"idx": "cosqa-train-19357", "doc": "python urlparse get domain", "code": "def get_domain(url):\n        parse_result = urlparse(url)\n    domain = \"{schema}://{netloc}\".format(\n        schema=parse_result.scheme, netloc=parse_result.netloc)\n    return domain", "method_name": "get_domain", "docstring_tokens": "Get domain part of an url ."}
{"idx": "cosqa-train-7880", "doc": "python turn a string into a number", "code": "def get_number(s, cast=int):\n        import string\n    d = \"\".join(x for x in str(s) if x in string.digits)\n    return cast(d)", "method_name": "get_number", "docstring_tokens": "Try to get a number out of a string and cast it ."}
{"idx": "cosqa-train-18111", "doc": "python check if all are type string in a column", "code": "def is_sqlatype_string(coltype: Union[TypeEngine, VisitableType]) -> bool:\n        coltype = _coltype_to_typeengine(coltype)\n    return isinstance(coltype, sqltypes.String)", "method_name": "is_sqlatype_string", "docstring_tokens": "Is the SQLAlchemy column type a string type?"}
{"idx": "cosqa-train-12805", "doc": "bin means python numpy", "code": "def val_to_bin(edges, x):\n        ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin", "method_name": "val_to_bin", "docstring_tokens": "Convert axis coordinate to bin index ."}
{"idx": "cosqa-train-14553", "doc": "python boto3 delete key from s3", "code": "def remove_file_from_s3(awsclient, bucket, key):\n        client_s3 = awsclient.get_client('s3')\n    response = client_s3.delete_object(Bucket=bucket, Key=key)", "method_name": "remove_file_from_s3", "docstring_tokens": "Remove a file from an AWS S3 bucket ."}
{"idx": "cosqa-train-19466", "doc": "random walk steps python", "code": "def returned(n):\n\tfor pos in randwalk() >> drop(1) >> takei(xrange(n-1)):\n\t\tif pos == Origin:\n\t\t\treturn True\n\treturn False", "method_name": "returned", "docstring_tokens": "Generate a random walk and return True if the walker has returned to the origin after taking n steps ."}
{"idx": "cosqa-train-8586", "doc": "python delete objects inside of objects", "code": "def _removeTags(tags, objects):\n        for t in tags:\n        for o in objects:\n            o.tags.remove(t)\n\n    return True", "method_name": "_removeTags", "docstring_tokens": "Removes tags from objects"}
{"idx": "cosqa-train-8348", "doc": "truncate seconds from a timestamp in python code", "code": "def RoundToSeconds(cls, timestamp):\n        leftovers = timestamp % definitions.MICROSECONDS_PER_SECOND\n    scrubbed = timestamp - leftovers\n    rounded = round(float(leftovers) / definitions.MICROSECONDS_PER_SECOND)\n\n    return int(scrubbed + rounded * definitions.MICROSECONDS_PER_SECOND)", "method_name": "RoundToSeconds", "docstring_tokens": "Takes a timestamp value and rounds it to a second precision ."}
{"idx": "cosqa-train-7002", "doc": "python json load unorde", "code": "def read_json(location):\n        location = ensure_path(location)\n    with location.open('r', encoding='utf8') as f:\n        return ujson.load(f)", "method_name": "read_json", "docstring_tokens": "Open and load JSON from file ."}
{"idx": "cosqa-train-10094", "doc": "python yaml expected single document", "code": "def yaml_to_param(obj, name):\n\treturn from_pyvalue(u\"yaml:%s\" % name, unicode(yaml.dump(obj)))", "method_name": "yaml_to_param", "docstring_tokens": "Return the top - level element of a document sub - tree containing the YAML serialization of a Python object ."}
{"idx": "cosqa-train-8758", "doc": "python filter object at", "code": "def __init__(self, function):\n\t\tsuper(filter, self).__init__()\n\t\tself.function = function", "method_name": "__init__", "docstring_tokens": "function : to be called with each stream element as its only argument"}
{"idx": "cosqa-train-9368", "doc": "python nonetype object has no attributte", "code": "def listlike(obj):\n        \n    return hasattr(obj, \"__iter__\") \\\n    and not issubclass(type(obj), str)\\\n    and not issubclass(type(obj), unicode)", "method_name": "listlike", "docstring_tokens": "Is an object iterable like a list ( and not a string ) ?"}
{"idx": "cosqa-train-16286", "doc": "python tkinter how to create scrollable canvas", "code": "def _set_scroll_v(self, *args):\n                self._canvas_categories.yview(*args)\n        self._canvas_scroll.yview(*args)", "method_name": "_set_scroll_v", "docstring_tokens": "Scroll both categories Canvas and scrolling container"}
{"idx": "cosqa-train-11132", "doc": "geojson to topojson python", "code": "def to_topojson(self):\n                topojson = self.topojson\n        topojson[\"objects\"][\"points\"] = {\n            \"type\": \"GeometryCollection\",\n            \"geometries\": [point.to_topojson() for point in self.points.all()],\n        }\n        return json.dumps(topojson)", "method_name": "to_topojson", "docstring_tokens": "Adds points and converts to topojson string ."}
{"idx": "cosqa-train-16972", "doc": "python get png image dimensions", "code": "def getDimensionForImage(filename, maxsize):\n        try:\n        from PIL import Image\n    except ImportError:\n        return None\n    img = Image.open(filename)\n    width, height = img.size\n    if width > maxsize[0] or height > maxsize[1]:\n        img.thumbnail(maxsize)\n        out.info(\"Downscaled display size from %s to %s\" % ((width, height), img.size))\n    return img.size", "method_name": "getDimensionForImage", "docstring_tokens": "Return scaled image size in ( width height ) format . The scaling preserves the aspect ratio . If PIL is not found returns None ."}
{"idx": "cosqa-train-6652", "doc": "python flask separate functions get and post", "code": "def handleFlaskPostRequest(flaskRequest, endpoint):\n        if flaskRequest.method == \"POST\":\n        return handleHttpPost(flaskRequest, endpoint)\n    elif flaskRequest.method == \"OPTIONS\":\n        return handleHttpOptions()\n    else:\n        raise exceptions.MethodNotAllowedException()", "method_name": "handleFlaskPostRequest", "docstring_tokens": "Handles the specified flask request for one of the POST URLS Invokes the specified endpoint to generate a response ."}
{"idx": "cosqa-train-18214", "doc": "return year from date python", "code": "def year(date):\n        try:\n        fmt = '%m/%d/%Y'\n        return datetime.strptime(date, fmt).timetuple().tm_year\n    except ValueError:\n        return 0", "method_name": "year", "docstring_tokens": "Returns the year ."}
{"idx": "cosqa-train-13715", "doc": "how to get all modes python", "code": "def __iter__(self):\n                return iter([v for k, v in sorted(self._modes.items())])", "method_name": "__iter__", "docstring_tokens": "Returns the list of modes ."}
{"idx": "cosqa-train-17708", "doc": "integer and returns a random bitstring of size python", "code": "def binary(length):\n        num = randint(1, 999999)\n    mask = '0' * length\n    return (mask + ''.join([str(num >> i & 1) for i in range(7, -1, -1)]))[-length:]", "method_name": "binary", "docstring_tokens": "returns a a random string that represent a binary representation"}
{"idx": "cosqa-train-11584", "doc": "how to get the encoding of a file python", "code": "def smartread(path):\n        with open(path, \"rb\") as f:\n        content = f.read()\n        result = chardet.detect(content)\n        return content.decode(result[\"encoding\"])", "method_name": "smartread", "docstring_tokens": "Read text from file automatically detect encoding . chardet required ."}
{"idx": "cosqa-train-14776", "doc": "python connect to aws rds", "code": "def connect_rds(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):\n        from boto.rds import RDSConnection\n    return RDSConnection(aws_access_key_id, aws_secret_access_key, **kwargs)", "method_name": "connect_rds", "docstring_tokens": ": type aws_access_key_id : string : param aws_access_key_id : Your AWS Access Key ID"}
{"idx": "cosqa-train-12714", "doc": "python cv2 check if image is empty", "code": "def is_empty(self):\n                if(((self.channels == []) and (not self.shape == (0, 0))) or\n           ((not self.channels == []) and (self.shape == (0, 0)))):\n            raise RuntimeError(\"Channels-shape mismatch.\")\n        return self.channels == [] and self.shape == (0, 0)", "method_name": "is_empty", "docstring_tokens": "Checks for an empty image ."}
{"idx": "cosqa-train-11606", "doc": "how to hide a window using a button in python", "code": "def hide(self):\n                if not HidePrevention(self.window).may_hide():\n            return\n        self.hidden = True\n        self.get_widget('window-root').unstick()\n        self.window.hide()", "method_name": "hide", "docstring_tokens": "Hides the main window of the terminal and sets the visible flag to False ."}
{"idx": "cosqa-train-13550", "doc": "python marshmallow validation schema from parent", "code": "def validate(schema, data, owner=None):\n        schema._validate(data=data, owner=owner)", "method_name": "validate", "docstring_tokens": "Validate input data with input schema ."}
{"idx": "cosqa-train-13211", "doc": "fillna with string for specific columnin python", "code": "def stringify_col(df, col_name):\n        df = df.copy()\n    df[col_name] = df[col_name].fillna(\"\")\n    df[col_name] = df[col_name].astype(str)\n    return df", "method_name": "stringify_col", "docstring_tokens": "Take a dataframe and string - i - fy a column of values . Turn nan / None into and all other values into strings ."}
{"idx": "cosqa-train-1345", "doc": "how to separate list elements by white space python", "code": "def split_strings_in_list_retain_spaces(orig_list):\n        temp_list = list()\n    for line in orig_list:\n        line_split = __re.split(r'(\\s+)', line)\n        temp_list.append(line_split)\n\n    return temp_list", "method_name": "split_strings_in_list_retain_spaces", "docstring_tokens": "Function to split every line in a list and retain spaces for a rejoin : param orig_list : Original list : return : A List with split lines"}
{"idx": "cosqa-train-13635", "doc": "how to default value in python", "code": "def safe_int(val, default=None):\n        try:\n        val = int(val)\n    except (ValueError, TypeError):\n        val = default\n\n    return val", "method_name": "safe_int", "docstring_tokens": "Returns int () of val if val is not convertable to int use default instead"}
{"idx": "cosqa-train-8623", "doc": "python dict keys lowercase", "code": "def keys_to_snake_case(camel_case_dict):\n        return dict((to_snake_case(key), value) for (key, value) in camel_case_dict.items())", "method_name": "keys_to_snake_case", "docstring_tokens": "Make a copy of a dictionary with all keys converted to snake case . This is just calls to_snake_case on each of the keys in the dictionary and returns a new dictionary ."}
{"idx": "cosqa-train-10955", "doc": "python get index of list values that equal", "code": "def equal(list1, list2):\n        return [item1 == item2 for item1, item2 in broadcast_zip(list1, list2)]", "method_name": "equal", "docstring_tokens": "takes flags returns indexes of True values"}
{"idx": "cosqa-train-9658", "doc": "python requests logging not work", "code": "def process_request(self, request, response):\n                self.logger.info('Requested: {0} {1} {2}'.format(request.method, request.relative_uri, request.content_type))", "method_name": "process_request", "docstring_tokens": "Logs the basic endpoint requested"}
{"idx": "cosqa-train-12001", "doc": "python static files flask", "code": "def glr_path_static():\n        return os.path.abspath(os.path.join(os.path.dirname(__file__), '_static'))", "method_name": "glr_path_static", "docstring_tokens": "Returns path to packaged static files"}
{"idx": "cosqa-train-19618", "doc": "rest json schema validation python", "code": "def validate(request: Union[Dict, List], schema: dict) -> Union[Dict, List]:\n        jsonschema_validate(request, schema)\n    return request", "method_name": "validate", "docstring_tokens": "Wraps jsonschema . validate returning the same object passed in ."}
{"idx": "cosqa-train-10560", "doc": "write in bold and read in color of the print mesaage in python", "code": "def good(txt):\n        print(\"%s    sys.stdout.flush()", "method_name": "good", "docstring_tokens": "Print emphasized good the given txt message"}
{"idx": "cosqa-train-14241", "doc": "python type cast to bigint", "code": "def _from_bytes(bytes, byteorder=\"big\", signed=False):\n        return int.from_bytes(bytes, byteorder=byteorder, signed=signed)", "method_name": "_from_bytes", "docstring_tokens": "This is the same functionality as int . from_bytes in python 3"}
{"idx": "cosqa-train-8782", "doc": "converts matrix to pictures by python", "code": "def im2mat(I):\n        return I.reshape((I.shape[0] * I.shape[1], I.shape[2]))", "method_name": "im2mat", "docstring_tokens": "Converts and image to matrix ( one pixel per line )"}
{"idx": "cosqa-train-11687", "doc": "python random selection from function", "code": "def sometimesish(fn):\n        def wrapped(*args, **kwargs):\n        if random.randint(1, 2) == 1:\n            return fn(*args, **kwargs)\n\n    return wrapped", "method_name": "sometimesish", "docstring_tokens": "Has a 50 / 50 chance of calling a function"}
{"idx": "cosqa-train-13450", "doc": "python keep processpool open until tasks complete", "code": "def wait(self, timeout=None):\n        if not self.__running:\n      raise RuntimeError(\"ThreadPool ain't running\")\n    self.__queue.wait(timeout)", "method_name": "wait", "docstring_tokens": "Block until all jobs in the ThreadPool are finished . Beware that this can make the program run into a deadlock if another thread adds new jobs to the pool!"}
{"idx": "cosqa-train-10307", "doc": "running a def a specified amount of time python 3", "code": "def seconds(num):\n        now = pytime.time()\n    end = now + num\n    until(end)", "method_name": "seconds", "docstring_tokens": "Pause for this many seconds"}
{"idx": "cosqa-train-19371", "doc": "python str to dateal time", "code": "def str_to_time(time_str: str) -> datetime.datetime:\n        pieces: Any = [int(piece) for piece in time_str.split('-')]\n    return datetime.datetime(*pieces)", "method_name": "str_to_time", "docstring_tokens": "Convert human readable string to datetime . datetime ."}
{"idx": "cosqa-train-12569", "doc": "python check if file is executable", "code": "def is_executable(path):\n    return os.path.isfile(path) and os.access(path, os.X_OK)", "method_name": "is_executable", "docstring_tokens": "Returns whether a path names an existing executable file ."}
{"idx": "cosqa-train-17715", "doc": "python how to check the queue lenght", "code": "def full(self):\n                return self.maxsize and len(self.list) >= self.maxsize or False", "method_name": "full", "docstring_tokens": "Return True if the queue is full False otherwise ( not reliable! ) ."}
{"idx": "cosqa-train-16490", "doc": "query server objects ldap in python", "code": "def search(self, filterstr, attrlist):\n                return self._paged_search_ext_s(self.settings.BASE, ldap.SCOPE_SUBTREE, filterstr=filterstr,\n                                        attrlist=attrlist, page_size=self.settings.PAGE_SIZE)", "method_name": "search", "docstring_tokens": "Query the configured LDAP server ."}
{"idx": "cosqa-train-15089", "doc": "python docx document section different page", "code": "def fill_document(doc):\n        with doc.create(Section('A section')):\n        doc.append('Some regular text and some ')\n        doc.append(italic('italic text. '))\n\n        with doc.create(Subsection('A subsection')):\n            doc.append('Also some crazy characters: $&#{}')", "method_name": "fill_document", "docstring_tokens": "Add a section a subsection and some text to the document ."}
{"idx": "cosqa-train-10557", "doc": "write a json object to file python", "code": "def _serialize_json(obj, fp):\n        json.dump(obj, fp, indent=4, default=serialize)", "method_name": "_serialize_json", "docstring_tokens": "Serialize obj as a JSON formatted stream to fp"}
{"idx": "cosqa-train-19263", "doc": "how to compute the minimum value of a tensor in python", "code": "def last_location_of_minimum(x):\n        x = np.asarray(x)\n    return 1.0 - np.argmin(x[::-1]) / len(x) if len(x) > 0 else np.NaN", "method_name": "last_location_of_minimum", "docstring_tokens": "Returns the last location of the minimal value of x . The position is calculated relatively to the length of x ."}
{"idx": "cosqa-train-16352", "doc": "python unittest how to assert 2 lists are almost equal", "code": "def expect_all(a, b):\n        assert all(_a == _b for _a, _b in zip_longest(a, b))", "method_name": "expect_all", "docstring_tokens": "\\ Asserts that two iterables contain the same values ."}
{"idx": "cosqa-dev-27", "doc": "how to check if 2 inputs are equal in python assert equal", "code": "def expect_all(a, b):\n        assert all(_a == _b for _a, _b in zip_longest(a, b))", "method_name": "expect_all", "docstring_tokens": "\\ Asserts that two iterables contain the same values ."}
{"idx": "cosqa-train-9249", "doc": "python loop through proxies request", "code": "def load(self):\n                self._list = self._source.load()\n        self._list_iter = itertools.cycle(self._list)", "method_name": "load", "docstring_tokens": "Load proxy list from configured proxy source"}
{"idx": "cosqa-train-834", "doc": "python loess with gaussian kernel", "code": "def lognorm(x, mu, sigma=1.0):\n        return stats.lognorm(sigma, scale=mu).pdf(x)", "method_name": "lognorm", "docstring_tokens": "Log - normal function from scipy"}
{"idx": "cosqa-train-17394", "doc": "greatest common divisor function in python", "code": "def gcd_float(numbers, tol=1e-8):\n        def pair_gcd_tol(a, b):\n                while b > tol:\n            a, b = b, a % b\n        return a\n\n    n = numbers[0]\n    for i in numbers:\n        n = pair_gcd_tol(n, i)\n    return n", "method_name": "gcd_float", "docstring_tokens": "Returns the greatest common divisor for a sequence of numbers . Uses a numerical tolerance so can be used on floats"}
{"idx": "cosqa-dev-530", "doc": "how to clear up memory python", "code": "def Flush(self):\n        while self._age:\n      node = self._age.PopLeft()\n      self.KillObject(node.data)\n\n    self._hash = dict()", "method_name": "Flush", "docstring_tokens": "Flush all items from cache ."}
{"idx": "cosqa-dev-591", "doc": "get eucliedan distance between two vectors python", "code": "def vector_distance(a, b):\n        a = np.array(a)\n    b = np.array(b)\n    return np.linalg.norm(a - b)", "method_name": "vector_distance", "docstring_tokens": "The Euclidean distance between two vectors ."}
{"idx": "cosqa-train-11239", "doc": "python interactive shell color", "code": "def auto():\n\ttry:\n\t\tStyle.enabled = False\n\t\tStyle.enabled = sys.stdout.isatty()\n\texcept (AttributeError, TypeError):\n\t\tpass", "method_name": "auto", "docstring_tokens": "set colouring on if STDOUT is a terminal device off otherwise"}
{"idx": "cosqa-train-8033", "doc": "passing a range of values python years", "code": "def from_years_range(start_year, end_year):\n                start = datetime.date(start_year, 1 , 1)\n        end = datetime.date(end_year, 12 , 31)\n        return DateRange(start, end)", "method_name": "from_years_range", "docstring_tokens": "Transform a range of years ( two ints ) to a DateRange object ."}
{"idx": "cosqa-train-12233", "doc": "python yaml for each key value", "code": "def safe_dump(data, stream=None, **kwds):\n        return yaml.dump(data, stream=stream, Dumper=ODYD, **kwds)", "method_name": "safe_dump", "docstring_tokens": "implementation of safe dumper using Ordered Dict Yaml Dumper"}
{"idx": "cosqa-train-14163", "doc": "python test if value is ctypes array", "code": "def is_array(type_):\n        nake_type = remove_alias(type_)\n    nake_type = remove_reference(nake_type)\n    nake_type = remove_cv(nake_type)\n    return isinstance(nake_type, cpptypes.array_t)", "method_name": "is_array", "docstring_tokens": "returns True if type represents C ++ array type False otherwise"}
{"idx": "cosqa-train-13261", "doc": "function return apply async python", "code": "def apply(self, func, args=(), kwds=dict()):\n                return self.apply_async(func, args, kwds).get()", "method_name": "apply", "docstring_tokens": "Equivalent of the apply () builtin function . It blocks till the result is ready ."}
{"idx": "cosqa-train-12308", "doc": "reload device program code in python", "code": "def reload(self, save_config=True):\n                if save_config:\n            self.device.send(\"copy running-config startup-config\")\n        self.device(\"reload\", wait_for_string=\"This command will reboot the system\")\n        self.device.ctrl.sendline(\"y\")", "method_name": "reload", "docstring_tokens": "Reload the device ."}
{"idx": "cosqa-train-4030", "doc": "split string into n parts python", "code": "def _split_str(s, n):\n        length = len(s)\n    return [s[i:i + n] for i in range(0, length, n)]", "method_name": "_split_str", "docstring_tokens": "split string into list of strings by specified number ."}
{"idx": "cosqa-train-10978", "doc": "python get object as dict", "code": "def conv_dict(self):\n                return dict(integer=self.integer, real=self.real, no_type=self.no_type)", "method_name": "conv_dict", "docstring_tokens": "dictionary of conversion"}
{"idx": "cosqa-train-18571", "doc": "selecting a range of 2d elements from a numpy array gives empty array in python 3", "code": "def to_0d_array(value: Any) -> np.ndarray:\n        if np.isscalar(value) or (isinstance(value, np.ndarray) and\n                              value.ndim == 0):\n        return np.array(value)\n    else:\n        return to_0d_object_array(value)", "method_name": "to_0d_array", "docstring_tokens": "Given a value wrap it in a 0 - D numpy . ndarray ."}
{"idx": "cosqa-train-19958", "doc": "python read tokens from line", "code": "def get_tokens(line: str) -> Iterator[str]:\n        for token in line.rstrip().split():\n        if len(token) > 0:\n            yield token", "method_name": "get_tokens", "docstring_tokens": "Yields tokens from input string ."}
{"idx": "cosqa-train-16924", "doc": "write data into fits file python", "code": "def write_fits(self, fitsfile):\n                tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)", "method_name": "write_fits", "docstring_tokens": "Write the ROI model to a FITS file ."}
{"idx": "cosqa-train-3162", "doc": "python print string with visible ansi codes", "code": "def ansi(color, text):\n        code = COLOR_CODES[color]\n    return '\\033[1;{0}m{1}{2}'.format(code, text, RESET_TERM)", "method_name": "ansi", "docstring_tokens": "Wrap text in an ansi escape sequence"}
{"idx": "cosqa-train-18616", "doc": "python check if value in enum", "code": "def has_value(cls, value: int) -> bool:\n                return any(value == item.value for item in cls)", "method_name": "has_value", "docstring_tokens": "True if specified value exists in int enum ; otherwise False ."}
{"idx": "cosqa-train-11995", "doc": "python sqlite table names in database", "code": "def get_table_names(connection):\n\tcursor = connection.cursor()\n\tcursor.execute(\"SELECT name FROM sqlite_master WHERE type == 'table'\")\n\treturn [name for (name,) in cursor]", "method_name": "get_table_names", "docstring_tokens": "Return a list of the table names in the database ."}
{"idx": "cosqa-train-18639", "doc": "how to remove all element from a python dictionary", "code": "def clean_map(obj: Mapping[Any, Any]) -> Mapping[Any, Any]:\n        return {k: v for k, v in obj.items() if v is not None}", "method_name": "clean_map", "docstring_tokens": "Return a new copied dictionary without the keys with None values from the given Mapping object ."}
{"idx": "cosqa-train-11560", "doc": "python parse query string from url", "code": "def parse_query_string(query):\n        result = {}\n    qparts = query.split('&')\n    for item in qparts:\n        key, value = item.split('=')\n        key = key.strip()\n        value = value.strip()\n        result[key] = unquote_plus(value)\n    return result", "method_name": "parse_query_string", "docstring_tokens": "parse_query_string : very simplistic . won t do the right thing with list values"}
{"idx": "cosqa-train-5390", "doc": "python remove element set", "code": "def isolate_element(self, x):\n                members = list(self.members(x))\n        self.delete_set(x)\n        self.union(*(v for v in members if v != x))", "method_name": "isolate_element", "docstring_tokens": "Isolates x from its equivalence class ."}
{"idx": "cosqa-train-10072", "doc": "manhattan distance in python using longitude and latitude", "code": "def _manhattan_distance(vec_a, vec_b):\n        if len(vec_a) != len(vec_b):\n        raise ValueError('len(vec_a) must equal len(vec_b)')\n    return sum(map(lambda a, b: abs(a - b), vec_a, vec_b))", "method_name": "_manhattan_distance", "docstring_tokens": "Return manhattan distance between two lists of numbers ."}
{"idx": "cosqa-train-11759", "doc": "how to read from a file to a list python", "code": "def get_list_from_file(file_name):\n        with open(file_name, mode='r', encoding='utf-8') as f1:\n        lst = f1.readlines()\n    return lst", "method_name": "get_list_from_file", "docstring_tokens": "read the lines from a file into a list"}
{"idx": "cosqa-train-8925", "doc": "dynamically update value in dictionary python", "code": "def update(self, params):\n                dev_info = self.json_state.get('deviceInfo')\n        dev_info.update({k: params[k] for k in params if dev_info.get(k)})", "method_name": "update", "docstring_tokens": "Update the dev_info data from a dictionary ."}
{"idx": "cosqa-train-19838", "doc": "python replace string from right", "code": "def right_replace(string, old, new, count=1):\n        if not string:\n        return string\n    return new.join(string.rsplit(old, count))", "method_name": "right_replace", "docstring_tokens": "Right replaces count occurrences of old with new in string . For example ::"}
{"idx": "cosqa-train-11373", "doc": "how to check if a path is writeable python", "code": "def _writable_dir(path):\n        return os.path.isdir(path) and os.access(path, os.W_OK)", "method_name": "_writable_dir", "docstring_tokens": "Whether path is a directory to which the user has write access ."}
{"idx": "cosqa-train-11142", "doc": "get attribute type in python", "code": "def get_attribute_name_id(attr):\n        return attr.value.id if isinstance(attr.value, ast.Name) else None", "method_name": "get_attribute_name_id", "docstring_tokens": "Return the attribute name identifier"}
{"idx": "cosqa-train-9067", "doc": "get fields of object python", "code": "def object_as_dict(obj):\n        return {c.key: getattr(obj, c.key)\n            for c in inspect(obj).mapper.column_attrs}", "method_name": "object_as_dict", "docstring_tokens": "Turn an SQLAlchemy model into a dict of field names and values ."}
{"idx": "cosqa-train-17371", "doc": "how to fetch one value from one row from mysql query in python", "code": "def fetchvalue(self, sql: str, *args) -> Optional[Any]:\n                row = self.fetchone(sql, *args)\n        if row is None:\n            return None\n        return row[0]", "method_name": "fetchvalue", "docstring_tokens": "Executes SQL ; returns the first value of the first row or None ."}
{"idx": "cosqa-train-6650", "doc": "python flask routes add", "code": "def add_url_rule(self, route, endpoint, handler):\n                self.app.add_url_rule(route, endpoint, handler)", "method_name": "add_url_rule", "docstring_tokens": "Add a new url route ."}
{"idx": "cosqa-train-10946", "doc": "define function arg type and default values python", "code": "def get_default_args(func):\n        args, varargs, keywords, defaults = getargspec_no_self(func)\n    return dict(zip(args[-len(defaults):], defaults))", "method_name": "get_default_args", "docstring_tokens": "returns a dictionary of arg_name : default_values for the input function"}
{"idx": "cosqa-dev-233", "doc": "python image shape detect", "code": "def get_shape(img):\n        if hasattr(img, 'shape'):\n        shape = img.shape\n    else:\n        shape = img.get_data().shape\n    return shape", "method_name": "get_shape", "docstring_tokens": "Return the shape of img ."}
{"idx": "cosqa-train-6306", "doc": "what can iterators be iterated only once in python", "code": "def _fill(self):\n        try:\n      self._head = self._iterable.next()\n    except StopIteration:\n      self._head = None", "method_name": "_fill", "docstring_tokens": "Advance the iterator without returning the old head ."}
{"idx": "cosqa-train-10207", "doc": "remove all characters in string in python", "code": "def drop_bad_characters(text):\n            text = ''.join([c for c in text if c in ALLOWED_CHARS])\n    return text", "method_name": "drop_bad_characters", "docstring_tokens": "Takes a text and drops all non - printable and non - ascii characters and also any whitespace characters that aren t space ."}
{"idx": "cosqa-train-12644", "doc": "python circle in a square bitmap array", "code": "def getBitmap(self):\n                return PlatformManager.getBitmapFromRect(self.x, self.y, self.w, self.h)", "method_name": "getBitmap", "docstring_tokens": "Captures screen area of this region at least the part that is on the screen"}
{"idx": "cosqa-train-12106", "doc": "location of maya python exe", "code": "def setup_environment():\n        osinter = ostool.get_interface()\n    pypath = osinter.get_maya_envpath()\n    for p in sys.path:\n        pypath = os.pathsep.join((pypath, p))\n    os.environ['PYTHONPATH'] = pypath", "method_name": "setup_environment", "docstring_tokens": "Set up neccessary environment variables"}
{"idx": "cosqa-train-19190", "doc": "how to make letters uppercase in python skipping spaces", "code": "def uppercase_chars(string: any) -> str:\n                return ''.join([c if c.isupper() else '' for c in str(string)])", "method_name": "uppercase_chars", "docstring_tokens": "Return all ( and only ) the uppercase chars in the given string ."}
{"idx": "cosqa-train-18016", "doc": "python delete element from set", "code": "def remove_once(gset, elem):\n        remove = getattr(gset, 'remove', None)\n    if remove is not None: remove(elem)\n    else: del gset[elem]\n    return elem", "method_name": "remove_once", "docstring_tokens": "Remove the element from a set lists or dict . >>> L = [ Lucy ] ; S = set ( [ Sky ] ) ; D = { Diamonds : True } ; >>> remove_once ( L Lucy ) ; remove_once ( S Sky ) ; remove_once ( D Diamonds ) ; >>> print L S D [] set ( [] ) {}"}
{"idx": "cosqa-train-13067", "doc": "python get current git branch", "code": "def get_last_commit(git_path=None):\n        if git_path is None: git_path = GIT_PATH\n    line = get_last_commit_line(git_path)\n    revision_id = line.split()[1]\n    return revision_id", "method_name": "get_last_commit", "docstring_tokens": "Get the HEAD commit SHA1 of repository in current dir ."}
{"idx": "cosqa-train-3274", "doc": "how to make a restart button using python", "code": "def do_restart(self, line):\n                self.application.master.Restart(opendnp3.RestartType.COLD, restart_callback)", "method_name": "do_restart", "docstring_tokens": "Request that the Outstation perform a cold restart . Command syntax is : restart"}
{"idx": "cosqa-train-14708", "doc": "tracing python code execution", "code": "def __run(self):\n        sys.settrace(self.globaltrace)\n    self.__run_backup()\n    self.run = self.__run_backup", "method_name": "__run", "docstring_tokens": "Hacked run function which installs the trace ."}
{"idx": "cosqa-train-8874", "doc": "delete pyc files from python script", "code": "def clean(dry_run='n'):\n        file_patterns = ['*.pyc', '*.pyo', '*~']\n    dir_patterns = ['__pycache__']\n    recursive_pattern_delete(project_paths.root, file_patterns, dir_patterns, dry_run=bool(dry_run.lower() == 'y'))", "method_name": "clean", "docstring_tokens": "Wipes compiled and cached python files . To simulate : pynt clean [ dry_run = y ]"}
{"idx": "cosqa-train-10370", "doc": "sleep holding up python", "code": "def test3():\n        import time\n    \n    p = MVisionProcess()\n    p.start()\n    time.sleep(5)\n    p.stop()", "method_name": "test3", "docstring_tokens": "Test the multiprocess"}
{"idx": "cosqa-train-8344", "doc": "traversal in tree in python", "code": "def walk_tree(root):\n        yield root\n\n    for child in root.children:\n        for el in walk_tree(child):\n            yield el", "method_name": "walk_tree", "docstring_tokens": "Pre - order depth - first"}
{"idx": "cosqa-train-19036", "doc": "timing a function call python", "code": "def timeit(func, *args, **kwargs):\n        start_time = time.time()\n    res = func(*args, **kwargs)\n    timing = time.time() - start_time\n    return res, timing", "method_name": "timeit", "docstring_tokens": "Time execution of function . Returns ( res seconds ) ."}
{"idx": "cosqa-train-9090", "doc": "python how to stop playsound", "code": "def stop(self):\n                if self.isPlaying is True:\n            self._execute(\"stop\")\n            self._changePlayingState(False)", "method_name": "stop", "docstring_tokens": "Stops playback"}
{"idx": "cosqa-train-18929", "doc": "python change dictioinary values in place", "code": "def dictlist_replace(dict_list: Iterable[Dict], key: str, value: Any) -> None:\n        for d in dict_list:\n        d[key] = value", "method_name": "dictlist_replace", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d change ( in place ) d [ key ] to value ."}
{"idx": "cosqa-train-10729", "doc": "can i pass instance method as variable python", "code": "def do(self):\n                self.restore_point = self.obj.copy()\n        return self.do_method(self.obj, *self.args)", "method_name": "do", "docstring_tokens": "Set a restore point ( copy the object ) then call the method . : return : obj . do_method ( * args )"}
{"idx": "cosqa-train-12261", "doc": "pickle python read entiere file", "code": "def read_raw(data_path):\n        with open(data_path, 'rb') as f:\n        data = pickle.load(f)\n    return data", "method_name": "read_raw", "docstring_tokens": "Parameters ---------- data_path : str"}
{"idx": "cosqa-train-1879", "doc": "should there be equal no of columns to concanate two df python", "code": "def cross_join(df1, df2):\n        if len(df1) == 0:\n        return df2\n\n    if len(df2) == 0:\n        return df1\n\n            all_columns = pd.Index(list(df1.columns) + list(df2.columns))\n    df1['key'] = 1\n    df2['key'] = 1\n    return pd.merge(df1, df2, on='key').loc[:, all_columns]", "method_name": "cross_join", "docstring_tokens": "Return a dataframe that is a cross between dataframes df1 and df2"}
{"idx": "cosqa-train-10841", "doc": "python flatten deep nested list", "code": "def flatten(nested):\n        flat_return = list()\n\n    def __inner_flat(nested,flat):\n        for i in nested:\n            __inner_flat(i, flat) if isinstance(i, list) else flat.append(i)\n        return flat\n\n    __inner_flat(nested,flat_return)\n\n    return flat_return", "method_name": "flatten", "docstring_tokens": "Return a flatten version of the nested argument"}
{"idx": "cosqa-train-11837", "doc": "how to show a variable amount of precision in python string format", "code": "def indented_show(text, howmany=1):\n                print(StrTemplate.pad_indent(text=text, howmany=howmany))", "method_name": "indented_show", "docstring_tokens": "Print a formatted indented text ."}
{"idx": "cosqa-train-14528", "doc": "python array get element by index with default", "code": "def list_get(l, idx, default=None):\n        try:\n        if l[idx]:\n            return l[idx]\n        else:\n            return default\n    except IndexError:\n        return default", "method_name": "list_get", "docstring_tokens": "Get from a list with an optional default value ."}
{"idx": "cosqa-train-19843", "doc": "check if string is int in python", "code": "def _isint(string):\n        return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)", "method_name": "_isint", "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"}
{"idx": "cosqa-train-5020", "doc": "how to change numpy array to list in python", "code": "def A(*a):\n        return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "method_name": "A", "docstring_tokens": "convert iterable object into numpy array"}
{"idx": "cosqa-train-19098", "doc": "read a file into a set python", "code": "def read_set_from_file(filename: str) -> Set[str]:\n        collection = set()\n    with open(filename, 'r') as file_:\n        for line in file_:\n            collection.add(line.rstrip())\n    return collection", "method_name": "read_set_from_file", "docstring_tokens": "Extract a de - duped collection ( set ) of text from a file . Expected file format is one item per line ."}
{"idx": "cosqa-train-13927", "doc": "python round float to int", "code": "def intround(value):\n        return int(decimal.Decimal.from_float(\n        value).to_integral_value(decimal.ROUND_HALF_EVEN))", "method_name": "intround", "docstring_tokens": "Given a float returns a rounded int . Should give the same result on both Py2 / 3"}
{"idx": "cosqa-train-5607", "doc": "how to write a parser on python", "code": "def __init__(self):\n                        self.parser = argparse.ArgumentParser()\n                self.subparsers = self.parser.add_subparsers()\n                self.parsers = {}", "method_name": "__init__", "docstring_tokens": "__init__ : Performs basic initialisations"}
{"idx": "cosqa-train-15068", "doc": "python dict with keys no value", "code": "def nonull_dict(self):\n                return {k: v for k, v in six.iteritems(self.dict) if v and k != '_codes'}", "method_name": "nonull_dict", "docstring_tokens": "Like dict but does not hold any null values ."}
{"idx": "cosqa-train-11777", "doc": "how to remove blank lines from a text file in python", "code": "def get_stripped_file_lines(filename):\n        try:\n        lines = open(filename).readlines()\n    except FileNotFoundError:\n        fatal(\"Could not open file: {!r}\".format(filename))\n\n    return [line.strip() for line in lines]", "method_name": "get_stripped_file_lines", "docstring_tokens": "Return lines of a file with whitespace removed"}
{"idx": "cosqa-train-7409", "doc": "how to hash a binary file in python", "code": "def generate_hash(filepath):\n        fr = FileReader(filepath)\n    data = fr.read_bin()\n    return _calculate_sha256(data)", "method_name": "generate_hash", "docstring_tokens": "Public function that reads a local file and generates a SHA256 hash digest for it"}
{"idx": "cosqa-train-6732", "doc": "python get function keyword names", "code": "def parse_func_kwarg_keys(func, with_vals=False):\n        sourcecode = get_func_sourcecode(func, strip_docstr=True,\n                                     strip_comments=True)\n    kwkeys = parse_kwarg_keys(sourcecode, with_vals=with_vals)\n        return kwkeys", "method_name": "parse_func_kwarg_keys", "docstring_tokens": "hacky inference of kwargs keys"}
{"idx": "cosqa-train-12054", "doc": "iterate through words in text file python", "code": "def extract_words(lines):\n        for line in lines:\n        for word in re.findall(r\"\\w+\", line):\n            yield word", "method_name": "extract_words", "docstring_tokens": "Extract from the given iterable of lines the list of words ."}
{"idx": "cosqa-train-18846", "doc": "python make a put request to restful endpoint", "code": "def put(self, endpoint: str, **kwargs) -> dict:\n                return self._request('PUT', endpoint, **kwargs)", "method_name": "put", "docstring_tokens": "HTTP PUT operation to API endpoint ."}
{"idx": "cosqa-train-13151", "doc": "python get the id of the current thread", "code": "def threadid(self):\n                current = self.thread.ident\n        main = get_main_thread()\n        if main is None:\n            return current\n        else:\n            return current if current != main.ident else None", "method_name": "threadid", "docstring_tokens": "Current thread ident . If current thread is main thread then it returns None ."}
{"idx": "cosqa-train-4543", "doc": "python function returning a list of all entities is called", "code": "def filtany(entities, **kw):\n    ret = set()\n  for k,v in kw.items():\n    for entity in entities:\n      if getattr(entity, k)() == v:\n        ret.add(entity)\n  return ret", "method_name": "filtany", "docstring_tokens": "Filter a set of entities based on method return . Use keyword arguments . Example : filtmeth ( entities id = 123 ) filtmeth ( entities name = bart )"}
{"idx": "cosqa-train-19579", "doc": "how to flat a list of list python", "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"      return [item for sublist in x for item in sublist]", "method_name": "flatten_list", "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"}
{"idx": "cosqa-train-19307", "doc": "python read yaml to numpy", "code": "def numpy_to_yaml(representer: Representer, data: np.ndarray) -> Sequence[Any]:\n        return representer.represent_sequence(\n        \"!numpy_array\",\n        data.tolist()\n    )", "method_name": "numpy_to_yaml", "docstring_tokens": "Write a numpy array to YAML ."}
{"idx": "cosqa-train-10997", "doc": "discord python get user from id string", "code": "def get_user_by_id(self, id):\n                return self.db_adapter.get_object(self.UserClass, id=id)", "method_name": "get_user_by_id", "docstring_tokens": "Retrieve a User object by ID ."}
{"idx": "cosqa-train-18792", "doc": "list of arbitrary objects to counts in python", "code": "def count(args):\n        counts = defaultdict(int)\n    for arg in args:\n        for item in arg:\n            counts[item] = counts[item] + 1\n    return counts", "method_name": "count", "docstring_tokens": "count occurences in a list of lists >>> count ( [[ a b ] [ a ]] ) defaultdict ( int { a : 2 b : 1 } )"}
{"idx": "cosqa-train-11636", "doc": "how to know queue size in python", "code": "def qsize(self):\n                self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n", "method_name": "qsize", "docstring_tokens": "Return the approximate size of the queue ( not reliable! ) ."}
{"idx": "cosqa-train-12000", "doc": "impute missing values in python", "code": "def impute_data(self,x):\n                imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n        return imp.fit_transform(x)", "method_name": "impute_data", "docstring_tokens": "Imputes data set containing Nan values"}
{"idx": "cosqa-dev-78", "doc": "python dict rank by value", "code": "def revrank_dict(dict, key=lambda t: t[1], as_tuple=False):\n        sorted_list = sorted(dict.items(), key=key, reverse=True)\n    return OrderedDict(sorted_list) if not as_tuple else tuple(sorted_list)", "method_name": "revrank_dict", "docstring_tokens": "Reverse sorts a #dict by a given key optionally returning it as a #tuple . By default the @dict is sorted by it s value ."}
{"idx": "cosqa-train-13276", "doc": "generate short unique id python", "code": "def generate_unique_host_id():\n        host = \".\".join(reversed(socket.gethostname().split(\".\")))\n    pid = os.getpid()\n    return \"%s.%d\" % (host, pid)", "method_name": "generate_unique_host_id", "docstring_tokens": "Generate a unique ID that is somewhat guaranteed to be unique among all instances running at the same time ."}
{"idx": "cosqa-train-11501", "doc": "python numpy inverse of the matrix", "code": "def MatrixInverse(a, adj):\n        return np.linalg.inv(a if not adj else _adjoint(a)),", "method_name": "MatrixInverse", "docstring_tokens": "Matrix inversion op ."}
{"idx": "cosqa-train-11153", "doc": "python how to mix backslash and forward slashes in path", "code": "def norm_slash(name):\n        if isinstance(name, str):\n        return name.replace('/', \"\\\\\") if not is_case_sensitive() else name\n    else:\n        return name.replace(b'/', b\"\\\\\") if not is_case_sensitive() else name", "method_name": "norm_slash", "docstring_tokens": "Normalize path slashes ."}
{"idx": "cosqa-train-14436", "doc": "reduce functon not defined in python", "code": "def compose(func_list):\n        def f(G, bim):\n        for func in func_list:\n            G, bim = func(G, bim)\n        return G, bim\n\n    return f", "method_name": "compose", "docstring_tokens": "composion of preprocessing functions"}
{"idx": "cosqa-train-19789", "doc": "python detect key press linux", "code": "def _kbhit_unix() -> bool:\n        dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []", "method_name": "_kbhit_unix", "docstring_tokens": "Under UNIX : is a keystroke available?"}
{"idx": "cosqa-train-17572", "doc": "how to generate random binary tree in python", "code": "def getRandomBinaryTreeLeafNode(binaryTree):\n        if binaryTree.internal == True:\n        if random.random() > 0.5:\n            return getRandomBinaryTreeLeafNode(binaryTree.left)\n        else:\n            return getRandomBinaryTreeLeafNode(binaryTree.right)\n    else:\n        return binaryTree", "method_name": "getRandomBinaryTreeLeafNode", "docstring_tokens": "Get random binary tree node ."}
{"idx": "cosqa-train-2445", "doc": "python get epoch milis from datetime", "code": "def _dt_to_epoch(dt):\n                try:\n            epoch = dt.timestamp()\n        except AttributeError:              epoch = (dt - datetime(1970, 1, 1)).total_seconds()\n        return epoch", "method_name": "_dt_to_epoch", "docstring_tokens": "Convert datetime to epoch seconds ."}
{"idx": "cosqa-train-15289", "doc": "python get environ user windows", "code": "def get_user_name():\n        if sys.platform == 'win32':\n                user = os.getenv('USERNAME')\n    else:\n        user = os.getenv('LOGNAME')\n\n    return user", "method_name": "get_user_name", "docstring_tokens": "Get user name provide by operating system"}
{"idx": "cosqa-train-9986", "doc": "iterator is past the end python", "code": "def __next__(self):\n        res = self._head\n    self._fill()\n    if res is None:\n      raise StopIteration()\n    return res", "method_name": "__next__", "docstring_tokens": "Pop the head off the iterator and return it ."}
{"idx": "cosqa-train-9114", "doc": "python if file not exist then creat", "code": "def check_create_folder(filename):\n        os.makedirs(os.path.dirname(filename), exist_ok=True)", "method_name": "check_create_folder", "docstring_tokens": "Check if the folder exisits . If not create the folder"}
{"idx": "cosqa-train-18440", "doc": "python howe to tell if path passed in is absolute or relative", "code": "def is_relative_url(url):\n        if url.startswith(\"        return None\n    if url.find(\"://\") > 0 or url.startswith(\"//\"):\n                return False\n    return True", "method_name": "is_relative_url", "docstring_tokens": "simple method to determine if a url is relative or absolute"}
{"idx": "cosqa-train-16521", "doc": "maker a string lowercase pythong", "code": "def to_snake_case(text):\n        s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()", "method_name": "to_snake_case", "docstring_tokens": "Convert to snake case ."}
{"idx": "cosqa-train-9880", "doc": "python sys stdout write new line", "code": "def println(msg):\n        sys.stdout.write(msg)\n    sys.stdout.flush()\n    sys.stdout.write('\\x08' * len(msg))\n    sys.stdout.flush()", "method_name": "println", "docstring_tokens": "Convenience function to print messages on a single line in the terminal"}
{"idx": "cosqa-train-11091", "doc": "python how to create a iterable", "code": "def force_iterable(f):\n        def wrapper(*args, **kwargs):\n        r = f(*args, **kwargs)\n        if hasattr(r, '__iter__'):\n            return r\n        else:\n            return [r]\n    return wrapper", "method_name": "force_iterable", "docstring_tokens": "Will make any functions return an iterable objects by wrapping its result in a list ."}
{"idx": "cosqa-train-9907", "doc": "how to use python function in tensorflow", "code": "def _float_feature(value):\n    if not isinstance(value, list):\n    value = [value]\n  return tf.train.Feature(float_list=tf.train.FloatList(value=value))", "method_name": "_float_feature", "docstring_tokens": "Wrapper for inserting float features into Example proto ."}
{"idx": "cosqa-train-11127", "doc": "python how to get range of array with positive values numpy", "code": "def _interval_to_bound_points(array):\n        array_boundaries = np.array([x.left for x in array])\n    array_boundaries = np.concatenate(\n        (array_boundaries, np.array([array[-1].right])))\n\n    return array_boundaries", "method_name": "_interval_to_bound_points", "docstring_tokens": "Helper function which returns an array with the Intervals boundaries ."}
{"idx": "cosqa-train-10271", "doc": "python 3 a build string from iterable", "code": "def commajoin_as_strings(iterable):\n        return _(u',').join((six.text_type(i) for i in iterable))", "method_name": "commajoin_as_strings", "docstring_tokens": "Join the given iterable with"}
{"idx": "cosqa-train-12615", "doc": "unchecking a radio button python", "code": "def checkbox_uncheck(self, force_check=False):\n                if self.get_attribute('checked'):\n            self.click(force_click=force_check)", "method_name": "checkbox_uncheck", "docstring_tokens": "Wrapper to uncheck a checkbox"}
{"idx": "cosqa-train-12906", "doc": "python expected type sized", "code": "def _requiredSize(shape, dtype):\n\treturn math.floor(np.prod(np.asarray(shape, dtype=np.uint64)) * np.dtype(dtype).itemsize)", "method_name": "_requiredSize", "docstring_tokens": "Determines the number of bytes required to store a NumPy array with the specified shape and datatype ."}
{"idx": "cosqa-train-18559", "doc": "python load csv to numpy array", "code": "def csv_to_numpy(string_like, dtype=None):          stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')", "method_name": "csv_to_numpy", "docstring_tokens": "Convert a CSV object to a numpy array ."}
{"idx": "cosqa-dev-141", "doc": "python remove element from list time complexity", "code": "def remove_elements(target, indices):\n        copied = list(target)\n\n    for index in reversed(indices):\n        del copied[index]\n    return copied", "method_name": "remove_elements", "docstring_tokens": "Remove multiple elements from a list and return result . This implementation is faster than the alternative below . Also note the creation of a new list to avoid altering the original . We don t have any current use for the original intact list but may in the future ..."}
{"idx": "cosqa-train-9520", "doc": "python property by string name", "code": "def get_propety_by_name(pif, name):\n        warn(\"This method has been deprecated in favor of get_property_by_name\")\n    return next((x for x in pif.properties if x.name == name), None)", "method_name": "get_propety_by_name", "docstring_tokens": "Get a property by name"}
{"idx": "cosqa-train-7816", "doc": "index of an entry in a list python", "code": "def is_in(self, search_list, pair):\n                index = -1\n        for nr, i in enumerate(search_list):\n            if(np.all(i == pair)):\n                return nr\n        return index", "method_name": "is_in", "docstring_tokens": "If pair is in search_list return the index . Otherwise return - 1"}
{"idx": "cosqa-train-4764", "doc": "python how to determine if an iterable is iterable", "code": "def _is_iterable(item):\n        return isinstance(item, collections.Iterable) and not isinstance(item, six.string_types)", "method_name": "_is_iterable", "docstring_tokens": "Checks if an item is iterable ( list tuple generator ) but not string"}
{"idx": "cosqa-train-18858", "doc": "python how to create date from string", "code": "def get_from_gnucash26_date(date_str: str) -> date:\n        date_format = \"%Y%m%d\"\n    result = datetime.strptime(date_str, date_format).date()\n    return result", "method_name": "get_from_gnucash26_date", "docstring_tokens": "Creates a datetime from GnuCash 2 . 6 date string"}
{"idx": "cosqa-train-11312", "doc": "how to append a line in a file in the middle of file in python", "code": "def prepend_line(filepath, line):\n        with open(filepath) as f:\n        lines = f.readlines()\n\n    lines.insert(0, line)\n\n    with open(filepath, 'w') as f:\n        f.writelines(lines)", "method_name": "prepend_line", "docstring_tokens": "Rewrite a file adding a line to its beginning ."}
{"idx": "cosqa-train-11876", "doc": "how to split a string by every character in python", "code": "def _split(string, splitters):\n        part = ''\n    for character in string:\n        if character in splitters:\n            yield part\n            part = ''\n        else:\n            part += character\n    yield part", "method_name": "_split", "docstring_tokens": "Splits a string into parts at multiple characters"}
{"idx": "cosqa-train-19520", "doc": "python get index of element each time it appears in list", "code": "def index(self, item):\n                for i, x in enumerate(self.iter()):\n            if x == item:\n                return i\n        return None", "method_name": "index", "docstring_tokens": "Not recommended for use on large lists due to time complexity but it works"}
{"idx": "cosqa-train-4792", "doc": "python how to make dot character", "code": "def _dotify(cls, data):\n        return ''.join(char if char in cls.PRINTABLE_DATA else '.' for char in data)", "method_name": "_dotify", "docstring_tokens": "Add dots ."}
{"idx": "cosqa-train-15375", "doc": "python heap top element", "code": "def pop(h):\n        n = h.size() - 1\n    h.swap(0, n)\n    down(h, 0, n)\n    return h.pop()", "method_name": "pop", "docstring_tokens": "Pop the heap value from the heap ."}
{"idx": "cosqa-train-5644", "doc": "in python, how to print strings in different colours", "code": "def cprint(string, fg=None, bg=None, end='\\n', target=sys.stdout):\n        _color_manager.set_color(fg, bg)\n    target.write(string + end)\n    target.flush()      _color_manager.set_defaults()", "method_name": "cprint", "docstring_tokens": "Print a colored string to the target handle ."}
{"idx": "cosqa-train-10096", "doc": "python yield unsupported operand type(s)", "code": "def visit_BinOp(self, node):\n                args = [self.visit(arg) for arg in (node.left, node.right)]\n        return list({frozenset.union(*x) for x in itertools.product(*args)})", "method_name": "visit_BinOp", "docstring_tokens": "Return type depend from both operand of the binary operation ."}
{"idx": "cosqa-train-7703", "doc": "how to sort files by filename python", "code": "def sort_filenames(filenames):\n        basenames = [os.path.basename(x) for x in filenames]\n    indexes = [i[0] for i in sorted(enumerate(basenames), key=lambda x:x[1])]\n    return [filenames[x] for x in indexes]", "method_name": "sort_filenames", "docstring_tokens": "sort a list of files by filename only ignoring the directory names"}
{"idx": "cosqa-train-7165", "doc": "how to change the axis range in a plot in python for subplots", "code": "def set_xlimits(self, row, column, min=None, max=None):\n                subplot = self.get_subplot_at(row, column)\n        subplot.set_xlimits(min, max)", "method_name": "set_xlimits", "docstring_tokens": "Set x - axis limits of a subplot ."}
{"idx": "cosqa-train-5794", "doc": "python view vector to asimuth elevation", "code": "def world_to_view(v):\n        return v.x * config.scale_x, v.y * config.scale_y", "method_name": "world_to_view", "docstring_tokens": "world coords to view coords ; v an eu . Vector2 returns ( float float )"}
{"idx": "cosqa-train-7664", "doc": "python sort data by variable", "code": "def sort_data(x, y):\n        xy = sorted(zip(x, y))\n    x, y = zip(*xy)\n    return x, y", "method_name": "sort_data", "docstring_tokens": "Sort the data ."}
{"idx": "cosqa-train-10854", "doc": "compute the middle index in list python", "code": "def bisect_index(a, x):\n        i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError", "method_name": "bisect_index", "docstring_tokens": "Find the leftmost index of an element in a list using binary search ."}
{"idx": "cosqa-train-6992", "doc": "python josn dump to file", "code": "def save_notebook(work_notebook, write_file):\n        with open(write_file, 'w') as out_nb:\n        json.dump(work_notebook, out_nb, indent=2)", "method_name": "save_notebook", "docstring_tokens": "Saves the Jupyter work_notebook to write_file"}
{"idx": "cosqa-train-13856", "doc": "python remove condition apply to dict", "code": "def _remove_dict_keys_with_value(dict_, val):\n    return {k: v for k, v in dict_.items() if v is not val}", "method_name": "_remove_dict_keys_with_value", "docstring_tokens": "Removes dict keys which have have self as value ."}
{"idx": "cosqa-train-11770", "doc": "python remove directory tree if no files", "code": "def clean_out_dir(directory):\n        if not isinstance(directory, path):\n        directory = path(directory)\n    for file_path in directory.files():\n        file_path.remove()\n    for dir_path in directory.dirs():\n        dir_path.rmtree()", "method_name": "clean_out_dir", "docstring_tokens": "Delete all the files and subdirectories in a directory ."}
{"idx": "cosqa-train-13922", "doc": "how to pop a node off a stack python", "code": "def push(h, x):\n        h.push(x)\n    up(h, h.size()-1)", "method_name": "push", "docstring_tokens": "Push a new value into heap ."}
{"idx": "cosqa-train-15821", "doc": "python open file with exclusive access permissions", "code": "def chmod_add_excute(filename):\n                st = os.stat(filename)\n        os.chmod(filename, st.st_mode | stat.S_IEXEC)", "method_name": "chmod_add_excute", "docstring_tokens": "Adds execute permission to file . : param filename : : return :"}
{"idx": "cosqa-train-11046", "doc": "python gevent combine multiprocessing", "code": "def fetch_event(urls):\n        rs = (grequests.get(u) for u in urls)\n    return [content.json() for content in grequests.map(rs)]", "method_name": "fetch_event", "docstring_tokens": "This parallel fetcher uses gevent one uses gevent"}
{"idx": "cosqa-train-6681", "doc": "create copy that doesn't alter original python", "code": "def copy(obj):\n    def copy(self):\n                from copy import deepcopy\n\n        return deepcopy(self)\n    obj.copy = copy\n    return obj", "method_name": "copy", "docstring_tokens": ""}
{"idx": "cosqa-train-16570", "doc": "remove trailing whitespace in python", "code": "def clean(s):\n    lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)", "method_name": "clean", "docstring_tokens": "Removes trailing whitespace on each line ."}
{"idx": "cosqa-train-6463", "doc": "python default menuitem select", "code": "def get_python(self):\n                if self.multiselect:\n            return super(MultiSelectField, self).get_python()\n\n        return self._get()", "method_name": "get_python", "docstring_tokens": "Only return cursor instance if configured for multiselect"}
{"idx": "cosqa-dev-408", "doc": "get sort indexes in a list python", "code": "def _index_ordering(redshift_list):\n                redshift_list = np.array(redshift_list)\n        sort_index = np.argsort(redshift_list)\n        return sort_index", "method_name": "_index_ordering", "docstring_tokens": ""}
{"idx": "cosqa-train-14103", "doc": "how to start a new line in python gui", "code": "def go_to_new_line(self):\n                self.stdkey_end(False, False)\n        self.insert_text(self.get_line_separator())", "method_name": "go_to_new_line", "docstring_tokens": "Go to the end of the current line and create a new line"}
{"idx": "cosqa-train-15982", "doc": "how to get tuple of colors in image python", "code": "def rgba_bytes_tuple(self, x):\n                return tuple(int(u*255.9999) for u in self.rgba_floats_tuple(x))", "method_name": "rgba_bytes_tuple", "docstring_tokens": "Provides the color corresponding to value x in the form of a tuple ( R G B A ) with int values between 0 and 255 ."}
{"idx": "cosqa-train-12120", "doc": "make datetime aware python", "code": "def date_to_datetime(x):\n        if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x", "method_name": "date_to_datetime", "docstring_tokens": "Convert a date into a datetime"}
{"idx": "cosqa-train-8617", "doc": "python dict drop empty", "code": "def purge_dict(idict):\n        odict = {}\n    for key, val in idict.items():\n        if is_null(val):\n            continue\n        odict[key] = val\n    return odict", "method_name": "purge_dict", "docstring_tokens": "Remove null items from a dictionary"}
{"idx": "cosqa-train-7344", "doc": "python pretty print without sort", "code": "def pprint(obj, verbose=False, max_width=79, newline='\\n'):\n        printer = RepresentationPrinter(sys.stdout, verbose, max_width, newline)\n    printer.pretty(obj)\n    printer.flush()\n    sys.stdout.write(newline)\n    sys.stdout.flush()", "method_name": "pprint", "docstring_tokens": "Like pretty but print to stdout ."}
{"idx": "cosqa-train-12579", "doc": "python check if interactive", "code": "def determine_interactive(self):\n\t\ttry:\n\t\t\tif not sys.stdout.isatty() or os.getpgrp() != os.tcgetpgrp(sys.stdout.fileno()):\n\t\t\t\tself.interactive = 0\n\t\t\t\treturn False\n\t\texcept Exception:\n\t\t\tself.interactive = 0\n\t\t\treturn False\n\t\tif self.interactive == 0:\n\t\t\treturn False\n\t\treturn True", "method_name": "determine_interactive", "docstring_tokens": "Determine whether we re in an interactive shell . Sets interactivity off if appropriate . cf http : // stackoverflow . com / questions / 24861351 / how - to - detect - if - python - script - is - being - run - as - a - background - process"}
{"idx": "cosqa-train-13747", "doc": "python pid determine existence", "code": "def pid_exists(pid):\n        try:\n        os.kill(pid, 0)\n    except OSError as exc:\n        return exc.errno == errno.EPERM\n    else:\n        return True", "method_name": "pid_exists", "docstring_tokens": "Determines if a system process identifer exists in process table ."}
{"idx": "cosqa-train-9532", "doc": "python pymongo insert without duplicatte", "code": "def insert_one(self, mongo_collection, doc, mongo_db=None, **kwargs):\n                collection = self.get_collection(mongo_collection, mongo_db=mongo_db)\n\n        return collection.insert_one(doc, **kwargs)", "method_name": "insert_one", "docstring_tokens": "Inserts a single document into a mongo collection https : // api . mongodb . com / python / current / api / pymongo / collection . html#pymongo . collection . Collection . insert_one"}
{"idx": "cosqa-train-13962", "doc": "how to read json files with multiple object python", "code": "def _read_json_file(self, json_file):\n                self.log.debug(\"Reading '%s' JSON file...\" % json_file)\n\n        with open(json_file, 'r') as f:\n            return json.load(f, object_pairs_hook=OrderedDict)", "method_name": "_read_json_file", "docstring_tokens": "Helper function to read JSON file as OrderedDict"}
{"idx": "cosqa-train-6510", "doc": "python discord leave voice channel", "code": "async def join(self, ctx, *, channel: discord.VoiceChannel):\n                if ctx.voice_client is not None:\n            return await ctx.voice_client.move_to(channel)\n\n        await channel.connect()", "method_name": "join", "docstring_tokens": "Joins a voice channel"}
{"idx": "cosqa-train-9993", "doc": "python unittest make tests discoverable", "code": "def test():\n        import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)", "method_name": "test", "docstring_tokens": "Run the unit tests ."}
{"idx": "cosqa-train-7967", "doc": "multiline text send message python", "code": "async def _send_plain_text(self, request: Request, stack: Stack):\n                await self._send_text(request, stack, None)", "method_name": "_send_plain_text", "docstring_tokens": "Sends plain text using _send_text () ."}
{"idx": "cosqa-train-6837", "doc": "extract integers from string in python", "code": "def get_numbers(s):\n        result = map(int, re.findall(r'[0-9]+', unicode(s)))\n    return result + [1] * (2 - len(result))", "method_name": "get_numbers", "docstring_tokens": "Extracts all integers from a string an return them in a list"}
{"idx": "cosqa-train-14143", "doc": "python take a string after the title", "code": "def _format_title_string(self, title_string):\n                return self._title_string_format_text_tag(title_string.replace(self.icy_tokkens[0], self.icy_title_prefix))", "method_name": "_format_title_string", "docstring_tokens": "format mpv s title"}
{"idx": "cosqa-dev-130", "doc": "how to randomly select rows in ndarray in python", "code": "def downsample(array, k):\n        length = array.shape[0]\n    indices = random.sample(xrange(length), k)\n    return array[indices]", "method_name": "downsample", "docstring_tokens": "Choose k random elements of array ."}
{"idx": "cosqa-train-13902", "doc": "how to open a file with a path in python", "code": "def get_file_string(filepath):\n        with open(os.path.abspath(filepath)) as f:\n        return f.read()", "method_name": "get_file_string", "docstring_tokens": "Get string from file ."}
{"idx": "cosqa-dev-123", "doc": "python count distance between two vectors", "code": "def distance(vec1, vec2):\n                if isinstance(vec1, Vector2) \\\n                and isinstance(vec2, Vector2):\n            dist_vec = vec2 - vec1\n            return dist_vec.length()\n        else:\n            raise TypeError(\"vec1 and vec2 must be Vector2's\")", "method_name": "distance", "docstring_tokens": "Calculate the distance between two Vectors"}
{"idx": "cosqa-train-10937", "doc": "python get dimensions of list", "code": "def get_dimension_array(array):\n        if all(isinstance(el, list) for el in array):\n        result = [len(array), len(max([x for x in array], key=len,))]\n\n        else:\n        result = [len(array), 1]\n\n    return result", "method_name": "get_dimension_array", "docstring_tokens": "Get dimension of an array getting the number of rows and the max num of columns ."}
{"idx": "cosqa-train-6627", "doc": "python filter lowpass minmum cutoff frequency", "code": "def fft_bandpassfilter(data, fs, lowcut, highcut):\n        fft = np.fft.fft(data)\n                bp = fft.copy()\n\n                    bp *= fft.dot(fft) / bp.dot(bp)\n\n        ibp = 12 * np.fft.ifft(bp)\n    return ibp", "method_name": "fft_bandpassfilter", "docstring_tokens": "http : // www . swharden . com / blog / 2009 - 01 - 21 - signal - filtering - with - python / #comment - 16801"}
{"idx": "cosqa-train-12362", "doc": "python 3, seperate a string into a list at comma", "code": "def comma_delimited_to_list(list_param):\n        if isinstance(list_param, list):\n        return list_param\n    if isinstance(list_param, str):\n        return list_param.split(',')\n    else:\n        return []", "method_name": "comma_delimited_to_list", "docstring_tokens": "Convert comma - delimited list / string into a list of strings"}
{"idx": "cosqa-train-19381", "doc": "how to delete an element in a python dictionary", "code": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None:\n        for d in dict_list:\n        d.pop(key, None)", "method_name": "dictlist_wipe_key", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d delete d [ key ] if it exists ."}
{"idx": "cosqa-train-9187", "doc": "how know if the box was selected in checkbox in python", "code": "def set_value(self, value):\n                if value:\n            self.setChecked(Qt.Checked)\n        else:\n            self.setChecked(Qt.Unchecked)", "method_name": "set_value", "docstring_tokens": "Set value of the checkbox ."}
{"idx": "cosqa-train-10404", "doc": "standard scalar function in python", "code": "def Softsign(a):\n        return np.divide(a, np.add(np.abs(a), 1)),", "method_name": "Softsign", "docstring_tokens": "Softsign op ."}
{"idx": "cosqa-train-9537", "doc": "python random gaussian distribution noise", "code": "def rlognormal(mu, tau, size=None):\n        return np.random.lognormal(mu, np.sqrt(1. / tau), size)", "method_name": "rlognormal", "docstring_tokens": "Return random lognormal variates ."}
{"idx": "cosqa-train-12390", "doc": "return the number of numeric attributes in python", "code": "def __len__(self):\n\t\treturn len([i for i in (set(dir(self)) - self._STANDARD_ATTRS) if i[0] != '_'])", "method_name": "__len__", "docstring_tokens": "Get a list of the public data attributes ."}
{"idx": "cosqa-train-7322", "doc": "python pil camera capture", "code": "def read(self):\n                stream = BytesIO()\n        self.cam.capture(stream, format='png')\n                stream.seek(0)\n        return Image.open(stream)", "method_name": "read", "docstring_tokens": "https : // picamera . readthedocs . io / en / release - 1 . 13 / recipes1 . html#capturing - to - a - pil - image"}
{"idx": "cosqa-train-12959", "doc": "python flask create cookie expiration", "code": "def logout(cache):\n        cache.set(flask.session['auth0_key'], None)\n    flask.session.clear()\n    return True", "method_name": "logout", "docstring_tokens": "Logs out the current session by removing it from the cache . This is expected to only occur when a session has"}
{"idx": "cosqa-train-11983", "doc": "python sqlalchemy model *", "code": "def save(self):\n                self.session.add(self)\n        self.session.flush()\n        return self", "method_name": "save", "docstring_tokens": "Saves the updated model to the current entity db ."}
{"idx": "cosqa-train-636", "doc": "python how to move to next command in for loop", "code": "def do_next(self, args):\n                self._do_print_from_last_cmd = True\n        self._interp.step_over()\n        return True", "method_name": "do_next", "docstring_tokens": "Step over the next statement"}
{"idx": "cosqa-train-10526", "doc": "python check if object is a char", "code": "def is_string(obj):\n        if PYTHON3:\n        str_type = (bytes, str)\n    else:\n        str_type = (bytes, str, unicode)\n    return isinstance(obj, str_type)", "method_name": "is_string", "docstring_tokens": "Is this a string ."}
{"idx": "cosqa-train-7078", "doc": "how to achieve logarithmic complexity in python", "code": "def log_loss(preds, labels):\n        log_likelihood = np.sum(labels * np.log(preds)) / len(preds)\n    return -log_likelihood", "method_name": "log_loss", "docstring_tokens": "Logarithmic loss with non - necessarily - binary labels ."}
{"idx": "cosqa-train-4971", "doc": "python listbox scrollbar not tk", "code": "def __init__(self, master=None, compound=tk.RIGHT, autohidescrollbar=True, **kwargs):\n                ttk.Frame.__init__(self, master)\n        self.columnconfigure(1, weight=1)\n        self.rowconfigure(0, weight=1)\n        self.listbox = tk.Listbox(self, **kwargs)\n        if autohidescrollbar:\n            self.scrollbar = AutoHideScrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview)\n        else:\n            self.scrollbar = ttk.Scrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview)\n        self.config_listbox(yscrollcommand=self.scrollbar.set)\n        if compound is not tk.LEFT and compound is not tk.RIGHT:\n            raise ValueError(\"Invalid compound value passed: {0}\".format(compound))\n        self.__compound = compound\n        self._grid_widgets()", "method_name": "__init__", "docstring_tokens": "Create a Listbox with a vertical scrollbar ."}
{"idx": "cosqa-train-18815", "doc": "identify the most common number in an array python", "code": "def most_significant_bit(lst: np.ndarray) -> int:\n        return np.argwhere(np.asarray(lst) == 1)[0][0]", "method_name": "most_significant_bit", "docstring_tokens": "A helper function that finds the position of the most significant bit in a 1darray of 1s and 0s i . e . the first position where a 1 appears reading left to right ."}
{"idx": "cosqa-train-8090", "doc": "pull multiple values to make table python", "code": "def _tab(content):\n        response = _data_frame(content).to_csv(index=False,sep='\\t')\n    return response", "method_name": "_tab", "docstring_tokens": "Helper funcation that converts text - based get response to tab separated values for additional manipulation ."}
{"idx": "cosqa-train-10324", "doc": "python adjust data to normal distribution", "code": "def normalize(data):\n        out_data = data.copy()\n\n    for i, sample in enumerate(out_data):\n        out_data[i] /= sum(out_data[i])\n\n    return out_data", "method_name": "normalize", "docstring_tokens": "Normalize the data to be in the [ 0 1 ] range ."}
{"idx": "cosqa-train-17806", "doc": "python check if float has no floating points", "code": "def is_finite(value: Any) -> bool:\n        return isinstance(value, int) or (isinstance(value, float) and isfinite(value))", "method_name": "is_finite", "docstring_tokens": "Return true if a value is a finite number ."}
{"idx": "cosqa-train-18378", "doc": "string remove the last blank python", "code": "def remove_blank_lines(string):\n        return \"\\n\".join(line\n                     for line in string.split(\"\\n\")\n                     if len(line.strip()))", "method_name": "remove_blank_lines", "docstring_tokens": "Removes all blank lines in @string"}
{"idx": "cosqa-train-15422", "doc": "python how to display object attributes", "code": "def _repr(obj):\n        vals = \", \".join(\"{}={!r}\".format(\n        name, getattr(obj, name)) for name in obj._attribs)\n    if vals:\n        t = \"{}(name={}, {})\".format(obj.__class__.__name__, obj.name, vals)\n    else:\n        t = \"{}(name={})\".format(obj.__class__.__name__, obj.name)\n    return t", "method_name": "_repr", "docstring_tokens": "Show the received object as precise as possible ."}
{"idx": "cosqa-train-19985", "doc": "determine if a list of numbers contains duplicates python", "code": "def find_duplicates(l: list) -> set:\n        return set([x for x in l if l.count(x) > 1])", "method_name": "find_duplicates", "docstring_tokens": "Return the duplicates in a list ."}
{"idx": "cosqa-train-12927", "doc": "python figure add title label size", "code": "def label_saves(name):\n        plt.legend(loc=0)\n    plt.ylim([0, 1.025])\n    plt.xlabel('$U/D$', fontsize=20)\n    plt.ylabel('$Z$', fontsize=20)\n    plt.savefig(name, dpi=300, format='png',\n            transparent=False, bbox_inches='tight', pad_inches=0.05)", "method_name": "label_saves", "docstring_tokens": "Labels plots and saves file"}
{"idx": "cosqa-train-19204", "doc": "python networkx longest path directed acyclic graph", "code": "def dag_longest_path(graph, source, target):\n        if source == target:\n        return [source]\n    allpaths = nx.all_simple_paths(graph, source, target)\n    longest_path = []\n    for l in allpaths:\n        if len(l) > len(longest_path):\n            longest_path = l\n    return longest_path", "method_name": "dag_longest_path", "docstring_tokens": "Finds the longest path in a dag between two nodes"}
{"idx": "cosqa-train-14117", "doc": "how to take list as input in python seperated with spaces", "code": "def itemlist(item, sep, suppress_trailing=True):\n        return condense(item + ZeroOrMore(addspace(sep + item)) + Optional(sep.suppress() if suppress_trailing else sep))", "method_name": "itemlist", "docstring_tokens": "Create a list of items seperated by seps ."}
{"idx": "cosqa-train-12036", "doc": "is a list in python an array", "code": "def to_list(self):\n                return [[int(self.table.cell_values[0][1]), int(self.table.cell_values[0][2])],\n                [int(self.table.cell_values[1][1]), int(self.table.cell_values[1][2])]]", "method_name": "to_list", "docstring_tokens": "Convert this confusion matrix into a 2x2 plain list of values ."}
{"idx": "cosqa-train-10603", "doc": "python cosine similarity of two vectors", "code": "def cross_v2(vec1, vec2):\n        return vec1.y * vec2.x - vec1.x * vec2.y", "method_name": "cross_v2", "docstring_tokens": "Return the crossproduct of the two vectors as a Vec2 . Cross product doesn t really make sense in 2D but return the Z component of the 3d result ."}
{"idx": "cosqa-train-13884", "doc": "how to model a sphere python", "code": "def Fsphere(q, R):\n        return 4 * np.pi / q ** 3 * (np.sin(q * R) - q * R * np.cos(q * R))", "method_name": "Fsphere", "docstring_tokens": "Scattering form - factor amplitude of a sphere normalized to F ( q = 0 ) = V"}
{"idx": "cosqa-train-13567", "doc": "how to check paths in python", "code": "def is_readable_dir(path):\n    return os.path.isdir(path) and os.access(path, os.R_OK) and os.access(path, os.X_OK)", "method_name": "is_readable_dir", "docstring_tokens": "Returns whether a path names an existing directory we can list and read files from ."}
{"idx": "cosqa-train-9910", "doc": "python test truth value of list", "code": "def assert_exactly_one_true(bool_list):\n        assert isinstance(bool_list, list)\n    counter = 0\n    for item in bool_list:\n        if item:\n            counter += 1\n    return counter == 1", "method_name": "assert_exactly_one_true", "docstring_tokens": "This method asserts that only one value of the provided list is True ."}
{"idx": "cosqa-train-3556", "doc": "python string value of enum", "code": "def EnumValueName(self, enum, value):\n        return self.enum_types_by_name[enum].values_by_number[value].name", "method_name": "EnumValueName", "docstring_tokens": "Returns the string name of an enum value ."}
{"idx": "cosqa-train-6407", "doc": "python create null pointer with ctypes", "code": "def POINTER(obj):\n        p = ctypes.POINTER(obj)\n    if not isinstance(p.from_param, classmethod):\n        def from_param(cls, x):\n            if x is None:\n                return cls()\n            else:\n                return x\n        p.from_param = classmethod(from_param)\n\n    return p", "method_name": "POINTER", "docstring_tokens": "Create ctypes pointer to object ."}
{"idx": "cosqa-train-11407", "doc": "python md5 hash string", "code": "def md5_string(s):\n        m = hashlib.md5()\n    m.update(s)\n    return str(m.hexdigest())", "method_name": "md5_string", "docstring_tokens": "Shortcut to create md5 hash : param s : : return :"}
{"idx": "cosqa-train-11151", "doc": "python how to match dictionarys", "code": "def intersect(d1, d2):\n        return dict((k, d1[k]) for k in d1 if k in d2 and d1[k] == d2[k])", "method_name": "intersect", "docstring_tokens": "Intersect dictionaries d1 and d2 by key * and * value ."}
{"idx": "cosqa-train-10325", "doc": "select elements from a list, then delete these elements in the original list python", "code": "def remove_elements(target, indices):\n        copied = list(target)\n\n    for index in reversed(indices):\n        del copied[index]\n    return copied", "method_name": "remove_elements", "docstring_tokens": "Remove multiple elements from a list and return result . This implementation is faster than the alternative below . Also note the creation of a new list to avoid altering the original . We don t have any current use for the original intact list but may in the future ..."}
{"idx": "cosqa-train-8092", "doc": "pybool to c++ python 3", "code": "def convertToBool():\n        if not OPTIONS.strictBool.value:\n        return []\n\n    REQUIRES.add('strictbool.asm')\n\n    result = []\n    result.append('pop af')\n    result.append('call __NORMALIZE_BOOLEAN')\n    result.append('push af')\n\n    return result", "method_name": "convertToBool", "docstring_tokens": "Convert a byte value to boolean ( 0 or 1 ) if the global flag strictBool is True"}
{"idx": "cosqa-train-11296", "doc": "how to add a ? in python url", "code": "def append_query_parameter(url, parameters, ignore_if_exists=True):\n        if ignore_if_exists:\n        for key in parameters.keys():\n            if key + \"=\" in url:\n                del parameters[key]\n    parameters_str = \"&\".join(k + \"=\" + v for k, v in parameters.items())\n    append_token = \"&\" if \"?\" in url else \"?\"\n    return url + append_token + parameters_str", "method_name": "append_query_parameter", "docstring_tokens": "quick and dirty appending of query parameters to a url"}
{"idx": "cosqa-train-13226", "doc": "python how to check whether the process with pid exist", "code": "def pid_exists(pid):\n        try:\n        os.kill(pid, 0)\n    except OSError as exc:\n        return exc.errno == errno.EPERM\n    else:\n        return True", "method_name": "pid_exists", "docstring_tokens": "Determines if a system process identifer exists in process table ."}
{"idx": "cosqa-train-11339", "doc": "how to cehck if somethign is a constant python", "code": "def is_static(*p):\n        return all(is_CONST(x) or\n               is_number(x) or\n               is_const(x)\n               for x in p)", "method_name": "is_static", "docstring_tokens": "A static value ( does not change at runtime ) which is known at compile time"}
{"idx": "cosqa-train-8363", "doc": "python check if variable exists in locals", "code": "def getvariable(name):\n        import inspect\n    fr = inspect.currentframe()\n    try:\n        while fr:\n            fr = fr.f_back\n            vars = fr.f_locals\n            if name in vars:\n                return vars[name]\n    except:\n        pass\n    return None", "method_name": "getvariable", "docstring_tokens": "Get the value of a local variable somewhere in the call stack ."}
{"idx": "cosqa-train-18344", "doc": "python filter a dictionary by value", "code": "def _(f, x):\n        return {k: v for k, v in x.items() if f(k, v)}", "method_name": "_", "docstring_tokens": "filter for dict note f should have signature : f :: key - > value - > bool"}
{"idx": "cosqa-train-17007", "doc": "read json file and turn into dictionary using python", "code": "def from_file(file_path) -> dict:\n                with io.open(file_path, 'r', encoding='utf-8') as json_stream:\n            return Json.parse(json_stream, True)", "method_name": "from_file", "docstring_tokens": "Load JSON file"}
{"idx": "cosqa-train-10471", "doc": "python change the shape of list", "code": "def shape_list(l,shape,dtype):\n        return np.array(l, dtype=dtype).reshape(shape)", "method_name": "shape_list", "docstring_tokens": "Shape a list of lists into the appropriate shape and data type"}
{"idx": "cosqa-train-17916", "doc": "how to get the datatypes in python", "code": "def dtypes(self):\n                return [(str(f.name), f.dataType.simpleString()) for f in self.schema.fields]", "method_name": "dtypes", "docstring_tokens": "Returns all column names and their data types as a list ."}
{"idx": "cosqa-train-12023", "doc": "initializing an empty string with a size python", "code": "def random_str(size=10):\n        return ''.join(random.choice(string.ascii_lowercase) for _ in range(size))", "method_name": "random_str", "docstring_tokens": "create random string of selected size"}
{"idx": "cosqa-train-17405", "doc": "cast str as int in python", "code": "def try_cast_int(s):\n        try:\n        temp = re.findall('\\d', str(s))\n        temp = ''.join(temp)\n        return int(temp)\n    except:\n        return s", "method_name": "try_cast_int", "docstring_tokens": "( str ) - > int All the digits in a given string are concatenated and converted into a single number ."}
{"idx": "cosqa-train-5849", "doc": "python, sql table column details", "code": "def column_names(self, table):\n            table_info = self.execute(\n        u'PRAGMA table_info(%s)' % quote(table))\n      return (column['name'] for column in table_info)", "method_name": "column_names", "docstring_tokens": "An iterable of column names for a particular table or view ."}
{"idx": "cosqa-dev-560", "doc": "python pathlib to traverse directories", "code": "def get_files(dir_name):\n        return [(os.path.join('.', d), [os.path.join(d, f) for f in files]) for d, _, files in os.walk(dir_name)]", "method_name": "get_files", "docstring_tokens": "Simple directory walker"}
{"idx": "cosqa-train-14803", "doc": "python create list of columns with their dtype", "code": "def _get_str_columns(sf):\n        return [name for name in sf.column_names() if sf[name].dtype == str]", "method_name": "_get_str_columns", "docstring_tokens": "Returns a list of names of columns that are string type ."}
{"idx": "cosqa-train-9967", "doc": "python turn all nested object to dict", "code": "def as_dict(self):\n                dicts = [x.as_dict for x in self.children]\n        return {'{0} {1}'.format(self.name, self.value): dicts}", "method_name": "as_dict", "docstring_tokens": "Return all child objects in nested dict ."}
{"idx": "cosqa-train-11699", "doc": "python read dicom images", "code": "def numpy(self):\n                        image_reader = gdcm.ImageReader()\n        image_reader.SetFileName(self.fname)\n        if not image_reader.Read():\n            raise IOError(\"Could not read DICOM image\")\n        pixel_array = self._gdcm_to_numpy(image_reader.GetImage())\n        return pixel_array", "method_name": "numpy", "docstring_tokens": "Grabs image data and converts it to a numpy array"}
{"idx": "cosqa-train-9285", "doc": "python making string lower case", "code": "def to_camel(s):\n            return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), '_' + s)", "method_name": "to_camel", "docstring_tokens": ": param string s : under_scored string to be CamelCased : return : CamelCase version of input : rtype : str"}
{"idx": "cosqa-train-9519", "doc": "how to implement a macro in python", "code": "def define_macro(self, name, themacro):\n                from IPython.core import macro\n\n        if isinstance(themacro, basestring):\n            themacro = macro.Macro(themacro)\n        if not isinstance(themacro, macro.Macro):\n            raise ValueError('A macro must be a string or a Macro instance.')\n        self.user_ns[name] = themacro", "method_name": "define_macro", "docstring_tokens": "Define a new macro"}
{"idx": "cosqa-train-14131", "doc": "python subprocess close stdin", "code": "def _finish(self):\n                if self._process.returncode is None:\n            self._process.stdin.flush()\n            self._process.stdin.close()\n            self._process.wait()\n            self.closed = True", "method_name": "_finish", "docstring_tokens": "Closes and waits for subprocess to exit ."}
{"idx": "cosqa-train-16776", "doc": "sum within a comprehension python", "code": "def _accumulate(sequence, func):\n        iterator = iter(sequence)\n    total = next(iterator)\n    yield total\n    for element in iterator:\n        total = func(total, element)\n        yield total", "method_name": "_accumulate", "docstring_tokens": "Python2 accumulate implementation taken from https : // docs . python . org / 3 / library / itertools . html#itertools . accumulate"}
{"idx": "cosqa-train-12089", "doc": "python timedelta without microseconds", "code": "def timedelta_seconds(timedelta):\n        return (timedelta.total_seconds() if hasattr(timedelta, \"total_seconds\")\n            else timedelta.days * 24 * 3600 + timedelta.seconds +\n                 timedelta.microseconds / 1000000.)", "method_name": "timedelta_seconds", "docstring_tokens": "Returns the total timedelta duration in seconds ."}
{"idx": "cosqa-train-16968", "doc": "change python object to string", "code": "def string(value) -> str:\n                return system_json.dumps(Json(value).safe_object(), ensure_ascii=False)", "method_name": "string", "docstring_tokens": "string dict / object / value to JSON"}
{"idx": "cosqa-train-4701", "doc": "eit request header in python flask", "code": "def get_trace_id_from_flask():\n        if flask is None or not flask.request:\n        return None\n\n    header = flask.request.headers.get(_FLASK_TRACE_HEADER)\n\n    if header is None:\n        return None\n\n    trace_id = header.split(\"/\", 1)[0]\n\n    return trace_id", "method_name": "get_trace_id_from_flask", "docstring_tokens": "Get trace_id from flask request headers ."}
{"idx": "cosqa-dev-423", "doc": "python lower all elements in list", "code": "def gen_lower(x: Iterable[str]) -> Generator[str, None, None]:\n        for string in x:\n        yield string.lower()", "method_name": "gen_lower", "docstring_tokens": "Args : x : iterable of strings"}
{"idx": "cosqa-train-14769", "doc": "using sort to move element in to new position in list python", "code": "def insort_no_dup(lst, item):\n        import bisect\n    ix = bisect.bisect_left(lst, item)\n    if lst[ix] != item: \n        lst[ix:ix] = [item]", "method_name": "insort_no_dup", "docstring_tokens": "If item is not in lst add item to list at its sorted position"}
{"idx": "cosqa-train-19246", "doc": "remove special characters from column names in python", "code": "def normalize_column_names(df):\n    r    columns = df.columns if hasattr(df, 'columns') else df\n    columns = [c.lower().replace(' ', '_') for c in columns]\n    return columns", "method_name": "normalize_column_names", "docstring_tokens": "r Clean up whitespace in column names . See better version at pugnlp . clean_columns"}
{"idx": "cosqa-dev-345", "doc": "calculate the average of a given list in python", "code": "def mean(inlist):\n        sum = 0\n    for item in inlist:\n        sum = sum + item\n    return sum / float(len(inlist))", "method_name": "mean", "docstring_tokens": "Returns the arithematic mean of the values in the passed list . Assumes a 1D list but will function on the 1st dim of an array ( ! ) ."}
{"idx": "cosqa-train-10217", "doc": "past python git clone", "code": "def mkhead(repo, path):\n        return git.Head(repo, git.Head.to_full_path(path))", "method_name": "mkhead", "docstring_tokens": ": return : New branch / head instance"}
{"idx": "cosqa-train-7023", "doc": "python lambda function with 3 params", "code": "def make_lambda(call):\n        empty_args = ast.arguments(args=[], vararg=None, kwarg=None, defaults=[])\n    return ast.Lambda(args=empty_args, body=call)", "method_name": "make_lambda", "docstring_tokens": "Wrap an AST Call node to lambda expression node . call : ast . Call node"}
{"idx": "cosqa-train-12911", "doc": "check for punctuation python", "code": "def is_punctuation(text):\n        return not (text.lower() in config.AVRO_VOWELS or\n                text.lower() in config.AVRO_CONSONANTS)", "method_name": "is_punctuation", "docstring_tokens": "Check if given string is a punctuation"}
{"idx": "cosqa-train-4157", "doc": "unsupported media type json python", "code": "def parse(self, data, mimetype):\n                encoding = mimetype.params.get('charset') or 'utf-8'\n\n        return json.loads(data.decode(encoding))", "method_name": "parse", "docstring_tokens": "Parses a byte array containing a JSON document and returns a Python object . : param data : The byte array containing a JSON document . : param MimeType mimetype : The mimetype chose to parse the data . : return : A Python object ."}
{"idx": "cosqa-train-19905", "doc": "python separate string to list", "code": "def _str_to_list(value, separator):\n        value_list = [item.strip() for item in value.split(separator)]\n    value_list_sanitized = builtins.list(filter(None, value_list))\n    if len(value_list_sanitized) > 0:\n        return value_list_sanitized\n    else:\n        raise ValueError('Invalid list variable.')", "method_name": "_str_to_list", "docstring_tokens": "Convert a string to a list with sanitization ."}
{"idx": "cosqa-train-18773", "doc": "python remove phrase from list of strings", "code": "def remove_empty_text(utterances: List[Utterance]) -> List[Utterance]:\n        return [utter for utter in utterances if utter.text.strip() != \"\"]", "method_name": "remove_empty_text", "docstring_tokens": "Remove empty utterances from a list of utterances Args : utterances : The list of utterance we are processing"}
{"idx": "cosqa-train-4468", "doc": "python fastest way to load data", "code": "def get_data(self):\n                try:\n            return DocumentDataDict(self.__dict__['data'])\n        except KeyError:\n            self._lazy_load()\n            return DocumentDataDict(self.__dict__['data'])", "method_name": "get_data", "docstring_tokens": "Fetch the data field if it does not exist ."}
{"idx": "cosqa-train-10637", "doc": "add noise to the audio python", "code": "def synthesize(self, duration):\n                sr = self.samplerate.samples_per_second\n        seconds = duration / Seconds(1)\n        samples = np.random.uniform(low=-1., high=1., size=int(sr * seconds))\n        return AudioSamples(samples, self.samplerate)", "method_name": "synthesize", "docstring_tokens": "Synthesize white noise"}
{"idx": "cosqa-train-10163", "doc": "object with commas turned into list python", "code": "def seq_to_str(obj, sep=\",\"):\n        if isinstance(obj, string_classes):\n        return obj\n    elif isinstance(obj, (list, tuple)):\n        return sep.join([str(x) for x in obj])\n    else:\n        return str(obj)", "method_name": "seq_to_str", "docstring_tokens": "Given a sequence convert it to a comma separated string . If however the argument is a single object return its string representation ."}
{"idx": "cosqa-train-9747", "doc": "python set limits on x axis", "code": "def set_xlimits(self, min=None, max=None):\n                self.limits['xmin'] = min\n        self.limits['xmax'] = max", "method_name": "set_xlimits", "docstring_tokens": "Set limits for the x - axis ."}
{"idx": "cosqa-train-7841", "doc": "is python ssl socket connection thread safe", "code": "def enable_ssl(self, *args, **kwargs):\n                if self.handshake_sent:\n            raise SSLError('can only enable SSL before handshake')\n\n        self.secure = True\n        self.sock = ssl.wrap_socket(self.sock, *args, **kwargs)", "method_name": "enable_ssl", "docstring_tokens": "Transforms the regular socket . socket to an ssl . SSLSocket for secure connections . Any arguments are passed to ssl . wrap_socket : http : // docs . python . org / dev / library / ssl . html#ssl . wrap_socket"}
{"idx": "cosqa-train-7998", "doc": "python3 encode decode bytes", "code": "def to_bytes(value):\n        vtype = type(value)\n\n    if vtype == bytes or vtype == type(None):\n        return value\n\n    try:\n        return vtype.encode(value)\n    except UnicodeEncodeError:\n        pass\n    return value", "method_name": "to_bytes", "docstring_tokens": "str to bytes ( py3k )"}
{"idx": "cosqa-train-2119", "doc": "xsd file to python object", "code": "def from_file(cls, file_path, validate=True):\n                return xmlmap.load_xmlobject_from_file(file_path, xmlclass=cls, validate=validate)", "method_name": "from_file", "docstring_tokens": "Creates a Python object from a XML file"}
{"idx": "cosqa-train-10773", "doc": "python expand a path", "code": "def expandpath(path):\n        return os.path.expandvars(os.path.expanduser(path)).replace(\"//\", \"/\")", "method_name": "expandpath", "docstring_tokens": "Expand a filesystem path that may or may not contain user / env vars ."}
{"idx": "cosqa-train-12970", "doc": "python flask template table example", "code": "def index():\n        global productpage\n\n    table = json2html.convert(json = json.dumps(productpage),\n                              table_attributes=\"class=\\\"table table-condensed table-bordered table-hover\\\"\")\n\n    return render_template('index.html', serviceTable=table)", "method_name": "index", "docstring_tokens": "Display productpage with normal user and test user buttons"}
{"idx": "cosqa-train-2983", "doc": "how to check if object defined python", "code": "def is_defined(self, objtxt, force_import=False):\n                return self.interpreter.is_defined(objtxt, force_import)", "method_name": "is_defined", "docstring_tokens": "Return True if object is defined"}
{"idx": "cosqa-train-14540", "doc": "s3 sync between bucket python", "code": "def s3(ctx, bucket_name, data_file, region):\n        if not ctx.data_file:\n        ctx.data_file = data_file\n\n    if not ctx.bucket_name:\n        ctx.bucket_name = bucket_name\n\n    if not ctx.region:\n        ctx.region = region\n\n    ctx.type = 's3'", "method_name": "s3", "docstring_tokens": "Use the S3 SWAG backend ."}
{"idx": "cosqa-train-6525", "doc": "change the position of 3d coordinate in python", "code": "def list(self):\n                return [self._pos3d.x, self._pos3d.y, self._pos3d.z]", "method_name": "list", "docstring_tokens": "position in 3d space"}
{"idx": "cosqa-train-11131", "doc": "python how to get the number of cores in a computer", "code": "def _num_cpus_darwin():\n        p = subprocess.Popen(['sysctl','-n','hw.ncpu'],stdout=subprocess.PIPE)\n    return p.stdout.read()", "method_name": "_num_cpus_darwin", "docstring_tokens": "Return the number of active CPUs on a Darwin system ."}
{"idx": "cosqa-train-4829", "doc": "python how to use pdb set trace", "code": "def set_trace():\n            pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)", "method_name": "set_trace", "docstring_tokens": "Start a Pdb instance at the calling frame with stdout routed to sys . __stdout__ ."}
{"idx": "cosqa-train-10710", "doc": "python dictionary url encode", "code": "def get_dict_to_encoded_url(data):\n        unicode_data = dict([(k, smart_str(v)) for k, v in data.items()])\n    encoded = urllib.urlencode(unicode_data)\n    return encoded", "method_name": "get_dict_to_encoded_url", "docstring_tokens": "Converts a dict to an encoded URL . Example : given data = { a : 1 b : 2 } it returns a = 1&b = 2"}
{"idx": "cosqa-train-18842", "doc": "how to check whether a string is int in python", "code": "def _isint(string):\n        return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)", "method_name": "_isint", "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"}
{"idx": "cosqa-train-16717", "doc": "python 3 change permission of file chmod", "code": "def add_exec_permission_to(target_file):\n        mode = os.stat(target_file).st_mode\n    os.chmod(target_file, mode | stat.S_IXUSR)", "method_name": "add_exec_permission_to", "docstring_tokens": "Add executable permissions to the file"}
{"idx": "cosqa-train-8829", "doc": "python gaussian filter array", "code": "def smooth_gaussian(image, sigma=1):\n        return scipy.ndimage.filters.gaussian_filter(image, sigma=sigma, mode=\"nearest\")", "method_name": "smooth_gaussian", "docstring_tokens": "Returns Gaussian smoothed image ."}
{"idx": "cosqa-train-17526", "doc": "how to cut off a calculated number to two decimals in python", "code": "def truncate(value: Decimal, n_digits: int) -> Decimal:\n        return Decimal(math.trunc(value * (10 ** n_digits))) / (10 ** n_digits)", "method_name": "truncate", "docstring_tokens": "Truncates a value to a number of decimals places"}
{"idx": "cosqa-train-14497", "doc": "replace many value at once in python", "code": "def replace_list(items, match, replacement):\n        return [replace(item, match, replacement) for item in items]", "method_name": "replace_list", "docstring_tokens": "Replaces occurrences of a match string in a given list of strings and returns a list of new strings . The match string can be a regex expression ."}
{"idx": "cosqa-train-15806", "doc": "python numpy conver to float64", "code": "def as_float_array(a):\n        return np.asarray(a, dtype=np.quaternion).view((np.double, 4))", "method_name": "as_float_array", "docstring_tokens": "View the quaternion array as an array of floats"}
{"idx": "cosqa-train-11161", "doc": "python how to rank a list object", "code": "def ranks(self, key, value):\n        return [normalize_rank(el) for el in force_list(value.get('a'))]", "method_name": "ranks", "docstring_tokens": "Populate the ranks key ."}
{"idx": "cosqa-train-7195", "doc": "how to check if file doesn't exist in python", "code": "def is_valid_file(parser, arg):\n        arg = os.path.abspath(arg)\n    if not os.path.exists(arg):\n        parser.error(\"The file %s does not exist!\" % arg)\n    else:\n        return arg", "method_name": "is_valid_file", "docstring_tokens": "Check if arg is a valid file that already exists on the file system ."}
{"idx": "cosqa-train-7384", "doc": "how to get the parent directory in python", "code": "def get_parent_dir(name):\n        parent_dir = os.path.dirname(os.path.dirname(name))\n    if parent_dir:\n        return parent_dir\n    return os.path.abspath('.')", "method_name": "get_parent_dir", "docstring_tokens": "Get the parent directory of a filename ."}
{"idx": "cosqa-train-8125", "doc": "resize an image python pil", "code": "def resize(self, size):\n                return Image(self.pil_image.resize(size, PIL.Image.ANTIALIAS))", "method_name": "resize", "docstring_tokens": "Return a new Image instance with the given size ."}
{"idx": "cosqa-train-8244", "doc": "python boxplot data frame", "code": "def compute_boxplot(self, series):\n                from matplotlib.cbook import boxplot_stats\n        series = series[series.notnull()]\n        if len(series.values) == 0:\n            return {}\n        elif not is_numeric_dtype(series):\n            return self.non_numeric_stats(series)\n        stats = boxplot_stats(list(series.values))[0]\n        stats['count'] = len(series.values)\n        stats['fliers'] = \"|\".join(map(str, stats['fliers']))\n        return stats", "method_name": "compute_boxplot", "docstring_tokens": "Compute boxplot for given pandas Series ."}
{"idx": "cosqa-train-11056", "doc": "python glpk read from lp file", "code": "def glpk_read_cplex(path):\n        from swiglpk import glp_create_prob, glp_read_lp\n\n    problem = glp_create_prob()\n    glp_read_lp(problem, None, path)\n    return problem", "method_name": "glpk_read_cplex", "docstring_tokens": "Reads cplex file and returns glpk problem ."}
{"idx": "cosqa-train-12080", "doc": "python threadpool close join", "code": "def join(self):\n\t\tself.inputfeeder_thread.join()\n\t\tself.pool.join()\n\t\tself.resulttracker_thread.join()\n\t\tself.failuretracker_thread.join()", "method_name": "join", "docstring_tokens": "Note that the Executor must be close () d elsewhere or join () will never return ."}
{"idx": "cosqa-train-11940", "doc": "python sklearn onehotencoder string values", "code": "def one_hot2string(arr, vocab):\n        tokens = one_hot2token(arr)\n    indexToLetter = _get_index_dict(vocab)\n\n    return [''.join([indexToLetter[x] for x in row]) for row in tokens]", "method_name": "one_hot2string", "docstring_tokens": "Convert a one - hot encoded array back to string"}
{"idx": "cosqa-train-19085", "doc": "python change to bytes", "code": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"      if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')", "method_name": "to_bytes", "docstring_tokens": "Convert anything to a bytearray . See - http : // stackoverflow . com / questions / 7585435 / best - way - to - convert - string - to - bytes - in - python - 3 - http : // stackoverflow . com / questions / 10459067 / how - to - convert - my - bytearrayb - x9e - x18k - x9a - to - something - like - this - x9e - x1"}
{"idx": "cosqa-train-7005", "doc": "python json loads try", "code": "def json(body, charset='utf-8', **kwargs):\n        return json_converter.loads(text(body, charset=charset))", "method_name": "json", "docstring_tokens": "Takes JSON formatted data converting it into native Python objects"}
{"idx": "cosqa-train-6677", "doc": "create an empty column in data frame python", "code": "def add_blank_row(self, label):\n                col_labels = self.df.columns\n        blank_item = pd.Series({}, index=col_labels, name=label)\n                self.df.loc[blank_item.name] = blank_item\n        return self.df", "method_name": "add_blank_row", "docstring_tokens": "Add a blank row with only an index value to self . df . This is done inplace ."}
{"idx": "cosqa-train-5971", "doc": "remove whitespace at end of line in python", "code": "def clean(s):\n    lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)", "method_name": "clean", "docstring_tokens": "Removes trailing whitespace on each line ."}
{"idx": "cosqa-train-12933", "doc": "python file opening modes", "code": "def open_file(file, mode):\n\tif hasattr(file, \"read\"):\n\t\treturn file\n\tif hasattr(file, \"open\"):\n\t\treturn file.open(mode)\n\treturn open(file, mode)", "method_name": "open_file", "docstring_tokens": "Open a file ."}
{"idx": "cosqa-train-8432", "doc": "python code input prompt for questions", "code": "def string_input(prompt=''):\n        v = sys.version[0]\n    if v == '3':\n        return input(prompt)\n    else:\n        return raw_input(prompt)", "method_name": "string_input", "docstring_tokens": "Python 3 input () / Python 2 raw_input ()"}
{"idx": "cosqa-train-9433", "doc": "python parse a log file that is logging", "code": "def parse(self):\n                f = open(self.parse_log_path, \"r\")\n        self.parse2(f)\n        f.close()", "method_name": "parse", "docstring_tokens": "Parse file specified by constructor ."}
{"idx": "cosqa-train-19595", "doc": "remove an entry from a dict python", "code": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None:\n        for d in dict_list:\n        d.pop(key, None)", "method_name": "dictlist_wipe_key", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d delete d [ key ] if it exists ."}
{"idx": "cosqa-train-7984", "doc": "new line statemnt pythong write", "code": "def write_line(self, line, count=1):\n                self.write(line)\n        self.write_newlines(count)", "method_name": "write_line", "docstring_tokens": "writes the line and count newlines after the line"}
{"idx": "cosqa-train-5792", "doc": "python view as series column format string", "code": "def format(x, format):\n            sl = vaex.strings.format(x, format)\n    return column.ColumnStringArrow(sl.bytes, sl.indices, sl.length, sl.offset, string_sequence=sl)", "method_name": "format", "docstring_tokens": "Uses http : // www . cplusplus . com / reference / string / to_string / for formatting"}
{"idx": "cosqa-train-7598", "doc": "python select not null column values", "code": "def selectnotnone(table, field, complement=False):\n        return select(table, field, lambda v: v is not None,\n                  complement=complement)", "method_name": "selectnotnone", "docstring_tokens": "Select rows where the given field is not None ."}
{"idx": "cosqa-train-11238", "doc": "how do functions in python know the parametr type", "code": "def is_symbol(string):\n        return (\n        is_int(string) or is_float(string) or\n        is_constant(string) or is_unary(string) or\n        is_binary(string) or\n        (string == '(') or (string == ')')\n    )", "method_name": "is_symbol", "docstring_tokens": "Return true if the string is a mathematical symbol ."}
{"idx": "cosqa-train-13050", "doc": "cursor positioning python windows", "code": "def ensure_hbounds(self):\n                self.cursor.x = min(max(0, self.cursor.x), self.columns - 1)", "method_name": "ensure_hbounds", "docstring_tokens": "Ensure the cursor is within horizontal screen bounds ."}
{"idx": "cosqa-train-11103", "doc": "python how to equally space points in an ellipse", "code": "def create_ellipse(width,height,angle):\n        angle = angle / 180.0 * np.pi\n    thetas = np.linspace(0,2*np.pi,200)\n    a = width / 2.0\n    b = height / 2.0\n\n    x = a*np.cos(thetas)*np.cos(angle) - b*np.sin(thetas)*np.sin(angle)\n    y = a*np.cos(thetas)*np.sin(angle) + b*np.sin(thetas)*np.cos(angle)\n    z = np.zeros(thetas.shape)\n    return np.vstack((x,y,z)).T", "method_name": "create_ellipse", "docstring_tokens": "Create parametric ellipse from 200 points ."}
{"idx": "cosqa-train-9780", "doc": "how to see how similar two images are in python", "code": "def _sim_fill(r1, r2, imsize):\n        bbsize = (\n        (max(r1[\"max_x\"], r2[\"max_x\"]) - min(r1[\"min_x\"], r2[\"min_x\"]))\n        * (max(r1[\"max_y\"], r2[\"max_y\"]) - min(r1[\"min_y\"], r2[\"min_y\"]))\n    )\n    return 1.0 - (bbsize - r1[\"size\"] - r2[\"size\"]) / imsize", "method_name": "_sim_fill", "docstring_tokens": "calculate the fill similarity over the image"}
{"idx": "cosqa-train-9562", "doc": "how to make a input to have no spaces in python\\", "code": "def pass_from_pipe(cls):\n                is_pipe = not sys.stdin.isatty()\n        return is_pipe and cls.strip_last_newline(sys.stdin.read())", "method_name": "pass_from_pipe", "docstring_tokens": "Return password from pipe if not on TTY else False ."}
{"idx": "cosqa-train-14356", "doc": "next line to read in python", "code": "def __next__(self):\n                        row = super(UnicodeReaderWithLineNumber, self).__next__()\n        return self.lineno + 1, row", "method_name": "__next__", "docstring_tokens": ""}
{"idx": "cosqa-train-14340", "doc": "move an item in list to front python", "code": "def list_move_to_front(l,value='other'):\n        l=list(l)\n    if value in l:\n        l.remove(value)\n        l.insert(0,value)\n    return l", "method_name": "list_move_to_front", "docstring_tokens": "if the value is in the list move it to the front and return it ."}
{"idx": "cosqa-train-10077", "doc": "python wrap (s,w) print", "code": "def _wrap(text, columns=80):\n        out = []\n    for cnt, char in enumerate(text):\n        out.append(char)\n\n        if (cnt + 1) % columns == 0:\n            out.append(\"\\n\")\n\n    return \"\".join(out)", "method_name": "_wrap", "docstring_tokens": "Own dumb reimplementation of textwrap . wrap () ."}
{"idx": "cosqa-train-18137", "doc": "how to check if missing values are blanks or nan or none in python", "code": "def warn_if_nans_exist(X):\n        null_count = count_rows_with_nans(X)\n    total = len(X)\n    percent = 100 * null_count / total\n\n    if null_count > 0:\n        warning_message = \\\n            'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' \\\n            'complete rows will be plotted.'.format(null_count, total, percent)\n        warnings.warn(warning_message, DataWarning)", "method_name": "warn_if_nans_exist", "docstring_tokens": "Warn if nans exist in a numpy array ."}
{"idx": "cosqa-train-12117", "doc": "python to get the indices of bin edges", "code": "def val_to_bin(edges, x):\n        ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin", "method_name": "val_to_bin", "docstring_tokens": "Convert axis coordinate to bin index ."}
{"idx": "cosqa-train-10587", "doc": "python comma separated value", "code": "def list_to_csv(value):\n        if isinstance(value, (list, tuple, set)):\n        value = \",\".join(value)\n    return value", "method_name": "list_to_csv", "docstring_tokens": "Converts list to string with comma separated values . For string is no - op ."}
{"idx": "cosqa-train-13897", "doc": "python requests disable ssl certificate verification", "code": "def disable_insecure_request_warning():\n        import requests\n    from requests.packages.urllib3.exceptions import InsecureRequestWarning\n    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)", "method_name": "disable_insecure_request_warning", "docstring_tokens": "Suppress warning about untrusted SSL certificate ."}
{"idx": "cosqa-train-7918", "doc": "python var and distribution of probability", "code": "def pdf(x, mu, std):\n        return (1.0 / (std * sqrt(2 * pi))) * np.exp(-(x - mu) ** 2 / (2 * std ** 2))", "method_name": "pdf", "docstring_tokens": "Probability density function ( normal distribution )"}
{"idx": "cosqa-dev-269", "doc": "how to determine it's a orthogonal matrix using python", "code": "def is_orthogonal(\n        matrix: np.ndarray,\n        *,\n        rtol: float = 1e-5,\n        atol: float = 1e-8) -> bool:\n        return (matrix.shape[0] == matrix.shape[1] and\n            np.all(np.imag(matrix) == 0) and\n            np.allclose(matrix.dot(matrix.T), np.eye(matrix.shape[0]),\n                        rtol=rtol,\n                        atol=atol))", "method_name": "is_orthogonal", "docstring_tokens": "Determines if a matrix is approximately orthogonal ."}
{"idx": "cosqa-train-10422", "doc": "strip html tags in python", "code": "def do_striptags(value):\n        if hasattr(value, '__html__'):\n        value = value.__html__()\n    return Markup(unicode(value)).striptags()", "method_name": "do_striptags", "docstring_tokens": "Strip SGML / XML tags and replace adjacent whitespace by one space ."}
{"idx": "cosqa-train-12879", "doc": "center align python text", "code": "def center_text(text, width=80):\n        centered = []\n    for line in text.splitlines():\n        centered.append(line.center(width))\n    return \"\\n\".join(centered)", "method_name": "center_text", "docstring_tokens": "Center all lines of the text . It is assumed that all lines width is smaller then B { width } because the line width will not be checked . Args : text ( str ) : Text to wrap . width ( int ) : Maximum number of characters per line . Returns : str : Centered text ."}
{"idx": "cosqa-train-2468", "doc": "python get list of keys on an object", "code": "def get_keys_from_class(cc):\n        return [prop.name for prop in cc.properties.values() \\\n            if 'key' in prop.qualifiers]", "method_name": "get_keys_from_class", "docstring_tokens": "Return list of the key property names for a class"}
{"idx": "cosqa-train-9972", "doc": "is there any python function to check for nan valu", "code": "def reduce_fn(x):\n        values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN", "method_name": "reduce_fn", "docstring_tokens": "Aggregation function to get the first non - zero value ."}
{"idx": "cosqa-train-13065", "doc": "python get cookie for request", "code": "def parse_cookies(self, req, name, field):\n                return core.get_value(req.COOKIES, name, field)", "method_name": "parse_cookies", "docstring_tokens": "Pull the value from the cookiejar ."}
{"idx": "cosqa-train-13388", "doc": "python is list no na", "code": "def is_listish(obj):\n        if isinstance(obj, (list, tuple, set)):\n        return True\n    return is_sequence(obj)", "method_name": "is_listish", "docstring_tokens": "Check if something quacks like a list ."}
{"idx": "cosqa-train-15046", "doc": "python determine if a file is image", "code": "def is_image(filename):\n            return os.path.isfile(filename) and filename.lower().endswith(ImageExts)", "method_name": "is_image", "docstring_tokens": "Determine if given filename is an image ."}
{"idx": "cosqa-train-11796", "doc": "python reorganise a data frame", "code": "def _preprocess(df):\n        df = df.stack()\n\n    df.index.rename([\"id\", \"time\"], inplace=True)      df.name = \"value\"\n    df = df.reset_index()\n\n    return df", "method_name": "_preprocess", "docstring_tokens": "given a DataFrame where records are stored row - wise rearrange it such that records are stored column - wise ."}
{"idx": "cosqa-train-12282", "doc": "read first line in txt file in python", "code": "def getfirstline(file, default):\n        with open(file, 'rb') as fh:\n        content = fh.readlines()\n        if len(content) == 1:\n            return content[0].decode('utf-8').strip('\\n')\n\n    return default", "method_name": "getfirstline", "docstring_tokens": "Returns the first line of a file ."}
{"idx": "cosqa-train-16638", "doc": "pass defined parser object to subparser python", "code": "def sub(name, func,**kwarg):\n        sp = subparsers.add_parser(name, **kwarg)\n    sp.set_defaults(func=func)\n    sp.arg = sp.add_argument\n    return sp", "method_name": "sub", "docstring_tokens": "Add subparser"}
{"idx": "cosqa-train-7552", "doc": "how to print generic error in python", "code": "def print_err(*args, end='\\n'):\n        print(*args, end=end, file=sys.stderr)\n    sys.stderr.flush()", "method_name": "print_err", "docstring_tokens": "Similar to print but prints to stderr ."}
{"idx": "cosqa-train-14625", "doc": "python change the name of a key", "code": "def unit_key_from_name(name):\n    result = name\n\n  for old, new in six.iteritems(UNIT_KEY_REPLACEMENTS):\n    result = result.replace(old, new)\n\n    result = re.sub(r'_+', '_', result.upper())\n\n  return result", "method_name": "unit_key_from_name", "docstring_tokens": "Return a legal python name for the given name for use as a unit key ."}
{"idx": "cosqa-train-12190", "doc": "moving mouse python click", "code": "def mouse_move_event(self, event):\n                self.example.mouse_position_event(event.x(), event.y())", "method_name": "mouse_move_event", "docstring_tokens": "Forward mouse cursor position events to the example"}
{"idx": "cosqa-train-14209", "doc": "python to determine if services are running", "code": "def service_available(service_name):\n        try:\n        subprocess.check_output(\n            ['service', service_name, 'status'],\n            stderr=subprocess.STDOUT).decode('UTF-8')\n    except subprocess.CalledProcessError as e:\n        return b'unrecognized service' not in e.output\n    else:\n        return True", "method_name": "service_available", "docstring_tokens": "Determine whether a system service is available"}
{"idx": "cosqa-train-18231", "doc": "python set contains multiple items", "code": "def issuperset(self, items):\n                return all(_compat.map(self._seen.__contains__, items))", "method_name": "issuperset", "docstring_tokens": "Return whether this collection contains all items ."}
{"idx": "cosqa-train-17616", "doc": "python protobyf parse from byte", "code": "def decode(self, bytes, raw=False):\n                return struct.unpack(self.format, buffer(bytes))[0]", "method_name": "decode", "docstring_tokens": "decode ( bytearray raw = False ) - > value"}
{"idx": "cosqa-train-2007", "doc": "python check if a directory is writable", "code": "def _writable_dir(path):\n        return os.path.isdir(path) and os.access(path, os.W_OK)", "method_name": "_writable_dir", "docstring_tokens": "Whether path is a directory to which the user has write access ."}
{"idx": "cosqa-train-16594", "doc": "object as list python", "code": "def as_list(self):\n                return [self.name, self.value, [x.as_list for x in self.children]]", "method_name": "as_list", "docstring_tokens": "Return all child objects in nested lists of strings ."}
{"idx": "cosqa-dev-486", "doc": "replace function nan python", "code": "def _replace_nan(a, val):\n        mask = isnull(a)\n    return where_method(val, mask, a), mask", "method_name": "_replace_nan", "docstring_tokens": "replace nan in a by val and returns the replaced array and the nan position"}
{"idx": "cosqa-train-19425", "doc": "python hash table check if key exist", "code": "def check_key(self, key: str) -> bool:\n                keys = self.get_keys()\n        return key in keys", "method_name": "check_key", "docstring_tokens": "Checks if key exists in datastore . True if yes False if no ."}
{"idx": "cosqa-train-14671", "doc": "take all points in box python", "code": "def point8_to_box(points):\n        p = points.reshape((-1, 4, 2))\n    minxy = p.min(axis=1)       maxxy = p.max(axis=1)       return np.concatenate((minxy, maxxy), axis=1)", "method_name": "point8_to_box", "docstring_tokens": "Args : points : ( nx4 ) x2 Returns : nx4 boxes ( x1y1x2y2 )"}
{"idx": "cosqa-train-14950", "doc": "python create enum by name", "code": "def get_enum_from_name(self, enum_name):\n                return next((e for e in self.enums if e.name == enum_name), None)", "method_name": "get_enum_from_name", "docstring_tokens": "Return an enum from a name Args : enum_name ( str ) : name of the enum Returns : Enum"}
{"idx": "cosqa-train-11399", "doc": "python matplotlib use arrow markers", "code": "def add_arrow(self, x1, y1, x2, y2, **kws):\n                self.panel.add_arrow(x1, y1, x2, y2, **kws)", "method_name": "add_arrow", "docstring_tokens": "add arrow to plot"}
{"idx": "cosqa-train-8819", "doc": "python function default args", "code": "def get_default_args(func):\n        args, varargs, keywords, defaults = getargspec_no_self(func)\n    return dict(zip(args[-len(defaults):], defaults))", "method_name": "get_default_args", "docstring_tokens": "returns a dictionary of arg_name : default_values for the input function"}
{"idx": "cosqa-train-19364", "doc": "python how to select first 100 rows", "code": "def genfirstvalues(cursor: Cursor, arraysize: int = 1000) \\\n        -> Generator[Any, None, None]:\n        return (row[0] for row in genrows(cursor, arraysize))", "method_name": "genfirstvalues", "docstring_tokens": "Generate the first value in each row ."}
{"idx": "cosqa-train-17740", "doc": "removing columnsns in data frame python", "code": "def clean_column_names(df: DataFrame) -> DataFrame:\n        f = df.copy()\n    f.columns = [col.strip() for col in f.columns]\n    return f", "method_name": "clean_column_names", "docstring_tokens": "Strip the whitespace from all column names in the given DataFrame and return the result ."}
{"idx": "cosqa-train-19654", "doc": "python array to torch tensor", "code": "def astensor(array: TensorLike) -> BKTensor:\n        tensor = tf.convert_to_tensor(value=array, dtype=CTYPE)\n    return tensor", "method_name": "astensor", "docstring_tokens": "Covert numpy array to tensorflow tensor"}
{"idx": "cosqa-dev-116", "doc": "how to turn a list into a csv python", "code": "def list_to_csv(value):\n        if isinstance(value, (list, tuple, set)):\n        value = \",\".join(value)\n    return value", "method_name": "list_to_csv", "docstring_tokens": "Converts list to string with comma separated values . For string is no - op ."}
{"idx": "cosqa-train-13423", "doc": "how do i unzip file in python", "code": "def _unzip_handle(handle):\n        if isinstance(handle, basestring):\n        handle = _gzip_open_filename(handle)\n    else:\n        handle = _gzip_open_handle(handle)\n    return handle", "method_name": "_unzip_handle", "docstring_tokens": "Transparently unzip the file handle"}
=======
{"idx": "cosqa-train-12467", "doc": "sort by a token in string python", "code": "def _process_and_sort(s, force_ascii, full_process=True):\n            ts = utils.full_process(s, force_ascii=force_ascii) if full_process else s\n    tokens = ts.split()\n\n        sorted_string = u\" \".join(sorted(tokens))\n    return sorted_string.strip()", "method_name": "_process_and_sort", "docstring_tokens": "Return a cleaned string with token sorted ."}
{"idx": "cosqa-train-14641", "doc": "python check file is readonly", "code": "def is_readable(filename):\n        return os.path.isfile(filename) and os.access(filename, os.R_OK)", "method_name": "is_readable", "docstring_tokens": "Check if file is a regular file and is readable ."}
{"idx": "cosqa-train-13074", "doc": "declaring empty numpy array in python", "code": "def empty(self, name, **kwargs):\n                return self._write_op(self._empty_nosync, name, **kwargs)", "method_name": "empty", "docstring_tokens": "Create an array . Keyword arguments as per : func : zarr . creation . empty ."}
{"idx": "cosqa-train-14677", "doc": "test for iterable is string in python", "code": "def is_iterable_but_not_string(obj):\n        return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)", "method_name": "is_iterable_but_not_string", "docstring_tokens": "Determine whether or not obj is iterable but not a string ( eg a list set tuple etc ) ."}
{"idx": "cosqa-train-9500", "doc": "python print results of query loop", "code": "def print_runs(query):\n        if query is None:\n        return\n\n    for tup in query:\n        print((\"{0} @ {1} - {2} id: {3} group: {4}\".format(\n            tup.end, tup.experiment_name, tup.project_name,\n            tup.experiment_group, tup.run_group)))", "method_name": "print_runs", "docstring_tokens": "Print all rows in this result query ."}
{"idx": "cosqa-train-1335", "doc": "how to save header of fits file to export python", "code": "def write_fits(self, fitsfile):\n                tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)", "method_name": "write_fits", "docstring_tokens": "Write the ROI model to a FITS file ."}
{"idx": "cosqa-train-19221", "doc": "python calc page align", "code": "def page_align_content_length(length):\n            mod = length % _PAGEBLOB_BOUNDARY\n    if mod != 0:\n        return length + (_PAGEBLOB_BOUNDARY - mod)\n    return length", "method_name": "page_align_content_length", "docstring_tokens": "Compute page boundary alignment : param int length : content length : rtype : int : return : aligned byte boundary"}
{"idx": "cosqa-train-971", "doc": "python numpy array as float", "code": "def as_float_array(a):\n        return np.asarray(a, dtype=np.quaternion).view((np.double, 4))", "method_name": "as_float_array", "docstring_tokens": "View the quaternion array as an array of floats"}
{"idx": "cosqa-train-18162", "doc": "input string that replaces occurences python", "code": "def __replace_all(repls: dict, input: str) -> str:\n        return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)", "method_name": "__replace_all", "docstring_tokens": "Replaces from a string ** input ** all the occurrences of some symbols according to mapping ** repls ** ."}
{"idx": "cosqa-train-14635", "doc": "python check all items in list are ints", "code": "def is_iterable_of_int(l):\n    r    if not is_iterable(l):\n        return False\n\n    return all(is_int(value) for value in l)", "method_name": "is_iterable_of_int", "docstring_tokens": "r Checks if l is iterable and contains only integral types"}
{"idx": "cosqa-train-9770", "doc": "how to save variable to text file python", "code": "def save(variable, filename):\n        fileObj = open(filename, 'wb')\n    pickle.dump(variable, fileObj)\n    fileObj.close()", "method_name": "save", "docstring_tokens": "Save variable on given path using Pickle Args : variable : what to save path ( str ) : path of the output"}
{"idx": "cosqa-train-11848", "doc": "how to skip an index in a for loop python", "code": "def stop_at(iterable, idx):\n        for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item", "method_name": "stop_at", "docstring_tokens": "Stops iterating before yielding the specified idx ."}
{"idx": "cosqa-train-13623", "doc": "how to create a tokenization code in python", "code": "def token(name):\n        def wrap(f):\n        tokenizers.append((name, f))\n        return f\n\n    return wrap", "method_name": "token", "docstring_tokens": "Marker for a token"}
{"idx": "cosqa-train-19558", "doc": "python raise without parentheses", "code": "def assert_or_raise(stmt: bool, exception: Exception,\n                    *exception_args, **exception_kwargs) -> None:\n    if not stmt:\n    raise exception(*exception_args, **exception_kwargs)", "method_name": "assert_or_raise", "docstring_tokens": "If the statement is false raise the given exception ."}
{"idx": "cosqa-train-7659", "doc": "how to seperate list with commas python", "code": "def _return_comma_list(self, l):\n                if isinstance(l, (text_type, int)):\n            return l\n\n        if not isinstance(l, list):\n            raise TypeError(l, ' should be a list of integers, \\\nnot {0}'.format(type(l)))\n\n        str_ids = ','.join(str(i) for i in l)\n\n        return str_ids", "method_name": "_return_comma_list", "docstring_tokens": "get a list and return a string with comma separated list values Examples [ to ta ] will return to ta ."}
{"idx": "cosqa-train-6056", "doc": "python asynchronous function call return", "code": "def asynchronous(function, event):\n        thread = Thread(target=synchronous, args=(function, event))\n    thread.daemon = True\n    thread.start()", "method_name": "asynchronous", "docstring_tokens": "Runs the function asynchronously taking care of exceptions ."}
{"idx": "cosqa-train-11671", "doc": "how to make a seconds to time in python", "code": "def time2seconds(t):\n        return t.hour * 3600 + t.minute * 60 + t.second + float(t.microsecond) / 1e6", "method_name": "time2seconds", "docstring_tokens": "Returns seconds since 0h00 ."}
{"idx": "cosqa-train-14597", "doc": "python cast true or false as numbers", "code": "def _to_numeric(val):\n        if isinstance(val, (int, float, datetime.datetime, datetime.timedelta)):\n        return val\n    return float(val)", "method_name": "_to_numeric", "docstring_tokens": "Helper function for conversion of various data types into numeric representation ."}
{"idx": "cosqa-train-2166", "doc": "add milliseconds to datetime python", "code": "def datetime_to_ms(dt):\n        seconds = calendar.timegm(dt.utctimetuple())\n    return seconds * 1000 + int(dt.microsecond / 1000)", "method_name": "datetime_to_ms", "docstring_tokens": "Converts a datetime to a millisecond accuracy timestamp"}
{"idx": "cosqa-train-7579", "doc": "how to read the last n lines of a program on python", "code": "def get_readline_tail(self, n=10):\n                end = self.shell.readline.get_current_history_length() + 1\n        start = max(end-n, 1)\n        ghi = self.shell.readline.get_history_item\n        return [ghi(x) for x in range(start, end)]", "method_name": "get_readline_tail", "docstring_tokens": "Get the last n items in readline history ."}
{"idx": "cosqa-train-11454", "doc": "python mysql get list of table columns", "code": "def get_table_columns(dbconn, tablename):\n        cur = dbconn.cursor()\n    cur.execute(\"PRAGMA table_info('%s');\" % tablename)\n    info = cur.fetchall()\n    cols = [(i[1], i[2]) for i in info]\n    return cols", "method_name": "get_table_columns", "docstring_tokens": "Return a list of tuples specifying the column name and type"}
{"idx": "cosqa-train-17712", "doc": "how to get domain part of a url in python", "code": "def url_host(url: str) -> str:\n        from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''", "method_name": "url_host", "docstring_tokens": "Parses hostname from URL . : param url : URL : return : hostname"}
{"idx": "cosqa-train-18531", "doc": "python flatten a nested dictionaary", "code": "def flatten_multidict(multidict):\n        return dict([(key, value if len(value) > 1 else value[0])\n                 for (key, value) in multidict.iterlists()])", "method_name": "flatten_multidict", "docstring_tokens": "Return flattened dictionary from MultiDict ."}
{"idx": "cosqa-train-3393", "doc": "python session set get", "code": "def _session_set(self, key, value):\n                self.session[self._session_key(key)] = value", "method_name": "_session_set", "docstring_tokens": "Saves a value to session ."}
{"idx": "cosqa-dev-5", "doc": "python save graph into file", "code": "def to_dotfile(G: nx.DiGraph, filename: str):\n        A = to_agraph(G)\n    A.write(filename)", "method_name": "to_dotfile", "docstring_tokens": "Output a networkx graph to a DOT file ."}
{"idx": "cosqa-train-10817", "doc": "chmod python windows to remove file", "code": "def rmfile(path):\n        if osp.isfile(path):\n        if is_win:\n            os.chmod(path, 0o777)\n        os.remove(path)", "method_name": "rmfile", "docstring_tokens": "Ensure file deleted also on * Windows * where read - only files need special treatment ."}
{"idx": "cosqa-train-6390", "doc": "add suffixes on concat python", "code": "def add_suffix(fullname, suffix):\n        name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext", "method_name": "add_suffix", "docstring_tokens": "Add suffix to a full file name"}
{"idx": "cosqa-train-11396", "doc": "how to check python object iterable", "code": "def is_iterable_but_not_string(obj):\n        return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)", "method_name": "is_iterable_but_not_string", "docstring_tokens": "Determine whether or not obj is iterable but not a string ( eg a list set tuple etc ) ."}
{"idx": "cosqa-train-8122", "doc": "python 3 tkinter open file dialog", "code": "def askopenfilename(**kwargs):\n        try:\n        from Tkinter import Tk\n        import tkFileDialog as filedialog\n    except ImportError:\n        from tkinter import Tk, filedialog\n    root = Tk()\n    root.withdraw()\n    root.update()\n    filenames = filedialog.askopenfilename(**kwargs)\n    root.destroy()\n    return filenames", "method_name": "askopenfilename", "docstring_tokens": "Return file name ( s ) from Tkinter s file open dialog ."}
{"idx": "cosqa-train-11614", "doc": "how to indent self python", "code": "def _pad(self):\n        if self._indent:\n      self.whitespace(self._indent * len(self._open_elements))", "method_name": "_pad", "docstring_tokens": "Pads the output with an amount of indentation appropriate for the number of open element ."}
{"idx": "cosqa-train-10474", "doc": "tracking centroid of an object python", "code": "def compute_centroid(points):\n        lats = [p[1] for p in points]\n    lons = [p[0] for p in points]\n    return Point(np.mean(lats), np.mean(lons), None)", "method_name": "compute_centroid", "docstring_tokens": "Computes the centroid of set of points"}
{"idx": "cosqa-train-10122", "doc": "python3 ctypes return float array", "code": "def cfloat32_array_to_numpy(cptr, length):\n        if isinstance(cptr, ctypes.POINTER(ctypes.c_float)):\n        return np.fromiter(cptr, dtype=np.float32, count=length)\n    else:\n        raise RuntimeError('Expected float pointer')", "method_name": "cfloat32_array_to_numpy", "docstring_tokens": "Convert a ctypes float pointer array to a numpy array ."}
{"idx": "cosqa-train-13872", "doc": "how to make paragraphs in python", "code": "def paragraph(separator='\\n\\n', wrap_start='', wrap_end='',\n              html=False, sentences_quantity=3):\n        return paragraphs(quantity=1, separator=separator, wrap_start=wrap_start,\n                      wrap_end=wrap_end, html=html,\n                      sentences_quantity=sentences_quantity)", "method_name": "paragraph", "docstring_tokens": "Return a random paragraph ."}
{"idx": "cosqa-train-17177", "doc": "python rest requests delete", "code": "def delete(self, endpoint: str, **kwargs) -> dict:\n                return self._request('DELETE', endpoint, **kwargs)", "method_name": "delete", "docstring_tokens": "HTTP DELETE operation to API endpoint ."}
{"idx": "cosqa-train-5418", "doc": "python replace month number", "code": "def replace_month_abbr_with_num(date_str, lang=DEFAULT_DATE_LANG):\n        num, abbr = get_month_from_date_str(date_str, lang)\n    return re.sub(abbr, str(num), date_str, flags=re.IGNORECASE)", "method_name": "replace_month_abbr_with_num", "docstring_tokens": "Replace month strings occurrences with month number ."}
{"idx": "cosqa-train-9873", "doc": "how to tell what type of data object is in python", "code": "def is_integer(obj):\n        if PYTHON3:\n        return isinstance(obj, int)\n    return isinstance(obj, (int, long))", "method_name": "is_integer", "docstring_tokens": "Is this an integer ."}
{"idx": "cosqa-train-13440", "doc": "python jsonschema validate schema file", "code": "def _validate(data, schema, ac_schema_safe=True, **options):\n        try:\n        jsonschema.validate(data, schema, **options)\n\n    except (jsonschema.ValidationError, jsonschema.SchemaError,\n            Exception) as exc:\n        if ac_schema_safe:\n            return (False, str(exc))          raise\n\n    return (True, '')", "method_name": "_validate", "docstring_tokens": "See the descritpion of : func : validate for more details of parameters and return value ."}
{"idx": "cosqa-train-18685", "doc": "get wechat access token python", "code": "def access_token(self):\n                access_token = self.session.get(self.access_token_key)\n        if access_token:\n            if not self.expires_at:\n                                return access_token\n\n            timestamp = time.time()\n            if self.expires_at - timestamp > 60:\n                return access_token\n\n        self.fetch_access_token()\n        return self.session.get(self.access_token_key)", "method_name": "access_token", "docstring_tokens": "WeChat access token"}
{"idx": "cosqa-train-12523", "doc": "python change str value to int", "code": "def str2int(num, radix=10, alphabet=BASE85):\n        return NumConv(radix, alphabet).str2int(num)", "method_name": "str2int", "docstring_tokens": "helper function for quick base conversions from strings to integers"}
{"idx": "cosqa-train-7800", "doc": "implementing drag and drop python", "code": "def drag_and_drop(self, droppable):\n                self.scroll_to()\n        ActionChains(self.parent.driver).drag_and_drop(self._element, droppable._element).perform()", "method_name": "drag_and_drop", "docstring_tokens": "Performs drag a element to another elmenet ."}
{"idx": "cosqa-train-9131", "doc": "get unique list from two lists python", "code": "def unique_list(lst):\n        uniq = []\n    for item in lst:\n        if item not in uniq:\n            uniq.append(item)\n    return uniq", "method_name": "unique_list", "docstring_tokens": "Make a list unique retaining order of initial appearance ."}
{"idx": "cosqa-train-5981", "doc": "python 3 not runnning in git bash", "code": "def check_git():\n        try:\n        with open(os.devnull, \"wb\") as devnull:\n            subprocess.check_call([\"git\", \"--version\"], stdout=devnull, stderr=devnull)\n    except:\n        raise RuntimeError(\"Please make sure git is installed and on your path.\")", "method_name": "check_git", "docstring_tokens": "Check if git command is available ."}
{"idx": "cosqa-train-15181", "doc": "create unknown number of names to print in python", "code": "def prt_nts(data_nts, prtfmt=None, prt=sys.stdout, nt_fields=None, **kws):\n        prt_txt(prt, data_nts, prtfmt, nt_fields, **kws)", "method_name": "prt_nts", "docstring_tokens": "Print list of namedtuples into a table using prtfmt ."}
{"idx": "cosqa-train-13426", "doc": "python json if element exists", "code": "def task_property_present_predicate(service, task, prop):\n        try:\n        response = get_service_task(service, task)\n    except Exception as e:\n        pass\n\n    return (response is not None) and (prop in response)", "method_name": "task_property_present_predicate", "docstring_tokens": "True if the json_element passed is present for the task specified ."}
{"idx": "cosqa-train-16586", "doc": "number of unique values in list python", "code": "def count_list(the_list):\n        count = the_list.count\n    result = [(item, count(item)) for item in set(the_list)]\n    result.sort()\n    return result", "method_name": "count_list", "docstring_tokens": "Generates a count of the number of times each unique item appears in a list"}
{"idx": "cosqa-train-13950", "doc": "how to randomize items in a list in python", "code": "def get_randomized_guid_sample(self, item_count):\n                dataset = self.get_whitelist()\n        random.shuffle(dataset)\n        return dataset[:item_count]", "method_name": "get_randomized_guid_sample", "docstring_tokens": "Fetch a subset of randomzied GUIDs from the whitelist"}
{"idx": "cosqa-train-19258", "doc": "python windows check for keypress", "code": "def _kbhit_unix() -> bool:\n        dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []", "method_name": "_kbhit_unix", "docstring_tokens": "Under UNIX : is a keystroke available?"}
{"idx": "cosqa-train-14549", "doc": "python bind scrollbar to canvas", "code": "def set_scrollregion(self, event=None):\n                self.canvas.configure(scrollregion=self.canvas.bbox('all'))", "method_name": "set_scrollregion", "docstring_tokens": "Set the scroll region on the canvas"}
{"idx": "cosqa-train-13999", "doc": "python setlevel how to only record error", "code": "def print_fatal_results(results, level=0):\n        print_level(logger.critical, _RED + \"[X] Fatal Error: %s\", level, results.error)", "method_name": "print_fatal_results", "docstring_tokens": "Print fatal errors that occurred during validation runs ."}
{"idx": "cosqa-dev-442", "doc": "format string with *args python", "code": "def safe_format(s, **kwargs):\n    return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))", "method_name": "safe_format", "docstring_tokens": ": type s str"}
{"idx": "cosqa-train-17869", "doc": "python get hostip from url", "code": "def url_host(url: str) -> str:\n        from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''", "method_name": "url_host", "docstring_tokens": "Parses hostname from URL . : param url : URL : return : hostname"}
{"idx": "cosqa-train-11505", "doc": "python numpy masked vailding", "code": "def asMaskedArray(self):\n                return ma.masked_array(data=self.data, mask=self.mask, fill_value=self.fill_value)", "method_name": "asMaskedArray", "docstring_tokens": "Creates converts to a masked array"}
{"idx": "cosqa-train-14720", "doc": "python child widget close signal", "code": "def closeEvent(self, e):\n                self.emit('close_widget')\n        super(DockWidget, self).closeEvent(e)", "method_name": "closeEvent", "docstring_tokens": "Qt slot when the window is closed ."}
{"idx": "cosqa-train-17314", "doc": "python read from csv into numpy array", "code": "def csv_to_numpy(string_like, dtype=None):          stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')", "method_name": "csv_to_numpy", "docstring_tokens": "Convert a CSV object to a numpy array ."}
{"idx": "cosqa-train-19154", "doc": "cast string to bytearray python", "code": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"      if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')", "method_name": "to_bytes", "docstring_tokens": "Convert anything to a bytearray . See - http : // stackoverflow . com / questions / 7585435 / best - way - to - convert - string - to - bytes - in - python - 3 - http : // stackoverflow . com / questions / 10459067 / how - to - convert - my - bytearrayb - x9e - x18k - x9a - to - something - like - this - x9e - x1"}
{"idx": "cosqa-train-12100", "doc": "load str into python object", "code": "def loads(s, model=None, parser=None):\n        with StringIO(s) as f:\n        return load(f, model=model, parser=parser)", "method_name": "loads", "docstring_tokens": "Deserialize s ( a str ) to a Python object ."}
{"idx": "cosqa-train-13463", "doc": "python ldap get all groups a user belongs to", "code": "def get_groups(self, username):\n                username = ldap.filter.escape_filter_chars(self._byte_p2(username))\n        userdn = self._get_user(username, NO_ATTR)\n\n        searchfilter = self.group_filter_tmpl % {\n            'userdn': userdn,\n            'username': username\n        }\n\n        groups = self._search(searchfilter, NO_ATTR, self.groupdn)\n        ret = []\n        for entry in groups:\n            ret.append(self._uni(entry[0]))\n        return ret", "method_name": "get_groups", "docstring_tokens": "Get all groups of a user"}
{"idx": "cosqa-train-19108", "doc": "python check type if string", "code": "def is_unicode(string):\n        str_type = str(type(string))\n\n    if str_type.find('str') > 0 or str_type.find('unicode') > 0:\n        return True\n\n    return False", "method_name": "is_unicode", "docstring_tokens": "Validates that the object itself is some kinda string"}
{"idx": "cosqa-train-10931", "doc": "python get current globals", "code": "def caller_locals():\n        import inspect\n    frame = inspect.currentframe()\n    try:\n        return frame.f_back.f_back.f_locals\n    finally:\n        del frame", "method_name": "caller_locals", "docstring_tokens": "Get the local variables in the caller s frame ."}
{"idx": "cosqa-train-6946", "doc": "get child loggers python", "code": "def _get_loggers():\n        from .. import loader\n    modules = loader.get_package_modules('logger')\n    return list(loader.get_plugins(modules, [_Logger]))", "method_name": "_get_loggers", "docstring_tokens": "Return list of Logger classes ."}
{"idx": "cosqa-train-19023", "doc": "how to know if a text file is empty in python", "code": "def _cnx_is_empty(in_file):\n        with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True", "method_name": "_cnx_is_empty", "docstring_tokens": "Check if cnr or cns files are empty ( only have a header )"}
{"idx": "cosqa-train-15782", "doc": "python normal distribution p values", "code": "def EvalGaussianPdf(x, mu, sigma):\n        return scipy.stats.norm.pdf(x, mu, sigma)", "method_name": "EvalGaussianPdf", "docstring_tokens": "Computes the unnormalized PDF of the normal distribution ."}
{"idx": "cosqa-train-17937", "doc": "python ctypes array of arrays", "code": "def GetAllPixelColors(self) -> ctypes.Array:\n                return self.GetPixelColorsOfRect(0, 0, self.Width, self.Height)", "method_name": "GetAllPixelColors", "docstring_tokens": "Return ctypes . Array an iterable array of int values in argb ."}
{"idx": "cosqa-train-14548", "doc": "scale 1d array python to between 0 and 1", "code": "def _rescale_array(self, array, scale, zero):\n                if scale != 1.0:\n            sval = numpy.array(scale, dtype=array.dtype)\n            array *= sval\n        if zero != 0.0:\n            zval = numpy.array(zero, dtype=array.dtype)\n            array += zval", "method_name": "_rescale_array", "docstring_tokens": "Scale the input array"}
{"idx": "cosqa-train-12156", "doc": "python upper case lower case converter", "code": "def upcaseTokens(s,l,t):\n        return [ tt.upper() for tt in map(_ustr,t) ]", "method_name": "upcaseTokens", "docstring_tokens": "Helper parse action to convert tokens to upper case ."}
{"idx": "cosqa-train-8061", "doc": "ply python expression evaluator", "code": "def build(self, **kwargs):\n                self.lexer = ply.lex.lex(object=self, **kwargs)", "method_name": "build", "docstring_tokens": "Build the lexer ."}
{"idx": "cosqa-train-13196", "doc": "python hashlib calc sha1 of file", "code": "def _get_file_sha1(file):\n        bits = file.read()\n    file.seek(0)\n    h = hashlib.new('sha1', bits).hexdigest()\n    return h", "method_name": "_get_file_sha1", "docstring_tokens": "Return the SHA1 hash of the given a file - like object as file . This will seek the file back to 0 when it s finished ."}
{"idx": "cosqa-train-11579", "doc": "python pdb no capture std output", "code": "def set_trace():\n            pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)", "method_name": "set_trace", "docstring_tokens": "Start a Pdb instance at the calling frame with stdout routed to sys . __stdout__ ."}
{"idx": "cosqa-train-17702", "doc": "python how to write a factorial", "code": "def factorial(n, mod=None):\n        if not (isinstance(n, int) and n >= 0):\n        raise ValueError(\"'n' must be a non-negative integer.\")\n    if mod is not None and not (isinstance(mod, int) and mod > 0):\n        raise ValueError(\"'mod' must be a positive integer\")\n    result = 1\n    if n == 0:\n        return 1\n    for i in range(2, n+1):\n        result *= i\n        if mod:\n            result %= mod\n    return result", "method_name": "factorial", "docstring_tokens": "Calculates factorial iteratively . If mod is not None then return ( n! % mod ) Time Complexity - O ( n )"}
{"idx": "cosqa-train-11019", "doc": "python get the last column", "code": "def get_last_row(dbconn, tablename, n=1, uuid=None):\n        return fetch(dbconn, tablename, n, uuid, end=True)", "method_name": "get_last_row", "docstring_tokens": "Returns the last n rows in the table"}
{"idx": "cosqa-train-13220", "doc": "python how to change file extension", "code": "def lower_ext(abspath):\n        fname, ext = os.path.splitext(abspath)\n    return fname + ext.lower()", "method_name": "lower_ext", "docstring_tokens": "Convert file extension to lowercase ."}
{"idx": "cosqa-train-6758", "doc": "python get process memory info", "code": "def machine_info():\n        import psutil\n    BYTES_IN_GIG = 1073741824.0\n    free_bytes = psutil.virtual_memory().total\n    return [{\"memory\": float(\"%.1f\" % (free_bytes / BYTES_IN_GIG)), \"cores\": multiprocessing.cpu_count(),\n             \"name\": socket.gethostname()}]", "method_name": "machine_info", "docstring_tokens": "Retrieve core and memory information for the current machine ."}
{"idx": "cosqa-dev-481", "doc": "check if 2 string are equal python", "code": "def indexes_equal(a: Index, b: Index) -> bool:\n        return str(a) == str(b)", "method_name": "indexes_equal", "docstring_tokens": "Are two indexes equal? Checks by comparing str () versions of them . ( AM UNSURE IF THIS IS ENOUGH . )"}
{"idx": "cosqa-train-11094", "doc": "flask python create one table sqlalchemy", "code": "def create_db(app, appbuilder):\n        from flask_appbuilder.models.sqla import Base\n\n    _appbuilder = import_application(app, appbuilder)\n    engine = _appbuilder.get_session.get_bind(mapper=None, clause=None)\n    Base.metadata.create_all(engine)\n    click.echo(click.style(\"DB objects created\", fg=\"green\"))", "method_name": "create_db", "docstring_tokens": "Create all your database objects ( SQLAlchemy specific ) ."}
{"idx": "cosqa-train-8731", "doc": "clean output folder in python", "code": "def cleanup():\n        if _output_dir and os.path.exists(_output_dir):\n        log.msg_warn(\"Cleaning up output directory at '{output_dir}' ...\"\n                     .format(output_dir=_output_dir))\n        if not _dry_run:\n            shutil.rmtree(_output_dir)", "method_name": "cleanup", "docstring_tokens": "Cleanup the output directory"}
{"idx": "cosqa-train-19285", "doc": "python print nodes binary tree", "code": "def debugTreePrint(node,pfx=\"->\"):\n    print pfx,node.item\n  for c in node.children:\n    debugTreePrint(c,\"  \"+pfx)", "method_name": "debugTreePrint", "docstring_tokens": "Purely a debugging aid : Ascii - art picture of a tree descended from node"}
{"idx": "cosqa-train-15941", "doc": "python query string parsing", "code": "def urlencoded(body, charset='ascii', **kwargs):\n        return parse_query_string(text(body, charset=charset), False)", "method_name": "urlencoded", "docstring_tokens": "Converts query strings into native Python objects"}
{"idx": "cosqa-train-15200", "doc": "cycle through a folder of images python", "code": "def each_img(dir_path):\n        for fname in os.listdir(dir_path):\n        if fname.endswith('.jpg') or fname.endswith('.png') or fname.endswith('.bmp'):\n            yield fname", "method_name": "each_img", "docstring_tokens": "Iterates through each image in the given directory . ( not recursive ) : param dir_path : Directory path where images files are present : return : Iterator to iterate through image files"}
{"idx": "cosqa-train-17344", "doc": "check if a date is valid python", "code": "def valid_date(x: str) -> bool:\n        try:\n        if x != dt.datetime.strptime(x, DATE_FORMAT).strftime(DATE_FORMAT):\n            raise ValueError\n        return True\n    except ValueError:\n        return False", "method_name": "valid_date", "docstring_tokens": "Retrun True if x is a valid YYYYMMDD date ; otherwise return False ."}
{"idx": "cosqa-train-5599", "doc": "python spherical bessel functions", "code": "def sbessely(x, N):\n        out = np.zeros(N, dtype=np.float64)\n\n    out[0] = -np.cos(x) / x\n    out[1] = -np.cos(x) / (x ** 2) - np.sin(x) / x\n\n    for n in xrange(2, N):\n        out[n] = ((2.0 * n - 1.0) / x) * out[n - 1] - out[n - 2]\n\n    return out", "method_name": "sbessely", "docstring_tokens": "Returns a vector of spherical bessel functions yn : x : The argument . N : values of n will run from 0 to N - 1 ."}
{"idx": "cosqa-train-19367", "doc": "how to check a file is empty in python", "code": "def _cnx_is_empty(in_file):\n        with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True", "method_name": "_cnx_is_empty", "docstring_tokens": "Check if cnr or cns files are empty ( only have a header )"}
{"idx": "cosqa-train-14104", "doc": "python stop process multiprocessing", "code": "def stop(self, timeout=None):\n                self.stopping = True\n\n        for process in list(self.processes):\n            self.stop_process(process, timeout=timeout)", "method_name": "stop", "docstring_tokens": "Initiates a graceful stop of the processes"}
{"idx": "cosqa-train-9279", "doc": "python make sure all words are separated by a single space", "code": "def sanitize_word(s):\n        s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')", "method_name": "sanitize_word", "docstring_tokens": "Remove non - alphanumerical characters from metric word . And trim excessive underscores ."}
{"idx": "cosqa-train-12138", "doc": "making a multidimensional array of only 1 in python", "code": "def A(*a):\n        return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "method_name": "A", "docstring_tokens": "convert iterable object into numpy array"}
{"idx": "cosqa-train-15519", "doc": "python initialize variable of an object", "code": "def __init__(self):\n                self.state = self.STATE_INITIALIZING\n        self.state_start = time.time()", "method_name": "__init__", "docstring_tokens": "Initialize the state of the object"}
{"idx": "cosqa-train-6551", "doc": "python elasticsearch limit results", "code": "def scan(client, query=None, scroll='5m', raise_on_error=True,\n         preserve_order=False, size=1000, **kwargs):\n        if not preserve_order:\n        kwargs['search_type'] = 'scan'\n        resp = client.search(body=query, scroll=scroll, size=size, **kwargs)\n\n    scroll_id = resp.get('_scroll_id')\n    if scroll_id is None:\n        return\n\n    first_run = True\n    while True:\n                if preserve_order and first_run:\n            first_run = False\n        else:\n            resp = client.scroll(scroll_id, scroll=scroll)\n\n        for hit in resp['hits']['hits']:\n            yield hit\n\n                if resp[\"_shards\"][\"failed\"]:\n            logger.warning(\n                'Scroll request has failed on %d shards out of %d.',\n                resp['_shards']['failed'], resp['_shards']['total']\n            )\n            if raise_on_error:\n                raise ScanError(\n                    'Scroll request has failed on %d shards out of %d.' %\n                    (resp['_shards']['failed'], resp['_shards']['total'])\n                )\n\n        scroll_id = resp.get('_scroll_id')\n                if scroll_id is None or not resp['hits']['hits']:\n            break", "method_name": "scan", "docstring_tokens": "Simple abstraction on top of the : meth : ~elasticsearch . Elasticsearch . scroll api - a simple iterator that yields all hits as returned by underlining scroll requests . By default scan does not return results in any pre - determined order . To have a standard order in the returned documents ( either by score or explicit sort definition ) when scrolling use preserve_order = True . This may be an expensive operation and will negate the performance benefits of using scan . : arg client : instance of : class : ~elasticsearch . Elasticsearch to use : arg query : body for the : meth : ~elasticsearch . Elasticsearch . search api : arg scroll : Specify how long a consistent view of the index should be maintained for scrolled search : arg raise_on_error : raises an exception ( ScanError ) if an error is encountered ( some shards fail to execute ) . By default we raise . : arg preserve_order : don t set the search_type to scan - this will cause the scroll to paginate with preserving the order . Note that this can be an extremely expensive operation and can easily lead to unpredictable results use with caution . : arg size : size ( per shard ) of the batch send at each iteration . Any additional keyword arguments will be passed to the initial : meth : ~elasticsearch . Elasticsearch . search call :: scan ( es query = { query : { match : { title : python }}} index = orders - * doc_type = books )"}
{"idx": "cosqa-train-5203", "doc": "how to force exit python without raise", "code": "def __exit__(self, type, value, traceback):\n                if not self.asarfile:\n            return\n\n        self.asarfile.close()\n        self.asarfile = None", "method_name": "__exit__", "docstring_tokens": "When the with statement ends ."}
{"idx": "cosqa-train-10049", "doc": "python weak reference to bound method", "code": "def attr_cache_clear(self):\n        node = extract_node(\"\"\"def cache_clear(self): pass\"\"\")\n        return BoundMethod(proxy=node, bound=self._instance.parent.scope())", "method_name": "attr_cache_clear", "docstring_tokens": ""}
{"idx": "cosqa-train-10725", "doc": "calling index iterable python", "code": "def stop_at(iterable, idx):\n        for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item", "method_name": "stop_at", "docstring_tokens": "Stops iterating before yielding the specified idx ."}
{"idx": "cosqa-train-12736", "doc": "python datetime maybe undefined", "code": "def date_to_datetime(x):\n        if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x", "method_name": "date_to_datetime", "docstring_tokens": "Convert a date into a datetime"}
{"idx": "cosqa-train-8954", "doc": "python go to next page", "code": "def accel_next(self, *args):\n                if self.get_notebook().get_current_page() + 1 == self.get_notebook().get_n_pages():\n            self.get_notebook().set_current_page(0)\n        else:\n            self.get_notebook().next_page()\n        return True", "method_name": "accel_next", "docstring_tokens": "Callback to go to the next tab . Called by the accel key ."}
{"idx": "cosqa-train-6854", "doc": "filling null value sin data frame in python", "code": "def clean_dataframe(df):\n        df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df", "method_name": "clean_dataframe", "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"}
{"idx": "cosqa-train-5484", "doc": "python run external command and get output", "code": "def check_output(args, env=None, sp=subprocess):\n        log.debug('calling %s with env %s', args, env)\n    output = sp.check_output(args=args, env=env)\n    log.debug('output: %r', output)\n    return output", "method_name": "check_output", "docstring_tokens": "Call an external binary and return its stdout ."}
{"idx": "cosqa-train-13589", "doc": "how to compile python program to use in c++", "code": "def cpp_prog_builder(build_context, target):\n        yprint(build_context.conf, 'Build CppProg', target)\n    workspace_dir = build_context.get_workspace('CppProg', target.name)\n    build_cpp(build_context, target, target.compiler_config, workspace_dir)", "method_name": "cpp_prog_builder", "docstring_tokens": "Build a C ++ binary executable"}
{"idx": "cosqa-train-13360", "doc": "python img to bytearray", "code": "def to_bytes(self):\n\t\tchunks = [PNG_SIGN]\n\t\tchunks.extend(c[1] for c in self.chunks)\n\t\treturn b\"\".join(chunks)", "method_name": "to_bytes", "docstring_tokens": "Convert the entire image to bytes . : rtype : bytes"}
{"idx": "cosqa-train-9903", "doc": "how to use access token oauth python", "code": "def fetch_token(self, **kwargs):\n                return super(AsanaOAuth2Session, self).fetch_token(self.token_url, client_secret=self.client_secret, **kwargs)", "method_name": "fetch_token", "docstring_tokens": "Exchange a code ( and state token ) for a bearer token"}
{"idx": "cosqa-train-15551", "doc": "have python line continue on to next line", "code": "def advance_one_line(self):\n        current_line = self._current_token.line_number\n    while current_line == self._current_token.line_number:\n      self._current_token = ConfigParser.Token(*next(self._token_generator))", "method_name": "advance_one_line", "docstring_tokens": "Advances to next line ."}
{"idx": "cosqa-train-10234", "doc": "precision of ints in python", "code": "def round_to_int(number, precision):\n        precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded", "method_name": "round_to_int", "docstring_tokens": "Round a number to a precision"}
{"idx": "cosqa-train-5838", "doc": "modify the dice roll program to call a function for the die roll s python", "code": "def roll_dice():\n        sums = 0      while True:\n        roll = random.randint(1, 6)\n        sums += roll\n        if(input(\"Enter y or n to continue: \").upper()) == 'N':\n            print(sums)              break", "method_name": "roll_dice", "docstring_tokens": "Roll a die ."}
{"idx": "cosqa-train-10253", "doc": "python 'namespace' object is not iterable", "code": "def __add_namespaceinfo(self, ni):\n                self.__ns_uri_map[ni.uri] = ni\n        for prefix in ni.prefixes:\n            self.__prefix_map[prefix] = ni", "method_name": "__add_namespaceinfo", "docstring_tokens": "Internal method to directly add a _NamespaceInfo object to this set . No sanity checks are done ( e . g . checking for prefix conflicts ) so be sure to do it yourself before calling this ."}
{"idx": "cosqa-train-3453", "doc": "how to specify seed for python random", "code": "def generate_seed(seed):\n        if seed is None:\n        random.seed()\n        seed = random.randint(0, sys.maxsize)\n    random.seed(a=seed)\n\n    return seed", "method_name": "generate_seed", "docstring_tokens": "Generate seed for random number generator"}
{"idx": "cosqa-train-10014", "doc": "python use default arg", "code": "def arg_default(*args, **kwargs):\n        parser = argparse.ArgumentParser()\n    parser.add_argument(*args, **kwargs)\n    args = vars(parser.parse_args([]))\n    _, default = args.popitem()\n    return default", "method_name": "arg_default", "docstring_tokens": "Return default argument value as given by argparse s add_argument () ."}
{"idx": "cosqa-train-17635", "doc": "python change array dtype to int", "code": "def to_int64(a):\n            def promote_i4(typestr):\n        if typestr[1:] == 'i4':\n            typestr = typestr[0]+'i8'\n        return typestr\n\n    dtype = [(name, promote_i4(typestr)) for name,typestr in a.dtype.descr]\n    return a.astype(dtype)", "method_name": "to_int64", "docstring_tokens": "Return view of the recarray with all int32 cast to int64 ."}
{"idx": "cosqa-train-10859", "doc": "python forcible close socket before opening", "code": "def close(self):\n        try:\n      self._conn.send((self._CLOSE, None))\n      self._conn.close()\n    except IOError:\n            pass\n    self._process.join()", "method_name": "close", "docstring_tokens": "Send a close message to the external process and join it ."}
{"idx": "cosqa-train-11902", "doc": "python series'value non zero index", "code": "def reduce_fn(x):\n        values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN", "method_name": "reduce_fn", "docstring_tokens": "Aggregation function to get the first non - zero value ."}
{"idx": "cosqa-train-11300", "doc": "how to add a number to certain elements of an array numpy python", "code": "def _increment(arr, indices):\n        arr = _as_array(arr)\n    indices = _as_array(indices)\n    bbins = np.bincount(indices)\n    arr[:len(bbins)] += bbins\n    return arr", "method_name": "_increment", "docstring_tokens": "Increment some indices in a 1D vector of non - negative integers . Repeated indices are taken into account ."}
{"idx": "cosqa-train-12149", "doc": "python unit test and coverage at same time", "code": "def coverage(ctx, opts=\"\"):\n        return test(ctx, coverage=True, include_slow=True, opts=opts)", "method_name": "coverage", "docstring_tokens": "Execute all tests ( normal and slow ) with coverage enabled ."}
{"idx": "cosqa-train-987", "doc": "python only list files with specific extension", "code": "def glob_by_extensions(directory, extensions):\n        directorycheck(directory)\n    files = []\n    xt = files.extend\n    for ex in extensions:\n        xt(glob.glob('{0}/*.{1}'.format(directory, ex)))\n    return files", "method_name": "glob_by_extensions", "docstring_tokens": "Returns files matched by all extensions in the extensions list"}
{"idx": "cosqa-train-11054", "doc": "python global type hinting", "code": "def is_builtin_type(tp):\n        return hasattr(__builtins__, tp.__name__) and tp is getattr(__builtins__, tp.__name__)", "method_name": "is_builtin_type", "docstring_tokens": "Checks if the given type is a builtin one ."}
{"idx": "cosqa-train-9558", "doc": "how to make a function in python to take the average of list numbers", "code": "def calc_list_average(l):\n        total = 0.0\n    for value in l:\n        total += value\n    return total / len(l)", "method_name": "calc_list_average", "docstring_tokens": "Calculates the average value of a list of numbers Returns a float"}
{"idx": "cosqa-train-15051", "doc": "check if two arrays are equal python", "code": "def numpy_aware_eq(a, b):\n        if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n        return np.array_equal(a, b)\n    if ((isinstance(a, Iterable) and isinstance(b, Iterable)) and\n            not isinstance(a, str) and not isinstance(b, str)):\n        if len(a) != len(b):\n            return False\n        return all(numpy_aware_eq(x, y) for x, y in zip(a, b))\n    return a == b", "method_name": "numpy_aware_eq", "docstring_tokens": "Return whether two objects are equal via recursion using : func : numpy . array_equal for comparing numpy arays ."}
{"idx": "cosqa-train-5478", "doc": "python round down numpy", "code": "def round_array(array_in):\n        if isinstance(array_in, ndarray):\n        return np.round(array_in).astype(int)\n    else:\n        return int(np.round(array_in))", "method_name": "round_array", "docstring_tokens": "arr_out = round_array ( array_in )"}
{"idx": "cosqa-dev-421", "doc": "python pywin32 screenshoot refresh", "code": "def win32_refresh_window(cls):\n                        handle = windll.kernel32.GetConsoleWindow()\n\n        RDW_INVALIDATE = 0x0001\n        windll.user32.RedrawWindow(handle, None, None, c_uint(RDW_INVALIDATE))", "method_name": "win32_refresh_window", "docstring_tokens": "Call win32 API to refresh the whole Window ."}
{"idx": "cosqa-train-13319", "doc": "get largest date from a list python", "code": "def _latest_date(self, query, datetime_field_name):\n                return list(\n            query.aggregate(django.db.models.Max(datetime_field_name)).values()\n        )[0]", "method_name": "_latest_date", "docstring_tokens": "Given a QuerySet and the name of field containing datetimes return the latest ( most recent ) date ."}
{"idx": "cosqa-train-11348", "doc": "python lock no blocking", "code": "def lock(self, block=True):\n\t\tself._locked = True\n\t\treturn self._lock.acquire(block)", "method_name": "lock", "docstring_tokens": "Lock connection from being used else where"}
{"idx": "cosqa-train-19073", "doc": "delete item from a set python", "code": "def remove_once(gset, elem):\n        remove = getattr(gset, 'remove', None)\n    if remove is not None: remove(elem)\n    else: del gset[elem]\n    return elem", "method_name": "remove_once", "docstring_tokens": "Remove the element from a set lists or dict . >>> L = [ Lucy ] ; S = set ( [ Sky ] ) ; D = { Diamonds : True } ; >>> remove_once ( L Lucy ) ; remove_once ( S Sky ) ; remove_once ( D Diamonds ) ; >>> print L S D [] set ( [] ) {}"}
{"idx": "cosqa-train-16040", "doc": "how to make a sentence into underscores with python", "code": "def us2mc(string):\n        return re.sub(r'_([a-z])', lambda m: (m.group(1).upper()), string)", "method_name": "us2mc", "docstring_tokens": "Transform an underscore_case string to a mixedCase string"}
{"idx": "cosqa-train-9920", "doc": "python timestamp remove timezone", "code": "def convert_tstamp(response):\n\tif response is None:\n\t\treturn response\n\n\ttz = timezone.utc if settings.USE_TZ else None\n\n\treturn datetime.datetime.fromtimestamp(response, tz)", "method_name": "convert_tstamp", "docstring_tokens": "Convert a Stripe API timestamp response ( unix epoch ) to a native datetime ."}
{"idx": "cosqa-train-9697", "doc": "python sanic change all object id to string", "code": "def generate_id(self, obj):\n                object_type = type(obj).__name__.lower()\n        return '{}_{}'.format(object_type, self.get_object_id(obj))", "method_name": "generate_id", "docstring_tokens": "Generate unique document id for ElasticSearch ."}
{"idx": "cosqa-train-9318", "doc": "python mock mark a test as expected failure", "code": "def assert_called(_mock_self):\n                self = _mock_self\n        if self.call_count == 0:\n            msg = (\"Expected '%s' to have been called.\" %\n                   self._mock_name or 'mock')\n            raise AssertionError(msg)", "method_name": "assert_called", "docstring_tokens": "assert that the mock was called at least once"}
{"idx": "cosqa-train-13071", "doc": "python get current users desktop", "code": "def get_current_desktop(self):\n                desktop = ctypes.c_long(0)\n        _libxdo.xdo_get_current_desktop(self._xdo, ctypes.byref(desktop))\n        return desktop.value", "method_name": "get_current_desktop", "docstring_tokens": "Get the current desktop . Uses _NET_CURRENT_DESKTOP of the EWMH spec ."}
{"idx": "cosqa-train-6354", "doc": "python connect to redis in other docker container", "code": "def __connect():\n        global redis_instance\n    if use_tcp_socket:\n        redis_instance = redis.StrictRedis(host=hostname, port=port)\n    else:\n        redis_instance = redis.StrictRedis(unix_socket_path=unix_socket)", "method_name": "__connect", "docstring_tokens": "Connect to a redis instance ."}
{"idx": "cosqa-train-7773", "doc": "python subplot second y axis", "code": "def show_yticklabels(self, row, column):\n                subplot = self.get_subplot_at(row, column)\n        subplot.show_yticklabels()", "method_name": "show_yticklabels", "docstring_tokens": "Show the y - axis tick labels for a subplot ."}
{"idx": "cosqa-train-18714", "doc": "python function to detect first element of list", "code": "def find_first_in_list(txt: str, str_list: [str]) -> int:          start = len(txt) + 1\n    for item in str_list:\n        if start > txt.find(item) > -1:\n            start = txt.find(item)\n    return start if len(txt) + 1 > start > -1 else -1", "method_name": "find_first_in_list", "docstring_tokens": "Returns the index of the earliest occurence of an item from a list in a string"}
{"idx": "cosqa-train-5201", "doc": "how to flip a matrix in python", "code": "def imflip(img, direction='horizontal'):\n        assert direction in ['horizontal', 'vertical']\n    if direction == 'horizontal':\n        return np.flip(img, axis=1)\n    else:\n        return np.flip(img, axis=0)", "method_name": "imflip", "docstring_tokens": "Flip an image horizontally or vertically ."}
{"idx": "cosqa-train-15243", "doc": "python full name of object from global", "code": "def _fullname(o):\n        return o.__module__ + \".\" + o.__name__ if o.__module__ else o.__name__", "method_name": "_fullname", "docstring_tokens": "Return the fully - qualified name of a function ."}
{"idx": "cosqa-train-17087", "doc": "check if input is an integer or boolean python", "code": "def is_integer(value: Any) -> bool:\n        return (isinstance(value, int) and not isinstance(value, bool)) or (\n        isinstance(value, float) and isfinite(value) and int(value) == value\n    )", "method_name": "is_integer", "docstring_tokens": "Return true if a value is an integer number ."}
{"idx": "cosqa-train-14642", "doc": "storing columns as array python", "code": "def to_array(self):\n                dt = np.dtype(list(zip(self.labels, (c.dtype for c in self.columns))))\n        arr = np.empty_like(self.columns[0], dt)\n        for label in self.labels:\n            arr[label] = self[label]\n        return arr", "method_name": "to_array", "docstring_tokens": "Convert the table to a structured NumPy array ."}
{"idx": "cosqa-train-15173", "doc": "create column in python by joining columns", "code": "def join_cols(cols):\n        return \", \".join([i for i in cols]) if isinstance(cols, (list, tuple, set)) else cols", "method_name": "join_cols", "docstring_tokens": "Join list of columns into a string for a SQL query"}
{"idx": "cosqa-train-16155", "doc": "how to remove blank lines in python file", "code": "def lines(input):\n        for raw_line in input:\n        line = raw_line.strip()\n        if line and not line.startswith('            yield strip_comments(line)", "method_name": "lines", "docstring_tokens": "Remove comments and empty lines"}
{"idx": "cosqa-train-11638", "doc": "how to know size of queue in python", "code": "def qsize(self):\n                self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n", "method_name": "qsize", "docstring_tokens": "Return the approximate size of the queue ( not reliable! ) ."}
{"idx": "cosqa-train-9868", "doc": "python substring index of", "code": "def get_substring_idxs(substr, string):\n        return [match.start() for match in re.finditer(substr, string)]", "method_name": "get_substring_idxs", "docstring_tokens": "Return a list of indexes of substr . If substr not found list is empty ."}
{"idx": "cosqa-train-19683", "doc": "comparing int to none python", "code": "def is_natural(x):\n        try:\n        is_integer = int(x) == x\n    except (TypeError, ValueError):\n        return False\n    return is_integer and x >= 0", "method_name": "is_natural", "docstring_tokens": "A non - negative integer ."}
{"idx": "cosqa-train-7857", "doc": "json to protobuf python", "code": "def toJson(protoObject, indent=None):\n            js = json_format.MessageToDict(protoObject, False)\n    return json.dumps(js, indent=indent)", "method_name": "toJson", "docstring_tokens": "Serialises a protobuf object as json"}
{"idx": "cosqa-train-11626", "doc": "how to join 2 data frames in python", "code": "def cross_join(df1, df2):\n        if len(df1) == 0:\n        return df2\n\n    if len(df2) == 0:\n        return df1\n\n            all_columns = pd.Index(list(df1.columns) + list(df2.columns))\n    df1['key'] = 1\n    df2['key'] = 1\n    return pd.merge(df1, df2, on='key').loc[:, all_columns]", "method_name": "cross_join", "docstring_tokens": "Return a dataframe that is a cross between dataframes df1 and df2"}
{"idx": "cosqa-train-18817", "doc": "how to product of a list in python", "code": "def dotproduct(X, Y):\n        return sum([x * y for x, y in zip(X, Y)])", "method_name": "dotproduct", "docstring_tokens": "Return the sum of the element - wise product of vectors x and y . >>> dotproduct ( [ 1 2 3 ] [ 1000 100 10 ] ) 1230"}
{"idx": "cosqa-train-9034", "doc": "get all dates between range datetime python", "code": "def dates_in_range(start_date, end_date):\n        return [\n        start_date + timedelta(n)\n        for n in range(int((end_date - start_date).days))\n    ]", "method_name": "dates_in_range", "docstring_tokens": "Returns all dates between two dates ."}
{"idx": "cosqa-train-12370", "doc": "python access file on remote", "code": "def get_remote_content(filepath):\n                with hide('running'):\n            temp = BytesIO()\n            get(filepath, temp)\n            content = temp.getvalue().decode('utf-8')\n        return content.strip()", "method_name": "get_remote_content", "docstring_tokens": "A handy wrapper to get a remote file content"}
{"idx": "cosqa-train-9399", "doc": "how to download txt file from internet in python", "code": "def get_dates_link(url):\n        urllib.request.urlretrieve(url, \"temp.txt\")\n    dates = get_dates_file(\"temp.txt\")\n    os.remove(\"temp.txt\")\n    return dates", "method_name": "get_dates_link", "docstring_tokens": "download the dates file from the internet and parse it as a dates file"}
{"idx": "cosqa-train-12507", "doc": "stopwords list remove python", "code": "def _removeStopwords(text_list):\n        output_list = []\n\n    for word in text_list:\n        if word.lower() not in _stopwords:\n            output_list.append(word)\n\n    return output_list", "method_name": "_removeStopwords", "docstring_tokens": "Removes stopwords contained in a list of words ."}
{"idx": "cosqa-train-7885", "doc": "limit on open file handles in python", "code": "def _increase_file_handle_limit():\n        logging.info('Increasing file handle limit to {}'.format(constants.FILE_HANDLE_LIMIT))\n    resource.setrlimit(resource.RLIMIT_NOFILE,\n                       (constants.FILE_HANDLE_LIMIT, resource.RLIM_INFINITY))", "method_name": "_increase_file_handle_limit", "docstring_tokens": "Raise the open file handles permitted by the Dusty daemon process and its child processes . The number we choose here needs to be within the OS X default kernel hard limit which is 10240 ."}
{"idx": "cosqa-train-6745", "doc": "determine the longest sentence in corpus in nlp python ocde", "code": "def get_longest_orf(orfs):\n        sorted_orf = sorted(orfs, key=lambda x: len(x['sequence']), reverse=True)[0]\n    return sorted_orf", "method_name": "get_longest_orf", "docstring_tokens": "Find longest ORF from the given list of ORFs ."}
{"idx": "cosqa-train-8615", "doc": "python deterministic dictionary printing", "code": "def pprint_for_ordereddict():\n        od_saved = OrderedDict.__repr__\n    try:\n        OrderedDict.__repr__ = dict.__repr__\n        yield\n    finally:\n        OrderedDict.__repr__ = od_saved", "method_name": "pprint_for_ordereddict", "docstring_tokens": "Context manager that causes pprint () to print OrderedDict objects as nicely as standard Python dictionary objects ."}
{"idx": "cosqa-train-10233", "doc": "remove namespace from xml tag python", "code": "def strip_xml_namespace(root):\n        try:\n        root.tag = root.tag.split('}')[1]\n    except IndexError:\n        pass\n\n    for element in root.getchildren():\n        strip_xml_namespace(element)", "method_name": "strip_xml_namespace", "docstring_tokens": "Strip out namespace data from an ElementTree ."}
{"idx": "cosqa-train-13207", "doc": "fill is null with other columns python", "code": "def clean_dataframe(df):\n        df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df", "method_name": "clean_dataframe", "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"}
{"idx": "cosqa-train-8216", "doc": "python async input from gui", "code": "async def async_input(prompt):\n        print(prompt, end='', flush=True)\n    return (await loop.run_in_executor(None, sys.stdin.readline)).rstrip()", "method_name": "async_input", "docstring_tokens": "Python s input () is blocking which means the event loop we set above can t be running while we re blocking there . This method will let the loop run while we wait for input ."}
{"idx": "cosqa-train-9515", "doc": "how to identify the index of an element of a set in python", "code": "def find_geom(geom, geoms):\n        for i, g in enumerate(geoms):\n        if g is geom:\n            return i", "method_name": "find_geom", "docstring_tokens": "Returns the index of a geometry in a list of geometries avoiding expensive equality checks of in operator ."}
{"idx": "cosqa-train-12351", "doc": "python 3 print object string", "code": "def _get_pretty_string(obj):\n        sio = StringIO()\n    pprint.pprint(obj, stream=sio)\n    return sio.getvalue()", "method_name": "_get_pretty_string", "docstring_tokens": "Return a prettier version of obj"}
{"idx": "cosqa-train-13120", "doc": "python get most recent file containing string", "code": "def newest_file(file_iterable):\n    return max(file_iterable, key=lambda fname: os.path.getmtime(fname))", "method_name": "newest_file", "docstring_tokens": "Returns the name of the newest file given an iterable of file names ."}
{"idx": "cosqa-train-14086", "doc": "python sqlite3 delete doesn't delete records", "code": "def truncate_table(self, tablename):\n                self.get(tablename).remove()\n        self.db.commit()", "method_name": "truncate_table", "docstring_tokens": "SQLite3 doesn t support direct truncate so we just use delete here"}
{"idx": "cosqa-train-8166", "doc": "python apply function to iterator", "code": "def find_all(self, string, callback):\n\t\tfor index, output in self.iter(string):\n\t\t\tcallback(index, output)", "method_name": "find_all", "docstring_tokens": "Wrapper on iter method callback gets an iterator result"}
{"idx": "cosqa-train-12637", "doc": "use python next to iterate through", "code": "def __next__(self, reward, ask_id, lbl):\n                return self.next(reward, ask_id, lbl)", "method_name": "__next__", "docstring_tokens": "For Python3 compatibility of generator ."}
{"idx": "cosqa-train-7547", "doc": "how to print all the variables in an object python", "code": "def var_dump(*obs):\n\ti = 0\n\tfor x in obs:\n\t\t\n\t\tstr = var_dump_output(x, 0, '  ', '\\n', True)\n\t\tprint (str.strip())\n\t\t\n\t\ti += 1", "method_name": "var_dump", "docstring_tokens": "shows structured information of a object list tuple etc"}
{"idx": "cosqa-train-18478", "doc": "how to determine the index interval for given range of array python", "code": "def _infer_interval_breaks(coord):\n        coord = np.asarray(coord)\n    deltas = 0.5 * (coord[1:] - coord[:-1])\n    first = coord[0] - deltas[0]\n    last = coord[-1] + deltas[-1]\n    return np.r_[[first], coord[:-1] + deltas, [last]]", "method_name": "_infer_interval_breaks", "docstring_tokens": ">>> _infer_interval_breaks ( np . arange ( 5 )) array ( [ - 0 . 5 0 . 5 1 . 5 2 . 5 3 . 5 4 . 5 ] )"}
{"idx": "cosqa-train-17091", "doc": "python print numpy array with string", "code": "def array2string(arr: numpy.ndarray) -> str:\n                shape = str(arr.shape)[1:-1]\n        if shape.endswith(\",\"):\n            shape = shape[:-1]\n        return numpy.array2string(arr, threshold=11) + \"%s[%s]\" % (arr.dtype, shape)", "method_name": "array2string", "docstring_tokens": "Format numpy array as a string ."}
{"idx": "cosqa-train-14536", "doc": "python assert value is of type", "code": "def _assert_is_type(name, value, value_type):\n        if not isinstance(value, value_type):\n        if type(value_type) is tuple:\n            types = ', '.join(t.__name__ for t in value_type)\n            raise ValueError('{0} must be one of ({1})'.format(name, types))\n        else:\n            raise ValueError('{0} must be {1}'\n                             .format(name, value_type.__name__))", "method_name": "_assert_is_type", "docstring_tokens": "Assert that a value must be a given type ."}
{"idx": "cosqa-train-11450", "doc": "python multiproccessing map with multiple inputs", "code": "def imapchain(*a, **kwa):\n        imap_results = map( *a, **kwa )\n    return itertools.chain( *imap_results )", "method_name": "imapchain", "docstring_tokens": "Like map but also chains the results ."}
{"idx": "cosqa-train-14502", "doc": "python add suffix to filename", "code": "def add_suffix(fullname, suffix):\n        name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext", "method_name": "add_suffix", "docstring_tokens": "Add suffix to a full file name"}
{"idx": "cosqa-train-14904", "doc": "best way to deal with pagination in python", "code": "def paginate(self, request, offset=0, limit=None):\n                return self.collection.offset(offset).limit(limit), self.collection.count()", "method_name": "paginate", "docstring_tokens": "Paginate queryset ."}
{"idx": "cosqa-train-18641", "doc": "finding factors in python and return list", "code": "def factors(n):\n        return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))", "method_name": "factors", "docstring_tokens": "Computes all the integer factors of the number n"}
{"idx": "cosqa-train-4338", "doc": "best way to read xml in python", "code": "def xmltreefromfile(filename):\n        try:\n        return ElementTree.parse(filename, ElementTree.XMLParser(collect_ids=False))\n    except TypeError:\n        return ElementTree.parse(filename, ElementTree.XMLParser())", "method_name": "xmltreefromfile", "docstring_tokens": "Internal function to read an XML file"}
{"idx": "cosqa-train-9678", "doc": "how to put a string in a yaml file python", "code": "def generate_yaml_file(filename, contents):\n        with open(filename, 'w') as file:\n        file.write(yaml.dump(contents, default_flow_style=False))", "method_name": "generate_yaml_file", "docstring_tokens": "Creates a yaml file with the given content ."}
{"idx": "cosqa-train-920", "doc": "python move cursor to secific line", "code": "def _go_to_line(editor, line):\n        b = editor.application.current_buffer\n    b.cursor_position = b.document.translate_row_col_to_index(max(0, int(line) - 1), 0)", "method_name": "_go_to_line", "docstring_tokens": "Move cursor to this line in the current buffer ."}
{"idx": "cosqa-dev-72", "doc": "token to id python", "code": "def strids2ids(tokens: Iterable[str]) -> List[int]:\n        return list(map(int, tokens))", "method_name": "strids2ids", "docstring_tokens": "Returns sequence of integer ids given a sequence of string ids ."}
{"idx": "cosqa-train-19357", "doc": "python urlparse get domain", "code": "def get_domain(url):\n        parse_result = urlparse(url)\n    domain = \"{schema}://{netloc}\".format(\n        schema=parse_result.scheme, netloc=parse_result.netloc)\n    return domain", "method_name": "get_domain", "docstring_tokens": "Get domain part of an url ."}
{"idx": "cosqa-train-7880", "doc": "python turn a string into a number", "code": "def get_number(s, cast=int):\n        import string\n    d = \"\".join(x for x in str(s) if x in string.digits)\n    return cast(d)", "method_name": "get_number", "docstring_tokens": "Try to get a number out of a string and cast it ."}
{"idx": "cosqa-train-18111", "doc": "python check if all are type string in a column", "code": "def is_sqlatype_string(coltype: Union[TypeEngine, VisitableType]) -> bool:\n        coltype = _coltype_to_typeengine(coltype)\n    return isinstance(coltype, sqltypes.String)", "method_name": "is_sqlatype_string", "docstring_tokens": "Is the SQLAlchemy column type a string type?"}
{"idx": "cosqa-train-12805", "doc": "bin means python numpy", "code": "def val_to_bin(edges, x):\n        ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin", "method_name": "val_to_bin", "docstring_tokens": "Convert axis coordinate to bin index ."}
{"idx": "cosqa-train-14553", "doc": "python boto3 delete key from s3", "code": "def remove_file_from_s3(awsclient, bucket, key):\n        client_s3 = awsclient.get_client('s3')\n    response = client_s3.delete_object(Bucket=bucket, Key=key)", "method_name": "remove_file_from_s3", "docstring_tokens": "Remove a file from an AWS S3 bucket ."}
{"idx": "cosqa-train-19466", "doc": "random walk steps python", "code": "def returned(n):\n\tfor pos in randwalk() >> drop(1) >> takei(xrange(n-1)):\n\t\tif pos == Origin:\n\t\t\treturn True\n\treturn False", "method_name": "returned", "docstring_tokens": "Generate a random walk and return True if the walker has returned to the origin after taking n steps ."}
{"idx": "cosqa-train-8586", "doc": "python delete objects inside of objects", "code": "def _removeTags(tags, objects):\n        for t in tags:\n        for o in objects:\n            o.tags.remove(t)\n\n    return True", "method_name": "_removeTags", "docstring_tokens": "Removes tags from objects"}
{"idx": "cosqa-train-8348", "doc": "truncate seconds from a timestamp in python code", "code": "def RoundToSeconds(cls, timestamp):\n        leftovers = timestamp % definitions.MICROSECONDS_PER_SECOND\n    scrubbed = timestamp - leftovers\n    rounded = round(float(leftovers) / definitions.MICROSECONDS_PER_SECOND)\n\n    return int(scrubbed + rounded * definitions.MICROSECONDS_PER_SECOND)", "method_name": "RoundToSeconds", "docstring_tokens": "Takes a timestamp value and rounds it to a second precision ."}
{"idx": "cosqa-train-7002", "doc": "python json load unorde", "code": "def read_json(location):\n        location = ensure_path(location)\n    with location.open('r', encoding='utf8') as f:\n        return ujson.load(f)", "method_name": "read_json", "docstring_tokens": "Open and load JSON from file ."}
{"idx": "cosqa-train-10094", "doc": "python yaml expected single document", "code": "def yaml_to_param(obj, name):\n\treturn from_pyvalue(u\"yaml:%s\" % name, unicode(yaml.dump(obj)))", "method_name": "yaml_to_param", "docstring_tokens": "Return the top - level element of a document sub - tree containing the YAML serialization of a Python object ."}
{"idx": "cosqa-train-8758", "doc": "python filter object at", "code": "def __init__(self, function):\n\t\tsuper(filter, self).__init__()\n\t\tself.function = function", "method_name": "__init__", "docstring_tokens": "function : to be called with each stream element as its only argument"}
{"idx": "cosqa-train-9368", "doc": "python nonetype object has no attributte", "code": "def listlike(obj):\n        \n    return hasattr(obj, \"__iter__\") \\\n    and not issubclass(type(obj), str)\\\n    and not issubclass(type(obj), unicode)", "method_name": "listlike", "docstring_tokens": "Is an object iterable like a list ( and not a string ) ?"}
{"idx": "cosqa-train-16286", "doc": "python tkinter how to create scrollable canvas", "code": "def _set_scroll_v(self, *args):\n                self._canvas_categories.yview(*args)\n        self._canvas_scroll.yview(*args)", "method_name": "_set_scroll_v", "docstring_tokens": "Scroll both categories Canvas and scrolling container"}
{"idx": "cosqa-train-11132", "doc": "geojson to topojson python", "code": "def to_topojson(self):\n                topojson = self.topojson\n        topojson[\"objects\"][\"points\"] = {\n            \"type\": \"GeometryCollection\",\n            \"geometries\": [point.to_topojson() for point in self.points.all()],\n        }\n        return json.dumps(topojson)", "method_name": "to_topojson", "docstring_tokens": "Adds points and converts to topojson string ."}
{"idx": "cosqa-train-16972", "doc": "python get png image dimensions", "code": "def getDimensionForImage(filename, maxsize):\n        try:\n        from PIL import Image\n    except ImportError:\n        return None\n    img = Image.open(filename)\n    width, height = img.size\n    if width > maxsize[0] or height > maxsize[1]:\n        img.thumbnail(maxsize)\n        out.info(\"Downscaled display size from %s to %s\" % ((width, height), img.size))\n    return img.size", "method_name": "getDimensionForImage", "docstring_tokens": "Return scaled image size in ( width height ) format . The scaling preserves the aspect ratio . If PIL is not found returns None ."}
{"idx": "cosqa-train-6652", "doc": "python flask separate functions get and post", "code": "def handleFlaskPostRequest(flaskRequest, endpoint):\n        if flaskRequest.method == \"POST\":\n        return handleHttpPost(flaskRequest, endpoint)\n    elif flaskRequest.method == \"OPTIONS\":\n        return handleHttpOptions()\n    else:\n        raise exceptions.MethodNotAllowedException()", "method_name": "handleFlaskPostRequest", "docstring_tokens": "Handles the specified flask request for one of the POST URLS Invokes the specified endpoint to generate a response ."}
{"idx": "cosqa-train-18214", "doc": "return year from date python", "code": "def year(date):\n        try:\n        fmt = '%m/%d/%Y'\n        return datetime.strptime(date, fmt).timetuple().tm_year\n    except ValueError:\n        return 0", "method_name": "year", "docstring_tokens": "Returns the year ."}
{"idx": "cosqa-train-13715", "doc": "how to get all modes python", "code": "def __iter__(self):\n                return iter([v for k, v in sorted(self._modes.items())])", "method_name": "__iter__", "docstring_tokens": "Returns the list of modes ."}
{"idx": "cosqa-train-17708", "doc": "integer and returns a random bitstring of size python", "code": "def binary(length):\n        num = randint(1, 999999)\n    mask = '0' * length\n    return (mask + ''.join([str(num >> i & 1) for i in range(7, -1, -1)]))[-length:]", "method_name": "binary", "docstring_tokens": "returns a a random string that represent a binary representation"}
{"idx": "cosqa-train-11584", "doc": "how to get the encoding of a file python", "code": "def smartread(path):\n        with open(path, \"rb\") as f:\n        content = f.read()\n        result = chardet.detect(content)\n        return content.decode(result[\"encoding\"])", "method_name": "smartread", "docstring_tokens": "Read text from file automatically detect encoding . chardet required ."}
{"idx": "cosqa-train-14776", "doc": "python connect to aws rds", "code": "def connect_rds(aws_access_key_id=None, aws_secret_access_key=None, **kwargs):\n        from boto.rds import RDSConnection\n    return RDSConnection(aws_access_key_id, aws_secret_access_key, **kwargs)", "method_name": "connect_rds", "docstring_tokens": ": type aws_access_key_id : string : param aws_access_key_id : Your AWS Access Key ID"}
{"idx": "cosqa-train-12714", "doc": "python cv2 check if image is empty", "code": "def is_empty(self):\n                if(((self.channels == []) and (not self.shape == (0, 0))) or\n           ((not self.channels == []) and (self.shape == (0, 0)))):\n            raise RuntimeError(\"Channels-shape mismatch.\")\n        return self.channels == [] and self.shape == (0, 0)", "method_name": "is_empty", "docstring_tokens": "Checks for an empty image ."}
{"idx": "cosqa-train-11606", "doc": "how to hide a window using a button in python", "code": "def hide(self):\n                if not HidePrevention(self.window).may_hide():\n            return\n        self.hidden = True\n        self.get_widget('window-root').unstick()\n        self.window.hide()", "method_name": "hide", "docstring_tokens": "Hides the main window of the terminal and sets the visible flag to False ."}
{"idx": "cosqa-train-13550", "doc": "python marshmallow validation schema from parent", "code": "def validate(schema, data, owner=None):\n        schema._validate(data=data, owner=owner)", "method_name": "validate", "docstring_tokens": "Validate input data with input schema ."}
{"idx": "cosqa-train-13211", "doc": "fillna with string for specific columnin python", "code": "def stringify_col(df, col_name):\n        df = df.copy()\n    df[col_name] = df[col_name].fillna(\"\")\n    df[col_name] = df[col_name].astype(str)\n    return df", "method_name": "stringify_col", "docstring_tokens": "Take a dataframe and string - i - fy a column of values . Turn nan / None into and all other values into strings ."}
{"idx": "cosqa-train-1345", "doc": "how to separate list elements by white space python", "code": "def split_strings_in_list_retain_spaces(orig_list):\n        temp_list = list()\n    for line in orig_list:\n        line_split = __re.split(r'(\\s+)', line)\n        temp_list.append(line_split)\n\n    return temp_list", "method_name": "split_strings_in_list_retain_spaces", "docstring_tokens": "Function to split every line in a list and retain spaces for a rejoin : param orig_list : Original list : return : A List with split lines"}
{"idx": "cosqa-train-13635", "doc": "how to default value in python", "code": "def safe_int(val, default=None):\n        try:\n        val = int(val)\n    except (ValueError, TypeError):\n        val = default\n\n    return val", "method_name": "safe_int", "docstring_tokens": "Returns int () of val if val is not convertable to int use default instead"}
{"idx": "cosqa-train-8623", "doc": "python dict keys lowercase", "code": "def keys_to_snake_case(camel_case_dict):\n        return dict((to_snake_case(key), value) for (key, value) in camel_case_dict.items())", "method_name": "keys_to_snake_case", "docstring_tokens": "Make a copy of a dictionary with all keys converted to snake case . This is just calls to_snake_case on each of the keys in the dictionary and returns a new dictionary ."}
{"idx": "cosqa-train-10955", "doc": "python get index of list values that equal", "code": "def equal(list1, list2):\n        return [item1 == item2 for item1, item2 in broadcast_zip(list1, list2)]", "method_name": "equal", "docstring_tokens": "takes flags returns indexes of True values"}
{"idx": "cosqa-train-9658", "doc": "python requests logging not work", "code": "def process_request(self, request, response):\n                self.logger.info('Requested: {0} {1} {2}'.format(request.method, request.relative_uri, request.content_type))", "method_name": "process_request", "docstring_tokens": "Logs the basic endpoint requested"}
{"idx": "cosqa-train-12001", "doc": "python static files flask", "code": "def glr_path_static():\n        return os.path.abspath(os.path.join(os.path.dirname(__file__), '_static'))", "method_name": "glr_path_static", "docstring_tokens": "Returns path to packaged static files"}
{"idx": "cosqa-train-19618", "doc": "rest json schema validation python", "code": "def validate(request: Union[Dict, List], schema: dict) -> Union[Dict, List]:\n        jsonschema_validate(request, schema)\n    return request", "method_name": "validate", "docstring_tokens": "Wraps jsonschema . validate returning the same object passed in ."}
{"idx": "cosqa-train-10560", "doc": "write in bold and read in color of the print mesaage in python", "code": "def good(txt):\n        print(\"%s    sys.stdout.flush()", "method_name": "good", "docstring_tokens": "Print emphasized good the given txt message"}
{"idx": "cosqa-train-14241", "doc": "python type cast to bigint", "code": "def _from_bytes(bytes, byteorder=\"big\", signed=False):\n        return int.from_bytes(bytes, byteorder=byteorder, signed=signed)", "method_name": "_from_bytes", "docstring_tokens": "This is the same functionality as int . from_bytes in python 3"}
{"idx": "cosqa-train-8782", "doc": "converts matrix to pictures by python", "code": "def im2mat(I):\n        return I.reshape((I.shape[0] * I.shape[1], I.shape[2]))", "method_name": "im2mat", "docstring_tokens": "Converts and image to matrix ( one pixel per line )"}
{"idx": "cosqa-train-11687", "doc": "python random selection from function", "code": "def sometimesish(fn):\n        def wrapped(*args, **kwargs):\n        if random.randint(1, 2) == 1:\n            return fn(*args, **kwargs)\n\n    return wrapped", "method_name": "sometimesish", "docstring_tokens": "Has a 50 / 50 chance of calling a function"}
{"idx": "cosqa-train-13450", "doc": "python keep processpool open until tasks complete", "code": "def wait(self, timeout=None):\n        if not self.__running:\n      raise RuntimeError(\"ThreadPool ain't running\")\n    self.__queue.wait(timeout)", "method_name": "wait", "docstring_tokens": "Block until all jobs in the ThreadPool are finished . Beware that this can make the program run into a deadlock if another thread adds new jobs to the pool!"}
{"idx": "cosqa-train-10307", "doc": "running a def a specified amount of time python 3", "code": "def seconds(num):\n        now = pytime.time()\n    end = now + num\n    until(end)", "method_name": "seconds", "docstring_tokens": "Pause for this many seconds"}
{"idx": "cosqa-train-19371", "doc": "python str to dateal time", "code": "def str_to_time(time_str: str) -> datetime.datetime:\n        pieces: Any = [int(piece) for piece in time_str.split('-')]\n    return datetime.datetime(*pieces)", "method_name": "str_to_time", "docstring_tokens": "Convert human readable string to datetime . datetime ."}
{"idx": "cosqa-train-12569", "doc": "python check if file is executable", "code": "def is_executable(path):\n    return os.path.isfile(path) and os.access(path, os.X_OK)", "method_name": "is_executable", "docstring_tokens": "Returns whether a path names an existing executable file ."}
{"idx": "cosqa-train-17715", "doc": "python how to check the queue lenght", "code": "def full(self):\n                return self.maxsize and len(self.list) >= self.maxsize or False", "method_name": "full", "docstring_tokens": "Return True if the queue is full False otherwise ( not reliable! ) ."}
{"idx": "cosqa-train-16490", "doc": "query server objects ldap in python", "code": "def search(self, filterstr, attrlist):\n                return self._paged_search_ext_s(self.settings.BASE, ldap.SCOPE_SUBTREE, filterstr=filterstr,\n                                        attrlist=attrlist, page_size=self.settings.PAGE_SIZE)", "method_name": "search", "docstring_tokens": "Query the configured LDAP server ."}
{"idx": "cosqa-train-15089", "doc": "python docx document section different page", "code": "def fill_document(doc):\n        with doc.create(Section('A section')):\n        doc.append('Some regular text and some ')\n        doc.append(italic('italic text. '))\n\n        with doc.create(Subsection('A subsection')):\n            doc.append('Also some crazy characters: $&#{}')", "method_name": "fill_document", "docstring_tokens": "Add a section a subsection and some text to the document ."}
{"idx": "cosqa-train-10557", "doc": "write a json object to file python", "code": "def _serialize_json(obj, fp):\n        json.dump(obj, fp, indent=4, default=serialize)", "method_name": "_serialize_json", "docstring_tokens": "Serialize obj as a JSON formatted stream to fp"}
{"idx": "cosqa-train-19263", "doc": "how to compute the minimum value of a tensor in python", "code": "def last_location_of_minimum(x):\n        x = np.asarray(x)\n    return 1.0 - np.argmin(x[::-1]) / len(x) if len(x) > 0 else np.NaN", "method_name": "last_location_of_minimum", "docstring_tokens": "Returns the last location of the minimal value of x . The position is calculated relatively to the length of x ."}
{"idx": "cosqa-train-16352", "doc": "python unittest how to assert 2 lists are almost equal", "code": "def expect_all(a, b):\n        assert all(_a == _b for _a, _b in zip_longest(a, b))", "method_name": "expect_all", "docstring_tokens": "\\ Asserts that two iterables contain the same values ."}
{"idx": "cosqa-dev-27", "doc": "how to check if 2 inputs are equal in python assert equal", "code": "def expect_all(a, b):\n        assert all(_a == _b for _a, _b in zip_longest(a, b))", "method_name": "expect_all", "docstring_tokens": "\\ Asserts that two iterables contain the same values ."}
{"idx": "cosqa-train-9249", "doc": "python loop through proxies request", "code": "def load(self):\n                self._list = self._source.load()\n        self._list_iter = itertools.cycle(self._list)", "method_name": "load", "docstring_tokens": "Load proxy list from configured proxy source"}
{"idx": "cosqa-train-834", "doc": "python loess with gaussian kernel", "code": "def lognorm(x, mu, sigma=1.0):\n        return stats.lognorm(sigma, scale=mu).pdf(x)", "method_name": "lognorm", "docstring_tokens": "Log - normal function from scipy"}
{"idx": "cosqa-train-17394", "doc": "greatest common divisor function in python", "code": "def gcd_float(numbers, tol=1e-8):\n        def pair_gcd_tol(a, b):\n                while b > tol:\n            a, b = b, a % b\n        return a\n\n    n = numbers[0]\n    for i in numbers:\n        n = pair_gcd_tol(n, i)\n    return n", "method_name": "gcd_float", "docstring_tokens": "Returns the greatest common divisor for a sequence of numbers . Uses a numerical tolerance so can be used on floats"}
{"idx": "cosqa-dev-530", "doc": "how to clear up memory python", "code": "def Flush(self):\n        while self._age:\n      node = self._age.PopLeft()\n      self.KillObject(node.data)\n\n    self._hash = dict()", "method_name": "Flush", "docstring_tokens": "Flush all items from cache ."}
{"idx": "cosqa-dev-591", "doc": "get eucliedan distance between two vectors python", "code": "def vector_distance(a, b):\n        a = np.array(a)\n    b = np.array(b)\n    return np.linalg.norm(a - b)", "method_name": "vector_distance", "docstring_tokens": "The Euclidean distance between two vectors ."}
{"idx": "cosqa-train-11239", "doc": "python interactive shell color", "code": "def auto():\n\ttry:\n\t\tStyle.enabled = False\n\t\tStyle.enabled = sys.stdout.isatty()\n\texcept (AttributeError, TypeError):\n\t\tpass", "method_name": "auto", "docstring_tokens": "set colouring on if STDOUT is a terminal device off otherwise"}
{"idx": "cosqa-train-8033", "doc": "passing a range of values python years", "code": "def from_years_range(start_year, end_year):\n                start = datetime.date(start_year, 1 , 1)\n        end = datetime.date(end_year, 12 , 31)\n        return DateRange(start, end)", "method_name": "from_years_range", "docstring_tokens": "Transform a range of years ( two ints ) to a DateRange object ."}
{"idx": "cosqa-train-12233", "doc": "python yaml for each key value", "code": "def safe_dump(data, stream=None, **kwds):\n        return yaml.dump(data, stream=stream, Dumper=ODYD, **kwds)", "method_name": "safe_dump", "docstring_tokens": "implementation of safe dumper using Ordered Dict Yaml Dumper"}
{"idx": "cosqa-train-14163", "doc": "python test if value is ctypes array", "code": "def is_array(type_):\n        nake_type = remove_alias(type_)\n    nake_type = remove_reference(nake_type)\n    nake_type = remove_cv(nake_type)\n    return isinstance(nake_type, cpptypes.array_t)", "method_name": "is_array", "docstring_tokens": "returns True if type represents C ++ array type False otherwise"}
{"idx": "cosqa-train-13261", "doc": "function return apply async python", "code": "def apply(self, func, args=(), kwds=dict()):\n                return self.apply_async(func, args, kwds).get()", "method_name": "apply", "docstring_tokens": "Equivalent of the apply () builtin function . It blocks till the result is ready ."}
{"idx": "cosqa-train-12308", "doc": "reload device program code in python", "code": "def reload(self, save_config=True):\n                if save_config:\n            self.device.send(\"copy running-config startup-config\")\n        self.device(\"reload\", wait_for_string=\"This command will reboot the system\")\n        self.device.ctrl.sendline(\"y\")", "method_name": "reload", "docstring_tokens": "Reload the device ."}
{"idx": "cosqa-train-4030", "doc": "split string into n parts python", "code": "def _split_str(s, n):\n        length = len(s)\n    return [s[i:i + n] for i in range(0, length, n)]", "method_name": "_split_str", "docstring_tokens": "split string into list of strings by specified number ."}
{"idx": "cosqa-train-10978", "doc": "python get object as dict", "code": "def conv_dict(self):\n                return dict(integer=self.integer, real=self.real, no_type=self.no_type)", "method_name": "conv_dict", "docstring_tokens": "dictionary of conversion"}
{"idx": "cosqa-train-18571", "doc": "selecting a range of 2d elements from a numpy array gives empty array in python 3", "code": "def to_0d_array(value: Any) -> np.ndarray:\n        if np.isscalar(value) or (isinstance(value, np.ndarray) and\n                              value.ndim == 0):\n        return np.array(value)\n    else:\n        return to_0d_object_array(value)", "method_name": "to_0d_array", "docstring_tokens": "Given a value wrap it in a 0 - D numpy . ndarray ."}
{"idx": "cosqa-train-19958", "doc": "python read tokens from line", "code": "def get_tokens(line: str) -> Iterator[str]:\n        for token in line.rstrip().split():\n        if len(token) > 0:\n            yield token", "method_name": "get_tokens", "docstring_tokens": "Yields tokens from input string ."}
{"idx": "cosqa-train-16924", "doc": "write data into fits file python", "code": "def write_fits(self, fitsfile):\n                tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)", "method_name": "write_fits", "docstring_tokens": "Write the ROI model to a FITS file ."}
{"idx": "cosqa-train-3162", "doc": "python print string with visible ansi codes", "code": "def ansi(color, text):\n        code = COLOR_CODES[color]\n    return '\\033[1;{0}m{1}{2}'.format(code, text, RESET_TERM)", "method_name": "ansi", "docstring_tokens": "Wrap text in an ansi escape sequence"}
{"idx": "cosqa-train-18616", "doc": "python check if value in enum", "code": "def has_value(cls, value: int) -> bool:\n                return any(value == item.value for item in cls)", "method_name": "has_value", "docstring_tokens": "True if specified value exists in int enum ; otherwise False ."}
{"idx": "cosqa-train-11995", "doc": "python sqlite table names in database", "code": "def get_table_names(connection):\n\tcursor = connection.cursor()\n\tcursor.execute(\"SELECT name FROM sqlite_master WHERE type == 'table'\")\n\treturn [name for (name,) in cursor]", "method_name": "get_table_names", "docstring_tokens": "Return a list of the table names in the database ."}
{"idx": "cosqa-train-18639", "doc": "how to remove all element from a python dictionary", "code": "def clean_map(obj: Mapping[Any, Any]) -> Mapping[Any, Any]:\n        return {k: v for k, v in obj.items() if v is not None}", "method_name": "clean_map", "docstring_tokens": "Return a new copied dictionary without the keys with None values from the given Mapping object ."}
{"idx": "cosqa-train-11560", "doc": "python parse query string from url", "code": "def parse_query_string(query):\n        result = {}\n    qparts = query.split('&')\n    for item in qparts:\n        key, value = item.split('=')\n        key = key.strip()\n        value = value.strip()\n        result[key] = unquote_plus(value)\n    return result", "method_name": "parse_query_string", "docstring_tokens": "parse_query_string : very simplistic . won t do the right thing with list values"}
{"idx": "cosqa-train-5390", "doc": "python remove element set", "code": "def isolate_element(self, x):\n                members = list(self.members(x))\n        self.delete_set(x)\n        self.union(*(v for v in members if v != x))", "method_name": "isolate_element", "docstring_tokens": "Isolates x from its equivalence class ."}
{"idx": "cosqa-train-10072", "doc": "manhattan distance in python using longitude and latitude", "code": "def _manhattan_distance(vec_a, vec_b):\n        if len(vec_a) != len(vec_b):\n        raise ValueError('len(vec_a) must equal len(vec_b)')\n    return sum(map(lambda a, b: abs(a - b), vec_a, vec_b))", "method_name": "_manhattan_distance", "docstring_tokens": "Return manhattan distance between two lists of numbers ."}
{"idx": "cosqa-train-11759", "doc": "how to read from a file to a list python", "code": "def get_list_from_file(file_name):\n        with open(file_name, mode='r', encoding='utf-8') as f1:\n        lst = f1.readlines()\n    return lst", "method_name": "get_list_from_file", "docstring_tokens": "read the lines from a file into a list"}
{"idx": "cosqa-train-8925", "doc": "dynamically update value in dictionary python", "code": "def update(self, params):\n                dev_info = self.json_state.get('deviceInfo')\n        dev_info.update({k: params[k] for k in params if dev_info.get(k)})", "method_name": "update", "docstring_tokens": "Update the dev_info data from a dictionary ."}
{"idx": "cosqa-train-19838", "doc": "python replace string from right", "code": "def right_replace(string, old, new, count=1):\n        if not string:\n        return string\n    return new.join(string.rsplit(old, count))", "method_name": "right_replace", "docstring_tokens": "Right replaces count occurrences of old with new in string . For example ::"}
{"idx": "cosqa-train-11373", "doc": "how to check if a path is writeable python", "code": "def _writable_dir(path):\n        return os.path.isdir(path) and os.access(path, os.W_OK)", "method_name": "_writable_dir", "docstring_tokens": "Whether path is a directory to which the user has write access ."}
{"idx": "cosqa-train-11142", "doc": "get attribute type in python", "code": "def get_attribute_name_id(attr):\n        return attr.value.id if isinstance(attr.value, ast.Name) else None", "method_name": "get_attribute_name_id", "docstring_tokens": "Return the attribute name identifier"}
{"idx": "cosqa-train-9067", "doc": "get fields of object python", "code": "def object_as_dict(obj):\n        return {c.key: getattr(obj, c.key)\n            for c in inspect(obj).mapper.column_attrs}", "method_name": "object_as_dict", "docstring_tokens": "Turn an SQLAlchemy model into a dict of field names and values ."}
{"idx": "cosqa-train-17371", "doc": "how to fetch one value from one row from mysql query in python", "code": "def fetchvalue(self, sql: str, *args) -> Optional[Any]:\n                row = self.fetchone(sql, *args)\n        if row is None:\n            return None\n        return row[0]", "method_name": "fetchvalue", "docstring_tokens": "Executes SQL ; returns the first value of the first row or None ."}
{"idx": "cosqa-train-6650", "doc": "python flask routes add", "code": "def add_url_rule(self, route, endpoint, handler):\n                self.app.add_url_rule(route, endpoint, handler)", "method_name": "add_url_rule", "docstring_tokens": "Add a new url route ."}
{"idx": "cosqa-train-10946", "doc": "define function arg type and default values python", "code": "def get_default_args(func):\n        args, varargs, keywords, defaults = getargspec_no_self(func)\n    return dict(zip(args[-len(defaults):], defaults))", "method_name": "get_default_args", "docstring_tokens": "returns a dictionary of arg_name : default_values for the input function"}
{"idx": "cosqa-dev-233", "doc": "python image shape detect", "code": "def get_shape(img):\n        if hasattr(img, 'shape'):\n        shape = img.shape\n    else:\n        shape = img.get_data().shape\n    return shape", "method_name": "get_shape", "docstring_tokens": "Return the shape of img ."}
{"idx": "cosqa-train-6306", "doc": "what can iterators be iterated only once in python", "code": "def _fill(self):\n        try:\n      self._head = self._iterable.next()\n    except StopIteration:\n      self._head = None", "method_name": "_fill", "docstring_tokens": "Advance the iterator without returning the old head ."}
{"idx": "cosqa-train-10207", "doc": "remove all characters in string in python", "code": "def drop_bad_characters(text):\n            text = ''.join([c for c in text if c in ALLOWED_CHARS])\n    return text", "method_name": "drop_bad_characters", "docstring_tokens": "Takes a text and drops all non - printable and non - ascii characters and also any whitespace characters that aren t space ."}
{"idx": "cosqa-train-12644", "doc": "python circle in a square bitmap array", "code": "def getBitmap(self):\n                return PlatformManager.getBitmapFromRect(self.x, self.y, self.w, self.h)", "method_name": "getBitmap", "docstring_tokens": "Captures screen area of this region at least the part that is on the screen"}
{"idx": "cosqa-train-12106", "doc": "location of maya python exe", "code": "def setup_environment():\n        osinter = ostool.get_interface()\n    pypath = osinter.get_maya_envpath()\n    for p in sys.path:\n        pypath = os.pathsep.join((pypath, p))\n    os.environ['PYTHONPATH'] = pypath", "method_name": "setup_environment", "docstring_tokens": "Set up neccessary environment variables"}
{"idx": "cosqa-train-19190", "doc": "how to make letters uppercase in python skipping spaces", "code": "def uppercase_chars(string: any) -> str:\n                return ''.join([c if c.isupper() else '' for c in str(string)])", "method_name": "uppercase_chars", "docstring_tokens": "Return all ( and only ) the uppercase chars in the given string ."}
{"idx": "cosqa-train-18016", "doc": "python delete element from set", "code": "def remove_once(gset, elem):\n        remove = getattr(gset, 'remove', None)\n    if remove is not None: remove(elem)\n    else: del gset[elem]\n    return elem", "method_name": "remove_once", "docstring_tokens": "Remove the element from a set lists or dict . >>> L = [ Lucy ] ; S = set ( [ Sky ] ) ; D = { Diamonds : True } ; >>> remove_once ( L Lucy ) ; remove_once ( S Sky ) ; remove_once ( D Diamonds ) ; >>> print L S D [] set ( [] ) {}"}
{"idx": "cosqa-train-13067", "doc": "python get current git branch", "code": "def get_last_commit(git_path=None):\n        if git_path is None: git_path = GIT_PATH\n    line = get_last_commit_line(git_path)\n    revision_id = line.split()[1]\n    return revision_id", "method_name": "get_last_commit", "docstring_tokens": "Get the HEAD commit SHA1 of repository in current dir ."}
{"idx": "cosqa-train-3274", "doc": "how to make a restart button using python", "code": "def do_restart(self, line):\n                self.application.master.Restart(opendnp3.RestartType.COLD, restart_callback)", "method_name": "do_restart", "docstring_tokens": "Request that the Outstation perform a cold restart . Command syntax is : restart"}
{"idx": "cosqa-train-14708", "doc": "tracing python code execution", "code": "def __run(self):\n        sys.settrace(self.globaltrace)\n    self.__run_backup()\n    self.run = self.__run_backup", "method_name": "__run", "docstring_tokens": "Hacked run function which installs the trace ."}
{"idx": "cosqa-train-8874", "doc": "delete pyc files from python script", "code": "def clean(dry_run='n'):\n        file_patterns = ['*.pyc', '*.pyo', '*~']\n    dir_patterns = ['__pycache__']\n    recursive_pattern_delete(project_paths.root, file_patterns, dir_patterns, dry_run=bool(dry_run.lower() == 'y'))", "method_name": "clean", "docstring_tokens": "Wipes compiled and cached python files . To simulate : pynt clean [ dry_run = y ]"}
{"idx": "cosqa-train-10370", "doc": "sleep holding up python", "code": "def test3():\n        import time\n    \n    p = MVisionProcess()\n    p.start()\n    time.sleep(5)\n    p.stop()", "method_name": "test3", "docstring_tokens": "Test the multiprocess"}
{"idx": "cosqa-train-8344", "doc": "traversal in tree in python", "code": "def walk_tree(root):\n        yield root\n\n    for child in root.children:\n        for el in walk_tree(child):\n            yield el", "method_name": "walk_tree", "docstring_tokens": "Pre - order depth - first"}
{"idx": "cosqa-train-19036", "doc": "timing a function call python", "code": "def timeit(func, *args, **kwargs):\n        start_time = time.time()\n    res = func(*args, **kwargs)\n    timing = time.time() - start_time\n    return res, timing", "method_name": "timeit", "docstring_tokens": "Time execution of function . Returns ( res seconds ) ."}
{"idx": "cosqa-train-9090", "doc": "python how to stop playsound", "code": "def stop(self):\n                if self.isPlaying is True:\n            self._execute(\"stop\")\n            self._changePlayingState(False)", "method_name": "stop", "docstring_tokens": "Stops playback"}
{"idx": "cosqa-train-18929", "doc": "python change dictioinary values in place", "code": "def dictlist_replace(dict_list: Iterable[Dict], key: str, value: Any) -> None:\n        for d in dict_list:\n        d[key] = value", "method_name": "dictlist_replace", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d change ( in place ) d [ key ] to value ."}
{"idx": "cosqa-train-10729", "doc": "can i pass instance method as variable python", "code": "def do(self):\n                self.restore_point = self.obj.copy()\n        return self.do_method(self.obj, *self.args)", "method_name": "do", "docstring_tokens": "Set a restore point ( copy the object ) then call the method . : return : obj . do_method ( * args )"}
{"idx": "cosqa-train-12261", "doc": "pickle python read entiere file", "code": "def read_raw(data_path):\n        with open(data_path, 'rb') as f:\n        data = pickle.load(f)\n    return data", "method_name": "read_raw", "docstring_tokens": "Parameters ---------- data_path : str"}
{"idx": "cosqa-train-1879", "doc": "should there be equal no of columns to concanate two df python", "code": "def cross_join(df1, df2):\n        if len(df1) == 0:\n        return df2\n\n    if len(df2) == 0:\n        return df1\n\n            all_columns = pd.Index(list(df1.columns) + list(df2.columns))\n    df1['key'] = 1\n    df2['key'] = 1\n    return pd.merge(df1, df2, on='key').loc[:, all_columns]", "method_name": "cross_join", "docstring_tokens": "Return a dataframe that is a cross between dataframes df1 and df2"}
{"idx": "cosqa-train-10841", "doc": "python flatten deep nested list", "code": "def flatten(nested):\n        flat_return = list()\n\n    def __inner_flat(nested,flat):\n        for i in nested:\n            __inner_flat(i, flat) if isinstance(i, list) else flat.append(i)\n        return flat\n\n    __inner_flat(nested,flat_return)\n\n    return flat_return", "method_name": "flatten", "docstring_tokens": "Return a flatten version of the nested argument"}
{"idx": "cosqa-train-11837", "doc": "how to show a variable amount of precision in python string format", "code": "def indented_show(text, howmany=1):\n                print(StrTemplate.pad_indent(text=text, howmany=howmany))", "method_name": "indented_show", "docstring_tokens": "Print a formatted indented text ."}
{"idx": "cosqa-train-14528", "doc": "python array get element by index with default", "code": "def list_get(l, idx, default=None):\n        try:\n        if l[idx]:\n            return l[idx]\n        else:\n            return default\n    except IndexError:\n        return default", "method_name": "list_get", "docstring_tokens": "Get from a list with an optional default value ."}
{"idx": "cosqa-train-19843", "doc": "check if string is int in python", "code": "def _isint(string):\n        return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)", "method_name": "_isint", "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"}
{"idx": "cosqa-train-5020", "doc": "how to change numpy array to list in python", "code": "def A(*a):\n        return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "method_name": "A", "docstring_tokens": "convert iterable object into numpy array"}
{"idx": "cosqa-train-19098", "doc": "read a file into a set python", "code": "def read_set_from_file(filename: str) -> Set[str]:\n        collection = set()\n    with open(filename, 'r') as file_:\n        for line in file_:\n            collection.add(line.rstrip())\n    return collection", "method_name": "read_set_from_file", "docstring_tokens": "Extract a de - duped collection ( set ) of text from a file . Expected file format is one item per line ."}
{"idx": "cosqa-train-13927", "doc": "python round float to int", "code": "def intround(value):\n        return int(decimal.Decimal.from_float(\n        value).to_integral_value(decimal.ROUND_HALF_EVEN))", "method_name": "intround", "docstring_tokens": "Given a float returns a rounded int . Should give the same result on both Py2 / 3"}
{"idx": "cosqa-train-5607", "doc": "how to write a parser on python", "code": "def __init__(self):\n                        self.parser = argparse.ArgumentParser()\n                self.subparsers = self.parser.add_subparsers()\n                self.parsers = {}", "method_name": "__init__", "docstring_tokens": "__init__ : Performs basic initialisations"}
{"idx": "cosqa-train-15068", "doc": "python dict with keys no value", "code": "def nonull_dict(self):\n                return {k: v for k, v in six.iteritems(self.dict) if v and k != '_codes'}", "method_name": "nonull_dict", "docstring_tokens": "Like dict but does not hold any null values ."}
{"idx": "cosqa-train-11777", "doc": "how to remove blank lines from a text file in python", "code": "def get_stripped_file_lines(filename):\n        try:\n        lines = open(filename).readlines()\n    except FileNotFoundError:\n        fatal(\"Could not open file: {!r}\".format(filename))\n\n    return [line.strip() for line in lines]", "method_name": "get_stripped_file_lines", "docstring_tokens": "Return lines of a file with whitespace removed"}
{"idx": "cosqa-train-7409", "doc": "how to hash a binary file in python", "code": "def generate_hash(filepath):\n        fr = FileReader(filepath)\n    data = fr.read_bin()\n    return _calculate_sha256(data)", "method_name": "generate_hash", "docstring_tokens": "Public function that reads a local file and generates a SHA256 hash digest for it"}
{"idx": "cosqa-train-6732", "doc": "python get function keyword names", "code": "def parse_func_kwarg_keys(func, with_vals=False):\n        sourcecode = get_func_sourcecode(func, strip_docstr=True,\n                                     strip_comments=True)\n    kwkeys = parse_kwarg_keys(sourcecode, with_vals=with_vals)\n        return kwkeys", "method_name": "parse_func_kwarg_keys", "docstring_tokens": "hacky inference of kwargs keys"}
{"idx": "cosqa-train-12054", "doc": "iterate through words in text file python", "code": "def extract_words(lines):\n        for line in lines:\n        for word in re.findall(r\"\\w+\", line):\n            yield word", "method_name": "extract_words", "docstring_tokens": "Extract from the given iterable of lines the list of words ."}
{"idx": "cosqa-train-18846", "doc": "python make a put request to restful endpoint", "code": "def put(self, endpoint: str, **kwargs) -> dict:\n                return self._request('PUT', endpoint, **kwargs)", "method_name": "put", "docstring_tokens": "HTTP PUT operation to API endpoint ."}
{"idx": "cosqa-train-13151", "doc": "python get the id of the current thread", "code": "def threadid(self):\n                current = self.thread.ident\n        main = get_main_thread()\n        if main is None:\n            return current\n        else:\n            return current if current != main.ident else None", "method_name": "threadid", "docstring_tokens": "Current thread ident . If current thread is main thread then it returns None ."}
{"idx": "cosqa-train-4543", "doc": "python function returning a list of all entities is called", "code": "def filtany(entities, **kw):\n    ret = set()\n  for k,v in kw.items():\n    for entity in entities:\n      if getattr(entity, k)() == v:\n        ret.add(entity)\n  return ret", "method_name": "filtany", "docstring_tokens": "Filter a set of entities based on method return . Use keyword arguments . Example : filtmeth ( entities id = 123 ) filtmeth ( entities name = bart )"}
{"idx": "cosqa-train-19579", "doc": "how to flat a list of list python", "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"      return [item for sublist in x for item in sublist]", "method_name": "flatten_list", "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"}
{"idx": "cosqa-train-19307", "doc": "python read yaml to numpy", "code": "def numpy_to_yaml(representer: Representer, data: np.ndarray) -> Sequence[Any]:\n        return representer.represent_sequence(\n        \"!numpy_array\",\n        data.tolist()\n    )", "method_name": "numpy_to_yaml", "docstring_tokens": "Write a numpy array to YAML ."}
{"idx": "cosqa-train-10997", "doc": "discord python get user from id string", "code": "def get_user_by_id(self, id):\n                return self.db_adapter.get_object(self.UserClass, id=id)", "method_name": "get_user_by_id", "docstring_tokens": "Retrieve a User object by ID ."}
{"idx": "cosqa-train-18792", "doc": "list of arbitrary objects to counts in python", "code": "def count(args):\n        counts = defaultdict(int)\n    for arg in args:\n        for item in arg:\n            counts[item] = counts[item] + 1\n    return counts", "method_name": "count", "docstring_tokens": "count occurences in a list of lists >>> count ( [[ a b ] [ a ]] ) defaultdict ( int { a : 2 b : 1 } )"}
{"idx": "cosqa-train-11636", "doc": "how to know queue size in python", "code": "def qsize(self):\n                self.mutex.acquire()\n        n = self._qsize()\n        self.mutex.release()\n        return n", "method_name": "qsize", "docstring_tokens": "Return the approximate size of the queue ( not reliable! ) ."}
{"idx": "cosqa-train-12000", "doc": "impute missing values in python", "code": "def impute_data(self,x):\n                imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n        return imp.fit_transform(x)", "method_name": "impute_data", "docstring_tokens": "Imputes data set containing Nan values"}
{"idx": "cosqa-dev-78", "doc": "python dict rank by value", "code": "def revrank_dict(dict, key=lambda t: t[1], as_tuple=False):\n        sorted_list = sorted(dict.items(), key=key, reverse=True)\n    return OrderedDict(sorted_list) if not as_tuple else tuple(sorted_list)", "method_name": "revrank_dict", "docstring_tokens": "Reverse sorts a #dict by a given key optionally returning it as a #tuple . By default the @dict is sorted by it s value ."}
{"idx": "cosqa-train-13276", "doc": "generate short unique id python", "code": "def generate_unique_host_id():\n        host = \".\".join(reversed(socket.gethostname().split(\".\")))\n    pid = os.getpid()\n    return \"%s.%d\" % (host, pid)", "method_name": "generate_unique_host_id", "docstring_tokens": "Generate a unique ID that is somewhat guaranteed to be unique among all instances running at the same time ."}
{"idx": "cosqa-train-11501", "doc": "python numpy inverse of the matrix", "code": "def MatrixInverse(a, adj):\n        return np.linalg.inv(a if not adj else _adjoint(a)),", "method_name": "MatrixInverse", "docstring_tokens": "Matrix inversion op ."}
{"idx": "cosqa-train-11153", "doc": "python how to mix backslash and forward slashes in path", "code": "def norm_slash(name):\n        if isinstance(name, str):\n        return name.replace('/', \"\\\\\") if not is_case_sensitive() else name\n    else:\n        return name.replace(b'/', b\"\\\\\") if not is_case_sensitive() else name", "method_name": "norm_slash", "docstring_tokens": "Normalize path slashes ."}
{"idx": "cosqa-train-14436", "doc": "reduce functon not defined in python", "code": "def compose(func_list):\n        def f(G, bim):\n        for func in func_list:\n            G, bim = func(G, bim)\n        return G, bim\n\n    return f", "method_name": "compose", "docstring_tokens": "composion of preprocessing functions"}
{"idx": "cosqa-train-19789", "doc": "python detect key press linux", "code": "def _kbhit_unix() -> bool:\n        dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []", "method_name": "_kbhit_unix", "docstring_tokens": "Under UNIX : is a keystroke available?"}
{"idx": "cosqa-train-17572", "doc": "how to generate random binary tree in python", "code": "def getRandomBinaryTreeLeafNode(binaryTree):\n        if binaryTree.internal == True:\n        if random.random() > 0.5:\n            return getRandomBinaryTreeLeafNode(binaryTree.left)\n        else:\n            return getRandomBinaryTreeLeafNode(binaryTree.right)\n    else:\n        return binaryTree", "method_name": "getRandomBinaryTreeLeafNode", "docstring_tokens": "Get random binary tree node ."}
{"idx": "cosqa-train-2445", "doc": "python get epoch milis from datetime", "code": "def _dt_to_epoch(dt):\n                try:\n            epoch = dt.timestamp()\n        except AttributeError:              epoch = (dt - datetime(1970, 1, 1)).total_seconds()\n        return epoch", "method_name": "_dt_to_epoch", "docstring_tokens": "Convert datetime to epoch seconds ."}
{"idx": "cosqa-train-15289", "doc": "python get environ user windows", "code": "def get_user_name():\n        if sys.platform == 'win32':\n                user = os.getenv('USERNAME')\n    else:\n        user = os.getenv('LOGNAME')\n\n    return user", "method_name": "get_user_name", "docstring_tokens": "Get user name provide by operating system"}
{"idx": "cosqa-train-9986", "doc": "iterator is past the end python", "code": "def __next__(self):\n        res = self._head\n    self._fill()\n    if res is None:\n      raise StopIteration()\n    return res", "method_name": "__next__", "docstring_tokens": "Pop the head off the iterator and return it ."}
{"idx": "cosqa-train-9114", "doc": "python if file not exist then creat", "code": "def check_create_folder(filename):\n        os.makedirs(os.path.dirname(filename), exist_ok=True)", "method_name": "check_create_folder", "docstring_tokens": "Check if the folder exisits . If not create the folder"}
{"idx": "cosqa-train-18440", "doc": "python howe to tell if path passed in is absolute or relative", "code": "def is_relative_url(url):\n        if url.startswith(\"        return None\n    if url.find(\"://\") > 0 or url.startswith(\"//\"):\n                return False\n    return True", "method_name": "is_relative_url", "docstring_tokens": "simple method to determine if a url is relative or absolute"}
{"idx": "cosqa-train-16521", "doc": "maker a string lowercase pythong", "code": "def to_snake_case(text):\n        s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()", "method_name": "to_snake_case", "docstring_tokens": "Convert to snake case ."}
{"idx": "cosqa-train-9880", "doc": "python sys stdout write new line", "code": "def println(msg):\n        sys.stdout.write(msg)\n    sys.stdout.flush()\n    sys.stdout.write('\\x08' * len(msg))\n    sys.stdout.flush()", "method_name": "println", "docstring_tokens": "Convenience function to print messages on a single line in the terminal"}
{"idx": "cosqa-train-11091", "doc": "python how to create a iterable", "code": "def force_iterable(f):\n        def wrapper(*args, **kwargs):\n        r = f(*args, **kwargs)\n        if hasattr(r, '__iter__'):\n            return r\n        else:\n            return [r]\n    return wrapper", "method_name": "force_iterable", "docstring_tokens": "Will make any functions return an iterable objects by wrapping its result in a list ."}
{"idx": "cosqa-train-9907", "doc": "how to use python function in tensorflow", "code": "def _float_feature(value):\n    if not isinstance(value, list):\n    value = [value]\n  return tf.train.Feature(float_list=tf.train.FloatList(value=value))", "method_name": "_float_feature", "docstring_tokens": "Wrapper for inserting float features into Example proto ."}
{"idx": "cosqa-train-11127", "doc": "python how to get range of array with positive values numpy", "code": "def _interval_to_bound_points(array):\n        array_boundaries = np.array([x.left for x in array])\n    array_boundaries = np.concatenate(\n        (array_boundaries, np.array([array[-1].right])))\n\n    return array_boundaries", "method_name": "_interval_to_bound_points", "docstring_tokens": "Helper function which returns an array with the Intervals boundaries ."}
{"idx": "cosqa-train-10271", "doc": "python 3 a build string from iterable", "code": "def commajoin_as_strings(iterable):\n        return _(u',').join((six.text_type(i) for i in iterable))", "method_name": "commajoin_as_strings", "docstring_tokens": "Join the given iterable with"}
{"idx": "cosqa-train-12615", "doc": "unchecking a radio button python", "code": "def checkbox_uncheck(self, force_check=False):\n                if self.get_attribute('checked'):\n            self.click(force_click=force_check)", "method_name": "checkbox_uncheck", "docstring_tokens": "Wrapper to uncheck a checkbox"}
{"idx": "cosqa-train-12906", "doc": "python expected type sized", "code": "def _requiredSize(shape, dtype):\n\treturn math.floor(np.prod(np.asarray(shape, dtype=np.uint64)) * np.dtype(dtype).itemsize)", "method_name": "_requiredSize", "docstring_tokens": "Determines the number of bytes required to store a NumPy array with the specified shape and datatype ."}
{"idx": "cosqa-train-18559", "doc": "python load csv to numpy array", "code": "def csv_to_numpy(string_like, dtype=None):          stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')", "method_name": "csv_to_numpy", "docstring_tokens": "Convert a CSV object to a numpy array ."}
{"idx": "cosqa-dev-141", "doc": "python remove element from list time complexity", "code": "def remove_elements(target, indices):\n        copied = list(target)\n\n    for index in reversed(indices):\n        del copied[index]\n    return copied", "method_name": "remove_elements", "docstring_tokens": "Remove multiple elements from a list and return result . This implementation is faster than the alternative below . Also note the creation of a new list to avoid altering the original . We don t have any current use for the original intact list but may in the future ..."}
{"idx": "cosqa-train-9520", "doc": "python property by string name", "code": "def get_propety_by_name(pif, name):\n        warn(\"This method has been deprecated in favor of get_property_by_name\")\n    return next((x for x in pif.properties if x.name == name), None)", "method_name": "get_propety_by_name", "docstring_tokens": "Get a property by name"}
{"idx": "cosqa-train-7816", "doc": "index of an entry in a list python", "code": "def is_in(self, search_list, pair):\n                index = -1\n        for nr, i in enumerate(search_list):\n            if(np.all(i == pair)):\n                return nr\n        return index", "method_name": "is_in", "docstring_tokens": "If pair is in search_list return the index . Otherwise return - 1"}
{"idx": "cosqa-train-4764", "doc": "python how to determine if an iterable is iterable", "code": "def _is_iterable(item):\n        return isinstance(item, collections.Iterable) and not isinstance(item, six.string_types)", "method_name": "_is_iterable", "docstring_tokens": "Checks if an item is iterable ( list tuple generator ) but not string"}
{"idx": "cosqa-train-18858", "doc": "python how to create date from string", "code": "def get_from_gnucash26_date(date_str: str) -> date:\n        date_format = \"%Y%m%d\"\n    result = datetime.strptime(date_str, date_format).date()\n    return result", "method_name": "get_from_gnucash26_date", "docstring_tokens": "Creates a datetime from GnuCash 2 . 6 date string"}
{"idx": "cosqa-train-11312", "doc": "how to append a line in a file in the middle of file in python", "code": "def prepend_line(filepath, line):\n        with open(filepath) as f:\n        lines = f.readlines()\n\n    lines.insert(0, line)\n\n    with open(filepath, 'w') as f:\n        f.writelines(lines)", "method_name": "prepend_line", "docstring_tokens": "Rewrite a file adding a line to its beginning ."}
{"idx": "cosqa-train-11876", "doc": "how to split a string by every character in python", "code": "def _split(string, splitters):\n        part = ''\n    for character in string:\n        if character in splitters:\n            yield part\n            part = ''\n        else:\n            part += character\n    yield part", "method_name": "_split", "docstring_tokens": "Splits a string into parts at multiple characters"}
{"idx": "cosqa-train-19520", "doc": "python get index of element each time it appears in list", "code": "def index(self, item):\n                for i, x in enumerate(self.iter()):\n            if x == item:\n                return i\n        return None", "method_name": "index", "docstring_tokens": "Not recommended for use on large lists due to time complexity but it works"}
{"idx": "cosqa-train-4792", "doc": "python how to make dot character", "code": "def _dotify(cls, data):\n        return ''.join(char if char in cls.PRINTABLE_DATA else '.' for char in data)", "method_name": "_dotify", "docstring_tokens": "Add dots ."}
{"idx": "cosqa-train-15375", "doc": "python heap top element", "code": "def pop(h):\n        n = h.size() - 1\n    h.swap(0, n)\n    down(h, 0, n)\n    return h.pop()", "method_name": "pop", "docstring_tokens": "Pop the heap value from the heap ."}
{"idx": "cosqa-train-5644", "doc": "in python, how to print strings in different colours", "code": "def cprint(string, fg=None, bg=None, end='\\n', target=sys.stdout):\n        _color_manager.set_color(fg, bg)\n    target.write(string + end)\n    target.flush()      _color_manager.set_defaults()", "method_name": "cprint", "docstring_tokens": "Print a colored string to the target handle ."}
{"idx": "cosqa-train-10096", "doc": "python yield unsupported operand type(s)", "code": "def visit_BinOp(self, node):\n                args = [self.visit(arg) for arg in (node.left, node.right)]\n        return list({frozenset.union(*x) for x in itertools.product(*args)})", "method_name": "visit_BinOp", "docstring_tokens": "Return type depend from both operand of the binary operation ."}
{"idx": "cosqa-train-7703", "doc": "how to sort files by filename python", "code": "def sort_filenames(filenames):\n        basenames = [os.path.basename(x) for x in filenames]\n    indexes = [i[0] for i in sorted(enumerate(basenames), key=lambda x:x[1])]\n    return [filenames[x] for x in indexes]", "method_name": "sort_filenames", "docstring_tokens": "sort a list of files by filename only ignoring the directory names"}
{"idx": "cosqa-train-7165", "doc": "how to change the axis range in a plot in python for subplots", "code": "def set_xlimits(self, row, column, min=None, max=None):\n                subplot = self.get_subplot_at(row, column)\n        subplot.set_xlimits(min, max)", "method_name": "set_xlimits", "docstring_tokens": "Set x - axis limits of a subplot ."}
{"idx": "cosqa-train-5794", "doc": "python view vector to asimuth elevation", "code": "def world_to_view(v):\n        return v.x * config.scale_x, v.y * config.scale_y", "method_name": "world_to_view", "docstring_tokens": "world coords to view coords ; v an eu . Vector2 returns ( float float )"}
{"idx": "cosqa-train-7664", "doc": "python sort data by variable", "code": "def sort_data(x, y):\n        xy = sorted(zip(x, y))\n    x, y = zip(*xy)\n    return x, y", "method_name": "sort_data", "docstring_tokens": "Sort the data ."}
{"idx": "cosqa-train-10854", "doc": "compute the middle index in list python", "code": "def bisect_index(a, x):\n        i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError", "method_name": "bisect_index", "docstring_tokens": "Find the leftmost index of an element in a list using binary search ."}
{"idx": "cosqa-train-6992", "doc": "python josn dump to file", "code": "def save_notebook(work_notebook, write_file):\n        with open(write_file, 'w') as out_nb:\n        json.dump(work_notebook, out_nb, indent=2)", "method_name": "save_notebook", "docstring_tokens": "Saves the Jupyter work_notebook to write_file"}
{"idx": "cosqa-train-13856", "doc": "python remove condition apply to dict", "code": "def _remove_dict_keys_with_value(dict_, val):\n    return {k: v for k, v in dict_.items() if v is not val}", "method_name": "_remove_dict_keys_with_value", "docstring_tokens": "Removes dict keys which have have self as value ."}
{"idx": "cosqa-train-11770", "doc": "python remove directory tree if no files", "code": "def clean_out_dir(directory):\n        if not isinstance(directory, path):\n        directory = path(directory)\n    for file_path in directory.files():\n        file_path.remove()\n    for dir_path in directory.dirs():\n        dir_path.rmtree()", "method_name": "clean_out_dir", "docstring_tokens": "Delete all the files and subdirectories in a directory ."}
{"idx": "cosqa-train-13922", "doc": "how to pop a node off a stack python", "code": "def push(h, x):\n        h.push(x)\n    up(h, h.size()-1)", "method_name": "push", "docstring_tokens": "Push a new value into heap ."}
{"idx": "cosqa-train-15821", "doc": "python open file with exclusive access permissions", "code": "def chmod_add_excute(filename):\n                st = os.stat(filename)\n        os.chmod(filename, st.st_mode | stat.S_IEXEC)", "method_name": "chmod_add_excute", "docstring_tokens": "Adds execute permission to file . : param filename : : return :"}
{"idx": "cosqa-train-11046", "doc": "python gevent combine multiprocessing", "code": "def fetch_event(urls):\n        rs = (grequests.get(u) for u in urls)\n    return [content.json() for content in grequests.map(rs)]", "method_name": "fetch_event", "docstring_tokens": "This parallel fetcher uses gevent one uses gevent"}
{"idx": "cosqa-train-6681", "doc": "create copy that doesn't alter original python", "code": "def copy(obj):\n    def copy(self):\n                from copy import deepcopy\n\n        return deepcopy(self)\n    obj.copy = copy\n    return obj", "method_name": "copy", "docstring_tokens": ""}
{"idx": "cosqa-train-16570", "doc": "remove trailing whitespace in python", "code": "def clean(s):\n    lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)", "method_name": "clean", "docstring_tokens": "Removes trailing whitespace on each line ."}
{"idx": "cosqa-train-6463", "doc": "python default menuitem select", "code": "def get_python(self):\n                if self.multiselect:\n            return super(MultiSelectField, self).get_python()\n\n        return self._get()", "method_name": "get_python", "docstring_tokens": "Only return cursor instance if configured for multiselect"}
{"idx": "cosqa-dev-408", "doc": "get sort indexes in a list python", "code": "def _index_ordering(redshift_list):\n                redshift_list = np.array(redshift_list)\n        sort_index = np.argsort(redshift_list)\n        return sort_index", "method_name": "_index_ordering", "docstring_tokens": ""}
{"idx": "cosqa-train-14103", "doc": "how to start a new line in python gui", "code": "def go_to_new_line(self):\n                self.stdkey_end(False, False)\n        self.insert_text(self.get_line_separator())", "method_name": "go_to_new_line", "docstring_tokens": "Go to the end of the current line and create a new line"}
{"idx": "cosqa-train-15982", "doc": "how to get tuple of colors in image python", "code": "def rgba_bytes_tuple(self, x):\n                return tuple(int(u*255.9999) for u in self.rgba_floats_tuple(x))", "method_name": "rgba_bytes_tuple", "docstring_tokens": "Provides the color corresponding to value x in the form of a tuple ( R G B A ) with int values between 0 and 255 ."}
{"idx": "cosqa-train-12120", "doc": "make datetime aware python", "code": "def date_to_datetime(x):\n        if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x", "method_name": "date_to_datetime", "docstring_tokens": "Convert a date into a datetime"}
{"idx": "cosqa-train-8617", "doc": "python dict drop empty", "code": "def purge_dict(idict):\n        odict = {}\n    for key, val in idict.items():\n        if is_null(val):\n            continue\n        odict[key] = val\n    return odict", "method_name": "purge_dict", "docstring_tokens": "Remove null items from a dictionary"}
{"idx": "cosqa-train-7344", "doc": "python pretty print without sort", "code": "def pprint(obj, verbose=False, max_width=79, newline='\\n'):\n        printer = RepresentationPrinter(sys.stdout, verbose, max_width, newline)\n    printer.pretty(obj)\n    printer.flush()\n    sys.stdout.write(newline)\n    sys.stdout.flush()", "method_name": "pprint", "docstring_tokens": "Like pretty but print to stdout ."}
{"idx": "cosqa-train-12579", "doc": "python check if interactive", "code": "def determine_interactive(self):\n\t\ttry:\n\t\t\tif not sys.stdout.isatty() or os.getpgrp() != os.tcgetpgrp(sys.stdout.fileno()):\n\t\t\t\tself.interactive = 0\n\t\t\t\treturn False\n\t\texcept Exception:\n\t\t\tself.interactive = 0\n\t\t\treturn False\n\t\tif self.interactive == 0:\n\t\t\treturn False\n\t\treturn True", "method_name": "determine_interactive", "docstring_tokens": "Determine whether we re in an interactive shell . Sets interactivity off if appropriate . cf http : // stackoverflow . com / questions / 24861351 / how - to - detect - if - python - script - is - being - run - as - a - background - process"}
{"idx": "cosqa-train-13747", "doc": "python pid determine existence", "code": "def pid_exists(pid):\n        try:\n        os.kill(pid, 0)\n    except OSError as exc:\n        return exc.errno == errno.EPERM\n    else:\n        return True", "method_name": "pid_exists", "docstring_tokens": "Determines if a system process identifer exists in process table ."}
{"idx": "cosqa-train-9532", "doc": "python pymongo insert without duplicatte", "code": "def insert_one(self, mongo_collection, doc, mongo_db=None, **kwargs):\n                collection = self.get_collection(mongo_collection, mongo_db=mongo_db)\n\n        return collection.insert_one(doc, **kwargs)", "method_name": "insert_one", "docstring_tokens": "Inserts a single document into a mongo collection https : // api . mongodb . com / python / current / api / pymongo / collection . html#pymongo . collection . Collection . insert_one"}
{"idx": "cosqa-train-13962", "doc": "how to read json files with multiple object python", "code": "def _read_json_file(self, json_file):\n                self.log.debug(\"Reading '%s' JSON file...\" % json_file)\n\n        with open(json_file, 'r') as f:\n            return json.load(f, object_pairs_hook=OrderedDict)", "method_name": "_read_json_file", "docstring_tokens": "Helper function to read JSON file as OrderedDict"}
{"idx": "cosqa-train-6510", "doc": "python discord leave voice channel", "code": "async def join(self, ctx, *, channel: discord.VoiceChannel):\n                if ctx.voice_client is not None:\n            return await ctx.voice_client.move_to(channel)\n\n        await channel.connect()", "method_name": "join", "docstring_tokens": "Joins a voice channel"}
{"idx": "cosqa-train-9993", "doc": "python unittest make tests discoverable", "code": "def test():\n        import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)", "method_name": "test", "docstring_tokens": "Run the unit tests ."}
{"idx": "cosqa-train-7967", "doc": "multiline text send message python", "code": "async def _send_plain_text(self, request: Request, stack: Stack):\n                await self._send_text(request, stack, None)", "method_name": "_send_plain_text", "docstring_tokens": "Sends plain text using _send_text () ."}
{"idx": "cosqa-train-6837", "doc": "extract integers from string in python", "code": "def get_numbers(s):\n        result = map(int, re.findall(r'[0-9]+', unicode(s)))\n    return result + [1] * (2 - len(result))", "method_name": "get_numbers", "docstring_tokens": "Extracts all integers from a string an return them in a list"}
{"idx": "cosqa-train-14143", "doc": "python take a string after the title", "code": "def _format_title_string(self, title_string):\n                return self._title_string_format_text_tag(title_string.replace(self.icy_tokkens[0], self.icy_title_prefix))", "method_name": "_format_title_string", "docstring_tokens": "format mpv s title"}
{"idx": "cosqa-dev-130", "doc": "how to randomly select rows in ndarray in python", "code": "def downsample(array, k):\n        length = array.shape[0]\n    indices = random.sample(xrange(length), k)\n    return array[indices]", "method_name": "downsample", "docstring_tokens": "Choose k random elements of array ."}
{"idx": "cosqa-train-13902", "doc": "how to open a file with a path in python", "code": "def get_file_string(filepath):\n        with open(os.path.abspath(filepath)) as f:\n        return f.read()", "method_name": "get_file_string", "docstring_tokens": "Get string from file ."}
{"idx": "cosqa-dev-123", "doc": "python count distance between two vectors", "code": "def distance(vec1, vec2):\n                if isinstance(vec1, Vector2) \\\n                and isinstance(vec2, Vector2):\n            dist_vec = vec2 - vec1\n            return dist_vec.length()\n        else:\n            raise TypeError(\"vec1 and vec2 must be Vector2's\")", "method_name": "distance", "docstring_tokens": "Calculate the distance between two Vectors"}
{"idx": "cosqa-train-10937", "doc": "python get dimensions of list", "code": "def get_dimension_array(array):\n        if all(isinstance(el, list) for el in array):\n        result = [len(array), len(max([x for x in array], key=len,))]\n\n        else:\n        result = [len(array), 1]\n\n    return result", "method_name": "get_dimension_array", "docstring_tokens": "Get dimension of an array getting the number of rows and the max num of columns ."}
{"idx": "cosqa-train-6627", "doc": "python filter lowpass minmum cutoff frequency", "code": "def fft_bandpassfilter(data, fs, lowcut, highcut):\n        fft = np.fft.fft(data)\n                bp = fft.copy()\n\n                    bp *= fft.dot(fft) / bp.dot(bp)\n\n        ibp = 12 * np.fft.ifft(bp)\n    return ibp", "method_name": "fft_bandpassfilter", "docstring_tokens": "http : // www . swharden . com / blog / 2009 - 01 - 21 - signal - filtering - with - python / #comment - 16801"}
{"idx": "cosqa-train-12362", "doc": "python 3, seperate a string into a list at comma", "code": "def comma_delimited_to_list(list_param):\n        if isinstance(list_param, list):\n        return list_param\n    if isinstance(list_param, str):\n        return list_param.split(',')\n    else:\n        return []", "method_name": "comma_delimited_to_list", "docstring_tokens": "Convert comma - delimited list / string into a list of strings"}
{"idx": "cosqa-train-19381", "doc": "how to delete an element in a python dictionary", "code": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None:\n        for d in dict_list:\n        d.pop(key, None)", "method_name": "dictlist_wipe_key", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d delete d [ key ] if it exists ."}
{"idx": "cosqa-train-9187", "doc": "how know if the box was selected in checkbox in python", "code": "def set_value(self, value):\n                if value:\n            self.setChecked(Qt.Checked)\n        else:\n            self.setChecked(Qt.Unchecked)", "method_name": "set_value", "docstring_tokens": "Set value of the checkbox ."}
{"idx": "cosqa-train-10404", "doc": "standard scalar function in python", "code": "def Softsign(a):\n        return np.divide(a, np.add(np.abs(a), 1)),", "method_name": "Softsign", "docstring_tokens": "Softsign op ."}
{"idx": "cosqa-train-9537", "doc": "python random gaussian distribution noise", "code": "def rlognormal(mu, tau, size=None):\n        return np.random.lognormal(mu, np.sqrt(1. / tau), size)", "method_name": "rlognormal", "docstring_tokens": "Return random lognormal variates ."}
{"idx": "cosqa-train-12390", "doc": "return the number of numeric attributes in python", "code": "def __len__(self):\n\t\treturn len([i for i in (set(dir(self)) - self._STANDARD_ATTRS) if i[0] != '_'])", "method_name": "__len__", "docstring_tokens": "Get a list of the public data attributes ."}
{"idx": "cosqa-train-7322", "doc": "python pil camera capture", "code": "def read(self):\n                stream = BytesIO()\n        self.cam.capture(stream, format='png')\n                stream.seek(0)\n        return Image.open(stream)", "method_name": "read", "docstring_tokens": "https : // picamera . readthedocs . io / en / release - 1 . 13 / recipes1 . html#capturing - to - a - pil - image"}
{"idx": "cosqa-train-12959", "doc": "python flask create cookie expiration", "code": "def logout(cache):\n        cache.set(flask.session['auth0_key'], None)\n    flask.session.clear()\n    return True", "method_name": "logout", "docstring_tokens": "Logs out the current session by removing it from the cache . This is expected to only occur when a session has"}
{"idx": "cosqa-train-11983", "doc": "python sqlalchemy model *", "code": "def save(self):\n                self.session.add(self)\n        self.session.flush()\n        return self", "method_name": "save", "docstring_tokens": "Saves the updated model to the current entity db ."}
{"idx": "cosqa-train-636", "doc": "python how to move to next command in for loop", "code": "def do_next(self, args):\n                self._do_print_from_last_cmd = True\n        self._interp.step_over()\n        return True", "method_name": "do_next", "docstring_tokens": "Step over the next statement"}
{"idx": "cosqa-train-10526", "doc": "python check if object is a char", "code": "def is_string(obj):\n        if PYTHON3:\n        str_type = (bytes, str)\n    else:\n        str_type = (bytes, str, unicode)\n    return isinstance(obj, str_type)", "method_name": "is_string", "docstring_tokens": "Is this a string ."}
{"idx": "cosqa-train-7078", "doc": "how to achieve logarithmic complexity in python", "code": "def log_loss(preds, labels):\n        log_likelihood = np.sum(labels * np.log(preds)) / len(preds)\n    return -log_likelihood", "method_name": "log_loss", "docstring_tokens": "Logarithmic loss with non - necessarily - binary labels ."}
{"idx": "cosqa-train-4971", "doc": "python listbox scrollbar not tk", "code": "def __init__(self, master=None, compound=tk.RIGHT, autohidescrollbar=True, **kwargs):\n                ttk.Frame.__init__(self, master)\n        self.columnconfigure(1, weight=1)\n        self.rowconfigure(0, weight=1)\n        self.listbox = tk.Listbox(self, **kwargs)\n        if autohidescrollbar:\n            self.scrollbar = AutoHideScrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview)\n        else:\n            self.scrollbar = ttk.Scrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview)\n        self.config_listbox(yscrollcommand=self.scrollbar.set)\n        if compound is not tk.LEFT and compound is not tk.RIGHT:\n            raise ValueError(\"Invalid compound value passed: {0}\".format(compound))\n        self.__compound = compound\n        self._grid_widgets()", "method_name": "__init__", "docstring_tokens": "Create a Listbox with a vertical scrollbar ."}
{"idx": "cosqa-train-18815", "doc": "identify the most common number in an array python", "code": "def most_significant_bit(lst: np.ndarray) -> int:\n        return np.argwhere(np.asarray(lst) == 1)[0][0]", "method_name": "most_significant_bit", "docstring_tokens": "A helper function that finds the position of the most significant bit in a 1darray of 1s and 0s i . e . the first position where a 1 appears reading left to right ."}
{"idx": "cosqa-train-8090", "doc": "pull multiple values to make table python", "code": "def _tab(content):\n        response = _data_frame(content).to_csv(index=False,sep='\\t')\n    return response", "method_name": "_tab", "docstring_tokens": "Helper funcation that converts text - based get response to tab separated values for additional manipulation ."}
{"idx": "cosqa-train-10324", "doc": "python adjust data to normal distribution", "code": "def normalize(data):\n        out_data = data.copy()\n\n    for i, sample in enumerate(out_data):\n        out_data[i] /= sum(out_data[i])\n\n    return out_data", "method_name": "normalize", "docstring_tokens": "Normalize the data to be in the [ 0 1 ] range ."}
{"idx": "cosqa-train-17806", "doc": "python check if float has no floating points", "code": "def is_finite(value: Any) -> bool:\n        return isinstance(value, int) or (isinstance(value, float) and isfinite(value))", "method_name": "is_finite", "docstring_tokens": "Return true if a value is a finite number ."}
{"idx": "cosqa-train-18378", "doc": "string remove the last blank python", "code": "def remove_blank_lines(string):\n        return \"\\n\".join(line\n                     for line in string.split(\"\\n\")\n                     if len(line.strip()))", "method_name": "remove_blank_lines", "docstring_tokens": "Removes all blank lines in @string"}
{"idx": "cosqa-train-15422", "doc": "python how to display object attributes", "code": "def _repr(obj):\n        vals = \", \".join(\"{}={!r}\".format(\n        name, getattr(obj, name)) for name in obj._attribs)\n    if vals:\n        t = \"{}(name={}, {})\".format(obj.__class__.__name__, obj.name, vals)\n    else:\n        t = \"{}(name={})\".format(obj.__class__.__name__, obj.name)\n    return t", "method_name": "_repr", "docstring_tokens": "Show the received object as precise as possible ."}
{"idx": "cosqa-train-19985", "doc": "determine if a list of numbers contains duplicates python", "code": "def find_duplicates(l: list) -> set:\n        return set([x for x in l if l.count(x) > 1])", "method_name": "find_duplicates", "docstring_tokens": "Return the duplicates in a list ."}
{"idx": "cosqa-train-12927", "doc": "python figure add title label size", "code": "def label_saves(name):\n        plt.legend(loc=0)\n    plt.ylim([0, 1.025])\n    plt.xlabel('$U/D$', fontsize=20)\n    plt.ylabel('$Z$', fontsize=20)\n    plt.savefig(name, dpi=300, format='png',\n            transparent=False, bbox_inches='tight', pad_inches=0.05)", "method_name": "label_saves", "docstring_tokens": "Labels plots and saves file"}
{"idx": "cosqa-train-19204", "doc": "python networkx longest path directed acyclic graph", "code": "def dag_longest_path(graph, source, target):\n        if source == target:\n        return [source]\n    allpaths = nx.all_simple_paths(graph, source, target)\n    longest_path = []\n    for l in allpaths:\n        if len(l) > len(longest_path):\n            longest_path = l\n    return longest_path", "method_name": "dag_longest_path", "docstring_tokens": "Finds the longest path in a dag between two nodes"}
{"idx": "cosqa-train-14117", "doc": "how to take list as input in python seperated with spaces", "code": "def itemlist(item, sep, suppress_trailing=True):\n        return condense(item + ZeroOrMore(addspace(sep + item)) + Optional(sep.suppress() if suppress_trailing else sep))", "method_name": "itemlist", "docstring_tokens": "Create a list of items seperated by seps ."}
{"idx": "cosqa-train-12036", "doc": "is a list in python an array", "code": "def to_list(self):\n                return [[int(self.table.cell_values[0][1]), int(self.table.cell_values[0][2])],\n                [int(self.table.cell_values[1][1]), int(self.table.cell_values[1][2])]]", "method_name": "to_list", "docstring_tokens": "Convert this confusion matrix into a 2x2 plain list of values ."}
{"idx": "cosqa-train-10603", "doc": "python cosine similarity of two vectors", "code": "def cross_v2(vec1, vec2):\n        return vec1.y * vec2.x - vec1.x * vec2.y", "method_name": "cross_v2", "docstring_tokens": "Return the crossproduct of the two vectors as a Vec2 . Cross product doesn t really make sense in 2D but return the Z component of the 3d result ."}
{"idx": "cosqa-train-13884", "doc": "how to model a sphere python", "code": "def Fsphere(q, R):\n        return 4 * np.pi / q ** 3 * (np.sin(q * R) - q * R * np.cos(q * R))", "method_name": "Fsphere", "docstring_tokens": "Scattering form - factor amplitude of a sphere normalized to F ( q = 0 ) = V"}
{"idx": "cosqa-train-13567", "doc": "how to check paths in python", "code": "def is_readable_dir(path):\n    return os.path.isdir(path) and os.access(path, os.R_OK) and os.access(path, os.X_OK)", "method_name": "is_readable_dir", "docstring_tokens": "Returns whether a path names an existing directory we can list and read files from ."}
{"idx": "cosqa-train-9910", "doc": "python test truth value of list", "code": "def assert_exactly_one_true(bool_list):\n        assert isinstance(bool_list, list)\n    counter = 0\n    for item in bool_list:\n        if item:\n            counter += 1\n    return counter == 1", "method_name": "assert_exactly_one_true", "docstring_tokens": "This method asserts that only one value of the provided list is True ."}
{"idx": "cosqa-train-3556", "doc": "python string value of enum", "code": "def EnumValueName(self, enum, value):\n        return self.enum_types_by_name[enum].values_by_number[value].name", "method_name": "EnumValueName", "docstring_tokens": "Returns the string name of an enum value ."}
{"idx": "cosqa-train-6407", "doc": "python create null pointer with ctypes", "code": "def POINTER(obj):\n        p = ctypes.POINTER(obj)\n    if not isinstance(p.from_param, classmethod):\n        def from_param(cls, x):\n            if x is None:\n                return cls()\n            else:\n                return x\n        p.from_param = classmethod(from_param)\n\n    return p", "method_name": "POINTER", "docstring_tokens": "Create ctypes pointer to object ."}
{"idx": "cosqa-train-11407", "doc": "python md5 hash string", "code": "def md5_string(s):\n        m = hashlib.md5()\n    m.update(s)\n    return str(m.hexdigest())", "method_name": "md5_string", "docstring_tokens": "Shortcut to create md5 hash : param s : : return :"}
{"idx": "cosqa-train-11151", "doc": "python how to match dictionarys", "code": "def intersect(d1, d2):\n        return dict((k, d1[k]) for k in d1 if k in d2 and d1[k] == d2[k])", "method_name": "intersect", "docstring_tokens": "Intersect dictionaries d1 and d2 by key * and * value ."}
{"idx": "cosqa-train-10325", "doc": "select elements from a list, then delete these elements in the original list python", "code": "def remove_elements(target, indices):\n        copied = list(target)\n\n    for index in reversed(indices):\n        del copied[index]\n    return copied", "method_name": "remove_elements", "docstring_tokens": "Remove multiple elements from a list and return result . This implementation is faster than the alternative below . Also note the creation of a new list to avoid altering the original . We don t have any current use for the original intact list but may in the future ..."}
{"idx": "cosqa-train-8092", "doc": "pybool to c++ python 3", "code": "def convertToBool():\n        if not OPTIONS.strictBool.value:\n        return []\n\n    REQUIRES.add('strictbool.asm')\n\n    result = []\n    result.append('pop af')\n    result.append('call __NORMALIZE_BOOLEAN')\n    result.append('push af')\n\n    return result", "method_name": "convertToBool", "docstring_tokens": "Convert a byte value to boolean ( 0 or 1 ) if the global flag strictBool is True"}
{"idx": "cosqa-train-11296", "doc": "how to add a ? in python url", "code": "def append_query_parameter(url, parameters, ignore_if_exists=True):\n        if ignore_if_exists:\n        for key in parameters.keys():\n            if key + \"=\" in url:\n                del parameters[key]\n    parameters_str = \"&\".join(k + \"=\" + v for k, v in parameters.items())\n    append_token = \"&\" if \"?\" in url else \"?\"\n    return url + append_token + parameters_str", "method_name": "append_query_parameter", "docstring_tokens": "quick and dirty appending of query parameters to a url"}
{"idx": "cosqa-train-13226", "doc": "python how to check whether the process with pid exist", "code": "def pid_exists(pid):\n        try:\n        os.kill(pid, 0)\n    except OSError as exc:\n        return exc.errno == errno.EPERM\n    else:\n        return True", "method_name": "pid_exists", "docstring_tokens": "Determines if a system process identifer exists in process table ."}
{"idx": "cosqa-train-11339", "doc": "how to cehck if somethign is a constant python", "code": "def is_static(*p):\n        return all(is_CONST(x) or\n               is_number(x) or\n               is_const(x)\n               for x in p)", "method_name": "is_static", "docstring_tokens": "A static value ( does not change at runtime ) which is known at compile time"}
{"idx": "cosqa-train-8363", "doc": "python check if variable exists in locals", "code": "def getvariable(name):\n        import inspect\n    fr = inspect.currentframe()\n    try:\n        while fr:\n            fr = fr.f_back\n            vars = fr.f_locals\n            if name in vars:\n                return vars[name]\n    except:\n        pass\n    return None", "method_name": "getvariable", "docstring_tokens": "Get the value of a local variable somewhere in the call stack ."}
{"idx": "cosqa-train-18344", "doc": "python filter a dictionary by value", "code": "def _(f, x):\n        return {k: v for k, v in x.items() if f(k, v)}", "method_name": "_", "docstring_tokens": "filter for dict note f should have signature : f :: key - > value - > bool"}
{"idx": "cosqa-train-17007", "doc": "read json file and turn into dictionary using python", "code": "def from_file(file_path) -> dict:\n                with io.open(file_path, 'r', encoding='utf-8') as json_stream:\n            return Json.parse(json_stream, True)", "method_name": "from_file", "docstring_tokens": "Load JSON file"}
{"idx": "cosqa-train-10471", "doc": "python change the shape of list", "code": "def shape_list(l,shape,dtype):\n        return np.array(l, dtype=dtype).reshape(shape)", "method_name": "shape_list", "docstring_tokens": "Shape a list of lists into the appropriate shape and data type"}
{"idx": "cosqa-train-17916", "doc": "how to get the datatypes in python", "code": "def dtypes(self):\n                return [(str(f.name), f.dataType.simpleString()) for f in self.schema.fields]", "method_name": "dtypes", "docstring_tokens": "Returns all column names and their data types as a list ."}
{"idx": "cosqa-train-12023", "doc": "initializing an empty string with a size python", "code": "def random_str(size=10):\n        return ''.join(random.choice(string.ascii_lowercase) for _ in range(size))", "method_name": "random_str", "docstring_tokens": "create random string of selected size"}
{"idx": "cosqa-train-17405", "doc": "cast str as int in python", "code": "def try_cast_int(s):\n        try:\n        temp = re.findall('\\d', str(s))\n        temp = ''.join(temp)\n        return int(temp)\n    except:\n        return s", "method_name": "try_cast_int", "docstring_tokens": "( str ) - > int All the digits in a given string are concatenated and converted into a single number ."}
{"idx": "cosqa-train-5849", "doc": "python, sql table column details", "code": "def column_names(self, table):\n            table_info = self.execute(\n        u'PRAGMA table_info(%s)' % quote(table))\n      return (column['name'] for column in table_info)", "method_name": "column_names", "docstring_tokens": "An iterable of column names for a particular table or view ."}
{"idx": "cosqa-dev-560", "doc": "python pathlib to traverse directories", "code": "def get_files(dir_name):\n        return [(os.path.join('.', d), [os.path.join(d, f) for f in files]) for d, _, files in os.walk(dir_name)]", "method_name": "get_files", "docstring_tokens": "Simple directory walker"}
{"idx": "cosqa-train-14803", "doc": "python create list of columns with their dtype", "code": "def _get_str_columns(sf):\n        return [name for name in sf.column_names() if sf[name].dtype == str]", "method_name": "_get_str_columns", "docstring_tokens": "Returns a list of names of columns that are string type ."}
{"idx": "cosqa-train-9967", "doc": "python turn all nested object to dict", "code": "def as_dict(self):\n                dicts = [x.as_dict for x in self.children]\n        return {'{0} {1}'.format(self.name, self.value): dicts}", "method_name": "as_dict", "docstring_tokens": "Return all child objects in nested dict ."}
{"idx": "cosqa-train-11699", "doc": "python read dicom images", "code": "def numpy(self):\n                        image_reader = gdcm.ImageReader()\n        image_reader.SetFileName(self.fname)\n        if not image_reader.Read():\n            raise IOError(\"Could not read DICOM image\")\n        pixel_array = self._gdcm_to_numpy(image_reader.GetImage())\n        return pixel_array", "method_name": "numpy", "docstring_tokens": "Grabs image data and converts it to a numpy array"}
{"idx": "cosqa-train-9285", "doc": "python making string lower case", "code": "def to_camel(s):\n            return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), '_' + s)", "method_name": "to_camel", "docstring_tokens": ": param string s : under_scored string to be CamelCased : return : CamelCase version of input : rtype : str"}
{"idx": "cosqa-train-9519", "doc": "how to implement a macro in python", "code": "def define_macro(self, name, themacro):\n                from IPython.core import macro\n\n        if isinstance(themacro, basestring):\n            themacro = macro.Macro(themacro)\n        if not isinstance(themacro, macro.Macro):\n            raise ValueError('A macro must be a string or a Macro instance.')\n        self.user_ns[name] = themacro", "method_name": "define_macro", "docstring_tokens": "Define a new macro"}
{"idx": "cosqa-train-14131", "doc": "python subprocess close stdin", "code": "def _finish(self):\n                if self._process.returncode is None:\n            self._process.stdin.flush()\n            self._process.stdin.close()\n            self._process.wait()\n            self.closed = True", "method_name": "_finish", "docstring_tokens": "Closes and waits for subprocess to exit ."}
{"idx": "cosqa-train-16776", "doc": "sum within a comprehension python", "code": "def _accumulate(sequence, func):\n        iterator = iter(sequence)\n    total = next(iterator)\n    yield total\n    for element in iterator:\n        total = func(total, element)\n        yield total", "method_name": "_accumulate", "docstring_tokens": "Python2 accumulate implementation taken from https : // docs . python . org / 3 / library / itertools . html#itertools . accumulate"}
{"idx": "cosqa-train-12089", "doc": "python timedelta without microseconds", "code": "def timedelta_seconds(timedelta):\n        return (timedelta.total_seconds() if hasattr(timedelta, \"total_seconds\")\n            else timedelta.days * 24 * 3600 + timedelta.seconds +\n                 timedelta.microseconds / 1000000.)", "method_name": "timedelta_seconds", "docstring_tokens": "Returns the total timedelta duration in seconds ."}
{"idx": "cosqa-train-16968", "doc": "change python object to string", "code": "def string(value) -> str:\n                return system_json.dumps(Json(value).safe_object(), ensure_ascii=False)", "method_name": "string", "docstring_tokens": "string dict / object / value to JSON"}
{"idx": "cosqa-train-4701", "doc": "eit request header in python flask", "code": "def get_trace_id_from_flask():\n        if flask is None or not flask.request:\n        return None\n\n    header = flask.request.headers.get(_FLASK_TRACE_HEADER)\n\n    if header is None:\n        return None\n\n    trace_id = header.split(\"/\", 1)[0]\n\n    return trace_id", "method_name": "get_trace_id_from_flask", "docstring_tokens": "Get trace_id from flask request headers ."}
{"idx": "cosqa-dev-423", "doc": "python lower all elements in list", "code": "def gen_lower(x: Iterable[str]) -> Generator[str, None, None]:\n        for string in x:\n        yield string.lower()", "method_name": "gen_lower", "docstring_tokens": "Args : x : iterable of strings"}
{"idx": "cosqa-train-14769", "doc": "using sort to move element in to new position in list python", "code": "def insort_no_dup(lst, item):\n        import bisect\n    ix = bisect.bisect_left(lst, item)\n    if lst[ix] != item: \n        lst[ix:ix] = [item]", "method_name": "insort_no_dup", "docstring_tokens": "If item is not in lst add item to list at its sorted position"}
{"idx": "cosqa-train-19246", "doc": "remove special characters from column names in python", "code": "def normalize_column_names(df):\n    r    columns = df.columns if hasattr(df, 'columns') else df\n    columns = [c.lower().replace(' ', '_') for c in columns]\n    return columns", "method_name": "normalize_column_names", "docstring_tokens": "r Clean up whitespace in column names . See better version at pugnlp . clean_columns"}
{"idx": "cosqa-dev-345", "doc": "calculate the average of a given list in python", "code": "def mean(inlist):\n        sum = 0\n    for item in inlist:\n        sum = sum + item\n    return sum / float(len(inlist))", "method_name": "mean", "docstring_tokens": "Returns the arithematic mean of the values in the passed list . Assumes a 1D list but will function on the 1st dim of an array ( ! ) ."}
{"idx": "cosqa-train-10217", "doc": "past python git clone", "code": "def mkhead(repo, path):\n        return git.Head(repo, git.Head.to_full_path(path))", "method_name": "mkhead", "docstring_tokens": ": return : New branch / head instance"}
{"idx": "cosqa-train-7023", "doc": "python lambda function with 3 params", "code": "def make_lambda(call):\n        empty_args = ast.arguments(args=[], vararg=None, kwarg=None, defaults=[])\n    return ast.Lambda(args=empty_args, body=call)", "method_name": "make_lambda", "docstring_tokens": "Wrap an AST Call node to lambda expression node . call : ast . Call node"}
{"idx": "cosqa-train-12911", "doc": "check for punctuation python", "code": "def is_punctuation(text):\n        return not (text.lower() in config.AVRO_VOWELS or\n                text.lower() in config.AVRO_CONSONANTS)", "method_name": "is_punctuation", "docstring_tokens": "Check if given string is a punctuation"}
{"idx": "cosqa-train-4157", "doc": "unsupported media type json python", "code": "def parse(self, data, mimetype):\n                encoding = mimetype.params.get('charset') or 'utf-8'\n\n        return json.loads(data.decode(encoding))", "method_name": "parse", "docstring_tokens": "Parses a byte array containing a JSON document and returns a Python object . : param data : The byte array containing a JSON document . : param MimeType mimetype : The mimetype chose to parse the data . : return : A Python object ."}
{"idx": "cosqa-train-19905", "doc": "python separate string to list", "code": "def _str_to_list(value, separator):\n        value_list = [item.strip() for item in value.split(separator)]\n    value_list_sanitized = builtins.list(filter(None, value_list))\n    if len(value_list_sanitized) > 0:\n        return value_list_sanitized\n    else:\n        raise ValueError('Invalid list variable.')", "method_name": "_str_to_list", "docstring_tokens": "Convert a string to a list with sanitization ."}
{"idx": "cosqa-train-18773", "doc": "python remove phrase from list of strings", "code": "def remove_empty_text(utterances: List[Utterance]) -> List[Utterance]:\n        return [utter for utter in utterances if utter.text.strip() != \"\"]", "method_name": "remove_empty_text", "docstring_tokens": "Remove empty utterances from a list of utterances Args : utterances : The list of utterance we are processing"}
{"idx": "cosqa-train-4468", "doc": "python fastest way to load data", "code": "def get_data(self):\n                try:\n            return DocumentDataDict(self.__dict__['data'])\n        except KeyError:\n            self._lazy_load()\n            return DocumentDataDict(self.__dict__['data'])", "method_name": "get_data", "docstring_tokens": "Fetch the data field if it does not exist ."}
{"idx": "cosqa-train-10637", "doc": "add noise to the audio python", "code": "def synthesize(self, duration):\n                sr = self.samplerate.samples_per_second\n        seconds = duration / Seconds(1)\n        samples = np.random.uniform(low=-1., high=1., size=int(sr * seconds))\n        return AudioSamples(samples, self.samplerate)", "method_name": "synthesize", "docstring_tokens": "Synthesize white noise"}
{"idx": "cosqa-train-10163", "doc": "object with commas turned into list python", "code": "def seq_to_str(obj, sep=\",\"):\n        if isinstance(obj, string_classes):\n        return obj\n    elif isinstance(obj, (list, tuple)):\n        return sep.join([str(x) for x in obj])\n    else:\n        return str(obj)", "method_name": "seq_to_str", "docstring_tokens": "Given a sequence convert it to a comma separated string . If however the argument is a single object return its string representation ."}
{"idx": "cosqa-train-9747", "doc": "python set limits on x axis", "code": "def set_xlimits(self, min=None, max=None):\n                self.limits['xmin'] = min\n        self.limits['xmax'] = max", "method_name": "set_xlimits", "docstring_tokens": "Set limits for the x - axis ."}
{"idx": "cosqa-train-7841", "doc": "is python ssl socket connection thread safe", "code": "def enable_ssl(self, *args, **kwargs):\n                if self.handshake_sent:\n            raise SSLError('can only enable SSL before handshake')\n\n        self.secure = True\n        self.sock = ssl.wrap_socket(self.sock, *args, **kwargs)", "method_name": "enable_ssl", "docstring_tokens": "Transforms the regular socket . socket to an ssl . SSLSocket for secure connections . Any arguments are passed to ssl . wrap_socket : http : // docs . python . org / dev / library / ssl . html#ssl . wrap_socket"}
{"idx": "cosqa-train-7998", "doc": "python3 encode decode bytes", "code": "def to_bytes(value):\n        vtype = type(value)\n\n    if vtype == bytes or vtype == type(None):\n        return value\n\n    try:\n        return vtype.encode(value)\n    except UnicodeEncodeError:\n        pass\n    return value", "method_name": "to_bytes", "docstring_tokens": "str to bytes ( py3k )"}
{"idx": "cosqa-train-2119", "doc": "xsd file to python object", "code": "def from_file(cls, file_path, validate=True):\n                return xmlmap.load_xmlobject_from_file(file_path, xmlclass=cls, validate=validate)", "method_name": "from_file", "docstring_tokens": "Creates a Python object from a XML file"}
{"idx": "cosqa-train-10773", "doc": "python expand a path", "code": "def expandpath(path):\n        return os.path.expandvars(os.path.expanduser(path)).replace(\"//\", \"/\")", "method_name": "expandpath", "docstring_tokens": "Expand a filesystem path that may or may not contain user / env vars ."}
{"idx": "cosqa-train-12970", "doc": "python flask template table example", "code": "def index():\n        global productpage\n\n    table = json2html.convert(json = json.dumps(productpage),\n                              table_attributes=\"class=\\\"table table-condensed table-bordered table-hover\\\"\")\n\n    return render_template('index.html', serviceTable=table)", "method_name": "index", "docstring_tokens": "Display productpage with normal user and test user buttons"}
{"idx": "cosqa-train-2983", "doc": "how to check if object defined python", "code": "def is_defined(self, objtxt, force_import=False):\n                return self.interpreter.is_defined(objtxt, force_import)", "method_name": "is_defined", "docstring_tokens": "Return True if object is defined"}
{"idx": "cosqa-train-14540", "doc": "s3 sync between bucket python", "code": "def s3(ctx, bucket_name, data_file, region):\n        if not ctx.data_file:\n        ctx.data_file = data_file\n\n    if not ctx.bucket_name:\n        ctx.bucket_name = bucket_name\n\n    if not ctx.region:\n        ctx.region = region\n\n    ctx.type = 's3'", "method_name": "s3", "docstring_tokens": "Use the S3 SWAG backend ."}
{"idx": "cosqa-train-6525", "doc": "change the position of 3d coordinate in python", "code": "def list(self):\n                return [self._pos3d.x, self._pos3d.y, self._pos3d.z]", "method_name": "list", "docstring_tokens": "position in 3d space"}
{"idx": "cosqa-train-11131", "doc": "python how to get the number of cores in a computer", "code": "def _num_cpus_darwin():\n        p = subprocess.Popen(['sysctl','-n','hw.ncpu'],stdout=subprocess.PIPE)\n    return p.stdout.read()", "method_name": "_num_cpus_darwin", "docstring_tokens": "Return the number of active CPUs on a Darwin system ."}
{"idx": "cosqa-train-4829", "doc": "python how to use pdb set trace", "code": "def set_trace():\n            pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)", "method_name": "set_trace", "docstring_tokens": "Start a Pdb instance at the calling frame with stdout routed to sys . __stdout__ ."}
{"idx": "cosqa-train-10710", "doc": "python dictionary url encode", "code": "def get_dict_to_encoded_url(data):\n        unicode_data = dict([(k, smart_str(v)) for k, v in data.items()])\n    encoded = urllib.urlencode(unicode_data)\n    return encoded", "method_name": "get_dict_to_encoded_url", "docstring_tokens": "Converts a dict to an encoded URL . Example : given data = { a : 1 b : 2 } it returns a = 1&b = 2"}
{"idx": "cosqa-train-18842", "doc": "how to check whether a string is int in python", "code": "def _isint(string):\n        return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)", "method_name": "_isint", "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"}
{"idx": "cosqa-train-16717", "doc": "python 3 change permission of file chmod", "code": "def add_exec_permission_to(target_file):\n        mode = os.stat(target_file).st_mode\n    os.chmod(target_file, mode | stat.S_IXUSR)", "method_name": "add_exec_permission_to", "docstring_tokens": "Add executable permissions to the file"}
{"idx": "cosqa-train-8829", "doc": "python gaussian filter array", "code": "def smooth_gaussian(image, sigma=1):\n        return scipy.ndimage.filters.gaussian_filter(image, sigma=sigma, mode=\"nearest\")", "method_name": "smooth_gaussian", "docstring_tokens": "Returns Gaussian smoothed image ."}
{"idx": "cosqa-train-17526", "doc": "how to cut off a calculated number to two decimals in python", "code": "def truncate(value: Decimal, n_digits: int) -> Decimal:\n        return Decimal(math.trunc(value * (10 ** n_digits))) / (10 ** n_digits)", "method_name": "truncate", "docstring_tokens": "Truncates a value to a number of decimals places"}
{"idx": "cosqa-train-14497", "doc": "replace many value at once in python", "code": "def replace_list(items, match, replacement):\n        return [replace(item, match, replacement) for item in items]", "method_name": "replace_list", "docstring_tokens": "Replaces occurrences of a match string in a given list of strings and returns a list of new strings . The match string can be a regex expression ."}
{"idx": "cosqa-train-15806", "doc": "python numpy conver to float64", "code": "def as_float_array(a):\n        return np.asarray(a, dtype=np.quaternion).view((np.double, 4))", "method_name": "as_float_array", "docstring_tokens": "View the quaternion array as an array of floats"}
{"idx": "cosqa-train-11161", "doc": "python how to rank a list object", "code": "def ranks(self, key, value):\n        return [normalize_rank(el) for el in force_list(value.get('a'))]", "method_name": "ranks", "docstring_tokens": "Populate the ranks key ."}
{"idx": "cosqa-train-7195", "doc": "how to check if file doesn't exist in python", "code": "def is_valid_file(parser, arg):\n        arg = os.path.abspath(arg)\n    if not os.path.exists(arg):\n        parser.error(\"The file %s does not exist!\" % arg)\n    else:\n        return arg", "method_name": "is_valid_file", "docstring_tokens": "Check if arg is a valid file that already exists on the file system ."}
{"idx": "cosqa-train-7384", "doc": "how to get the parent directory in python", "code": "def get_parent_dir(name):\n        parent_dir = os.path.dirname(os.path.dirname(name))\n    if parent_dir:\n        return parent_dir\n    return os.path.abspath('.')", "method_name": "get_parent_dir", "docstring_tokens": "Get the parent directory of a filename ."}
{"idx": "cosqa-train-8125", "doc": "resize an image python pil", "code": "def resize(self, size):\n                return Image(self.pil_image.resize(size, PIL.Image.ANTIALIAS))", "method_name": "resize", "docstring_tokens": "Return a new Image instance with the given size ."}
{"idx": "cosqa-train-8244", "doc": "python boxplot data frame", "code": "def compute_boxplot(self, series):\n                from matplotlib.cbook import boxplot_stats\n        series = series[series.notnull()]\n        if len(series.values) == 0:\n            return {}\n        elif not is_numeric_dtype(series):\n            return self.non_numeric_stats(series)\n        stats = boxplot_stats(list(series.values))[0]\n        stats['count'] = len(series.values)\n        stats['fliers'] = \"|\".join(map(str, stats['fliers']))\n        return stats", "method_name": "compute_boxplot", "docstring_tokens": "Compute boxplot for given pandas Series ."}
{"idx": "cosqa-train-11056", "doc": "python glpk read from lp file", "code": "def glpk_read_cplex(path):\n        from swiglpk import glp_create_prob, glp_read_lp\n\n    problem = glp_create_prob()\n    glp_read_lp(problem, None, path)\n    return problem", "method_name": "glpk_read_cplex", "docstring_tokens": "Reads cplex file and returns glpk problem ."}
{"idx": "cosqa-train-12080", "doc": "python threadpool close join", "code": "def join(self):\n\t\tself.inputfeeder_thread.join()\n\t\tself.pool.join()\n\t\tself.resulttracker_thread.join()\n\t\tself.failuretracker_thread.join()", "method_name": "join", "docstring_tokens": "Note that the Executor must be close () d elsewhere or join () will never return ."}
{"idx": "cosqa-train-11940", "doc": "python sklearn onehotencoder string values", "code": "def one_hot2string(arr, vocab):\n        tokens = one_hot2token(arr)\n    indexToLetter = _get_index_dict(vocab)\n\n    return [''.join([indexToLetter[x] for x in row]) for row in tokens]", "method_name": "one_hot2string", "docstring_tokens": "Convert a one - hot encoded array back to string"}
{"idx": "cosqa-train-19085", "doc": "python change to bytes", "code": "def to_bytes(data: Any) -> bytearray:\n    \"\"\"\n    Convert anything to a ``bytearray``.\n    \n    See\n    \n    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3\n    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1\n    \"\"\"      if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')", "method_name": "to_bytes", "docstring_tokens": "Convert anything to a bytearray . See - http : // stackoverflow . com / questions / 7585435 / best - way - to - convert - string - to - bytes - in - python - 3 - http : // stackoverflow . com / questions / 10459067 / how - to - convert - my - bytearrayb - x9e - x18k - x9a - to - something - like - this - x9e - x1"}
{"idx": "cosqa-train-7005", "doc": "python json loads try", "code": "def json(body, charset='utf-8', **kwargs):\n        return json_converter.loads(text(body, charset=charset))", "method_name": "json", "docstring_tokens": "Takes JSON formatted data converting it into native Python objects"}
{"idx": "cosqa-train-6677", "doc": "create an empty column in data frame python", "code": "def add_blank_row(self, label):\n                col_labels = self.df.columns\n        blank_item = pd.Series({}, index=col_labels, name=label)\n                self.df.loc[blank_item.name] = blank_item\n        return self.df", "method_name": "add_blank_row", "docstring_tokens": "Add a blank row with only an index value to self . df . This is done inplace ."}
{"idx": "cosqa-train-5971", "doc": "remove whitespace at end of line in python", "code": "def clean(s):\n    lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)", "method_name": "clean", "docstring_tokens": "Removes trailing whitespace on each line ."}
{"idx": "cosqa-train-12933", "doc": "python file opening modes", "code": "def open_file(file, mode):\n\tif hasattr(file, \"read\"):\n\t\treturn file\n\tif hasattr(file, \"open\"):\n\t\treturn file.open(mode)\n\treturn open(file, mode)", "method_name": "open_file", "docstring_tokens": "Open a file ."}
{"idx": "cosqa-train-8432", "doc": "python code input prompt for questions", "code": "def string_input(prompt=''):\n        v = sys.version[0]\n    if v == '3':\n        return input(prompt)\n    else:\n        return raw_input(prompt)", "method_name": "string_input", "docstring_tokens": "Python 3 input () / Python 2 raw_input ()"}
{"idx": "cosqa-train-9433", "doc": "python parse a log file that is logging", "code": "def parse(self):\n                f = open(self.parse_log_path, \"r\")\n        self.parse2(f)\n        f.close()", "method_name": "parse", "docstring_tokens": "Parse file specified by constructor ."}
{"idx": "cosqa-train-19595", "doc": "remove an entry from a dict python", "code": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None:\n        for d in dict_list:\n        d.pop(key, None)", "method_name": "dictlist_wipe_key", "docstring_tokens": "Process an iterable of dictionaries . For each dictionary d delete d [ key ] if it exists ."}
{"idx": "cosqa-train-7984", "doc": "new line statemnt pythong write", "code": "def write_line(self, line, count=1):\n                self.write(line)\n        self.write_newlines(count)", "method_name": "write_line", "docstring_tokens": "writes the line and count newlines after the line"}
{"idx": "cosqa-train-5792", "doc": "python view as series column format string", "code": "def format(x, format):\n            sl = vaex.strings.format(x, format)\n    return column.ColumnStringArrow(sl.bytes, sl.indices, sl.length, sl.offset, string_sequence=sl)", "method_name": "format", "docstring_tokens": "Uses http : // www . cplusplus . com / reference / string / to_string / for formatting"}
{"idx": "cosqa-train-7598", "doc": "python select not null column values", "code": "def selectnotnone(table, field, complement=False):\n        return select(table, field, lambda v: v is not None,\n                  complement=complement)", "method_name": "selectnotnone", "docstring_tokens": "Select rows where the given field is not None ."}
{"idx": "cosqa-train-11238", "doc": "how do functions in python know the parametr type", "code": "def is_symbol(string):\n        return (\n        is_int(string) or is_float(string) or\n        is_constant(string) or is_unary(string) or\n        is_binary(string) or\n        (string == '(') or (string == ')')\n    )", "method_name": "is_symbol", "docstring_tokens": "Return true if the string is a mathematical symbol ."}
{"idx": "cosqa-train-13050", "doc": "cursor positioning python windows", "code": "def ensure_hbounds(self):\n                self.cursor.x = min(max(0, self.cursor.x), self.columns - 1)", "method_name": "ensure_hbounds", "docstring_tokens": "Ensure the cursor is within horizontal screen bounds ."}
{"idx": "cosqa-train-11103", "doc": "python how to equally space points in an ellipse", "code": "def create_ellipse(width,height,angle):\n        angle = angle / 180.0 * np.pi\n    thetas = np.linspace(0,2*np.pi,200)\n    a = width / 2.0\n    b = height / 2.0\n\n    x = a*np.cos(thetas)*np.cos(angle) - b*np.sin(thetas)*np.sin(angle)\n    y = a*np.cos(thetas)*np.sin(angle) + b*np.sin(thetas)*np.cos(angle)\n    z = np.zeros(thetas.shape)\n    return np.vstack((x,y,z)).T", "method_name": "create_ellipse", "docstring_tokens": "Create parametric ellipse from 200 points ."}
{"idx": "cosqa-train-9780", "doc": "how to see how similar two images are in python", "code": "def _sim_fill(r1, r2, imsize):\n        bbsize = (\n        (max(r1[\"max_x\"], r2[\"max_x\"]) - min(r1[\"min_x\"], r2[\"min_x\"]))\n        * (max(r1[\"max_y\"], r2[\"max_y\"]) - min(r1[\"min_y\"], r2[\"min_y\"]))\n    )\n    return 1.0 - (bbsize - r1[\"size\"] - r2[\"size\"]) / imsize", "method_name": "_sim_fill", "docstring_tokens": "calculate the fill similarity over the image"}
{"idx": "cosqa-train-9562", "doc": "how to make a input to have no spaces in python\\", "code": "def pass_from_pipe(cls):\n                is_pipe = not sys.stdin.isatty()\n        return is_pipe and cls.strip_last_newline(sys.stdin.read())", "method_name": "pass_from_pipe", "docstring_tokens": "Return password from pipe if not on TTY else False ."}
{"idx": "cosqa-train-14356", "doc": "next line to read in python", "code": "def __next__(self):\n                        row = super(UnicodeReaderWithLineNumber, self).__next__()\n        return self.lineno + 1, row", "method_name": "__next__", "docstring_tokens": ""}
{"idx": "cosqa-train-14340", "doc": "move an item in list to front python", "code": "def list_move_to_front(l,value='other'):\n        l=list(l)\n    if value in l:\n        l.remove(value)\n        l.insert(0,value)\n    return l", "method_name": "list_move_to_front", "docstring_tokens": "if the value is in the list move it to the front and return it ."}
{"idx": "cosqa-train-10077", "doc": "python wrap (s,w) print", "code": "def _wrap(text, columns=80):\n        out = []\n    for cnt, char in enumerate(text):\n        out.append(char)\n\n        if (cnt + 1) % columns == 0:\n            out.append(\"\\n\")\n\n    return \"\".join(out)", "method_name": "_wrap", "docstring_tokens": "Own dumb reimplementation of textwrap . wrap () ."}
{"idx": "cosqa-train-18137", "doc": "how to check if missing values are blanks or nan or none in python", "code": "def warn_if_nans_exist(X):\n        null_count = count_rows_with_nans(X)\n    total = len(X)\n    percent = 100 * null_count / total\n\n    if null_count > 0:\n        warning_message = \\\n            'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' \\\n            'complete rows will be plotted.'.format(null_count, total, percent)\n        warnings.warn(warning_message, DataWarning)", "method_name": "warn_if_nans_exist", "docstring_tokens": "Warn if nans exist in a numpy array ."}
{"idx": "cosqa-train-12117", "doc": "python to get the indices of bin edges", "code": "def val_to_bin(edges, x):\n        ibin = np.digitize(np.array(x, ndmin=1), edges) - 1\n    return ibin", "method_name": "val_to_bin", "docstring_tokens": "Convert axis coordinate to bin index ."}
{"idx": "cosqa-train-10587", "doc": "python comma separated value", "code": "def list_to_csv(value):\n        if isinstance(value, (list, tuple, set)):\n        value = \",\".join(value)\n    return value", "method_name": "list_to_csv", "docstring_tokens": "Converts list to string with comma separated values . For string is no - op ."}
{"idx": "cosqa-train-13897", "doc": "python requests disable ssl certificate verification", "code": "def disable_insecure_request_warning():\n        import requests\n    from requests.packages.urllib3.exceptions import InsecureRequestWarning\n    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)", "method_name": "disable_insecure_request_warning", "docstring_tokens": "Suppress warning about untrusted SSL certificate ."}
{"idx": "cosqa-train-7918", "doc": "python var and distribution of probability", "code": "def pdf(x, mu, std):\n        return (1.0 / (std * sqrt(2 * pi))) * np.exp(-(x - mu) ** 2 / (2 * std ** 2))", "method_name": "pdf", "docstring_tokens": "Probability density function ( normal distribution )"}
{"idx": "cosqa-dev-269", "doc": "how to determine it's a orthogonal matrix using python", "code": "def is_orthogonal(\n        matrix: np.ndarray,\n        *,\n        rtol: float = 1e-5,\n        atol: float = 1e-8) -> bool:\n        return (matrix.shape[0] == matrix.shape[1] and\n            np.all(np.imag(matrix) == 0) and\n            np.allclose(matrix.dot(matrix.T), np.eye(matrix.shape[0]),\n                        rtol=rtol,\n                        atol=atol))", "method_name": "is_orthogonal", "docstring_tokens": "Determines if a matrix is approximately orthogonal ."}
{"idx": "cosqa-train-10422", "doc": "strip html tags in python", "code": "def do_striptags(value):\n        if hasattr(value, '__html__'):\n        value = value.__html__()\n    return Markup(unicode(value)).striptags()", "method_name": "do_striptags", "docstring_tokens": "Strip SGML / XML tags and replace adjacent whitespace by one space ."}
{"idx": "cosqa-train-12879", "doc": "center align python text", "code": "def center_text(text, width=80):\n        centered = []\n    for line in text.splitlines():\n        centered.append(line.center(width))\n    return \"\\n\".join(centered)", "method_name": "center_text", "docstring_tokens": "Center all lines of the text . It is assumed that all lines width is smaller then B { width } because the line width will not be checked . Args : text ( str ) : Text to wrap . width ( int ) : Maximum number of characters per line . Returns : str : Centered text ."}
{"idx": "cosqa-train-2468", "doc": "python get list of keys on an object", "code": "def get_keys_from_class(cc):\n        return [prop.name for prop in cc.properties.values() \\\n            if 'key' in prop.qualifiers]", "method_name": "get_keys_from_class", "docstring_tokens": "Return list of the key property names for a class"}
{"idx": "cosqa-train-9972", "doc": "is there any python function to check for nan valu", "code": "def reduce_fn(x):\n        values = x.values if pd and isinstance(x, pd.Series) else x\n    for v in values:\n        if not is_nan(v):\n            return v\n    return np.NaN", "method_name": "reduce_fn", "docstring_tokens": "Aggregation function to get the first non - zero value ."}
{"idx": "cosqa-train-13065", "doc": "python get cookie for request", "code": "def parse_cookies(self, req, name, field):\n                return core.get_value(req.COOKIES, name, field)", "method_name": "parse_cookies", "docstring_tokens": "Pull the value from the cookiejar ."}
{"idx": "cosqa-train-13388", "doc": "python is list no na", "code": "def is_listish(obj):\n        if isinstance(obj, (list, tuple, set)):\n        return True\n    return is_sequence(obj)", "method_name": "is_listish", "docstring_tokens": "Check if something quacks like a list ."}
{"idx": "cosqa-train-15046", "doc": "python determine if a file is image", "code": "def is_image(filename):\n            return os.path.isfile(filename) and filename.lower().endswith(ImageExts)", "method_name": "is_image", "docstring_tokens": "Determine if given filename is an image ."}
{"idx": "cosqa-train-11796", "doc": "python reorganise a data frame", "code": "def _preprocess(df):\n        df = df.stack()\n\n    df.index.rename([\"id\", \"time\"], inplace=True)      df.name = \"value\"\n    df = df.reset_index()\n\n    return df", "method_name": "_preprocess", "docstring_tokens": "given a DataFrame where records are stored row - wise rearrange it such that records are stored column - wise ."}
{"idx": "cosqa-train-12282", "doc": "read first line in txt file in python", "code": "def getfirstline(file, default):\n        with open(file, 'rb') as fh:\n        content = fh.readlines()\n        if len(content) == 1:\n            return content[0].decode('utf-8').strip('\\n')\n\n    return default", "method_name": "getfirstline", "docstring_tokens": "Returns the first line of a file ."}
{"idx": "cosqa-train-16638", "doc": "pass defined parser object to subparser python", "code": "def sub(name, func,**kwarg):\n        sp = subparsers.add_parser(name, **kwarg)\n    sp.set_defaults(func=func)\n    sp.arg = sp.add_argument\n    return sp", "method_name": "sub", "docstring_tokens": "Add subparser"}
{"idx": "cosqa-train-7552", "doc": "how to print generic error in python", "code": "def print_err(*args, end='\\n'):\n        print(*args, end=end, file=sys.stderr)\n    sys.stderr.flush()", "method_name": "print_err", "docstring_tokens": "Similar to print but prints to stderr ."}
{"idx": "cosqa-train-14625", "doc": "python change the name of a key", "code": "def unit_key_from_name(name):\n    result = name\n\n  for old, new in six.iteritems(UNIT_KEY_REPLACEMENTS):\n    result = result.replace(old, new)\n\n    result = re.sub(r'_+', '_', result.upper())\n\n  return result", "method_name": "unit_key_from_name", "docstring_tokens": "Return a legal python name for the given name for use as a unit key ."}
{"idx": "cosqa-train-12190", "doc": "moving mouse python click", "code": "def mouse_move_event(self, event):\n                self.example.mouse_position_event(event.x(), event.y())", "method_name": "mouse_move_event", "docstring_tokens": "Forward mouse cursor position events to the example"}
{"idx": "cosqa-train-14209", "doc": "python to determine if services are running", "code": "def service_available(service_name):\n        try:\n        subprocess.check_output(\n            ['service', service_name, 'status'],\n            stderr=subprocess.STDOUT).decode('UTF-8')\n    except subprocess.CalledProcessError as e:\n        return b'unrecognized service' not in e.output\n    else:\n        return True", "method_name": "service_available", "docstring_tokens": "Determine whether a system service is available"}
{"idx": "cosqa-train-18231", "doc": "python set contains multiple items", "code": "def issuperset(self, items):\n                return all(_compat.map(self._seen.__contains__, items))", "method_name": "issuperset", "docstring_tokens": "Return whether this collection contains all items ."}
{"idx": "cosqa-train-17616", "doc": "python protobyf parse from byte", "code": "def decode(self, bytes, raw=False):\n                return struct.unpack(self.format, buffer(bytes))[0]", "method_name": "decode", "docstring_tokens": "decode ( bytearray raw = False ) - > value"}
{"idx": "cosqa-train-2007", "doc": "python check if a directory is writable", "code": "def _writable_dir(path):\n        return os.path.isdir(path) and os.access(path, os.W_OK)", "method_name": "_writable_dir", "docstring_tokens": "Whether path is a directory to which the user has write access ."}
{"idx": "cosqa-train-16594", "doc": "object as list python", "code": "def as_list(self):\n                return [self.name, self.value, [x.as_list for x in self.children]]", "method_name": "as_list", "docstring_tokens": "Return all child objects in nested lists of strings ."}
{"idx": "cosqa-dev-486", "doc": "replace function nan python", "code": "def _replace_nan(a, val):\n        mask = isnull(a)\n    return where_method(val, mask, a), mask", "method_name": "_replace_nan", "docstring_tokens": "replace nan in a by val and returns the replaced array and the nan position"}
{"idx": "cosqa-train-19425", "doc": "python hash table check if key exist", "code": "def check_key(self, key: str) -> bool:\n                keys = self.get_keys()\n        return key in keys", "method_name": "check_key", "docstring_tokens": "Checks if key exists in datastore . True if yes False if no ."}
{"idx": "cosqa-train-14671", "doc": "take all points in box python", "code": "def point8_to_box(points):\n        p = points.reshape((-1, 4, 2))\n    minxy = p.min(axis=1)       maxxy = p.max(axis=1)       return np.concatenate((minxy, maxxy), axis=1)", "method_name": "point8_to_box", "docstring_tokens": "Args : points : ( nx4 ) x2 Returns : nx4 boxes ( x1y1x2y2 )"}
{"idx": "cosqa-train-14950", "doc": "python create enum by name", "code": "def get_enum_from_name(self, enum_name):\n                return next((e for e in self.enums if e.name == enum_name), None)", "method_name": "get_enum_from_name", "docstring_tokens": "Return an enum from a name Args : enum_name ( str ) : name of the enum Returns : Enum"}
{"idx": "cosqa-train-11399", "doc": "python matplotlib use arrow markers", "code": "def add_arrow(self, x1, y1, x2, y2, **kws):\n                self.panel.add_arrow(x1, y1, x2, y2, **kws)", "method_name": "add_arrow", "docstring_tokens": "add arrow to plot"}
{"idx": "cosqa-train-8819", "doc": "python function default args", "code": "def get_default_args(func):\n        args, varargs, keywords, defaults = getargspec_no_self(func)\n    return dict(zip(args[-len(defaults):], defaults))", "method_name": "get_default_args", "docstring_tokens": "returns a dictionary of arg_name : default_values for the input function"}
{"idx": "cosqa-train-19364", "doc": "python how to select first 100 rows", "code": "def genfirstvalues(cursor: Cursor, arraysize: int = 1000) \\\n        -> Generator[Any, None, None]:\n        return (row[0] for row in genrows(cursor, arraysize))", "method_name": "genfirstvalues", "docstring_tokens": "Generate the first value in each row ."}
{"idx": "cosqa-train-17740", "doc": "removing columnsns in data frame python", "code": "def clean_column_names(df: DataFrame) -> DataFrame:\n        f = df.copy()\n    f.columns = [col.strip() for col in f.columns]\n    return f", "method_name": "clean_column_names", "docstring_tokens": "Strip the whitespace from all column names in the given DataFrame and return the result ."}
{"idx": "cosqa-train-19654", "doc": "python array to torch tensor", "code": "def astensor(array: TensorLike) -> BKTensor:\n        tensor = tf.convert_to_tensor(value=array, dtype=CTYPE)\n    return tensor", "method_name": "astensor", "docstring_tokens": "Covert numpy array to tensorflow tensor"}
{"idx": "cosqa-dev-116", "doc": "how to turn a list into a csv python", "code": "def list_to_csv(value):\n        if isinstance(value, (list, tuple, set)):\n        value = \",\".join(value)\n    return value", "method_name": "list_to_csv", "docstring_tokens": "Converts list to string with comma separated values . For string is no - op ."}
{"idx": "cosqa-train-13423", "doc": "how do i unzip file in python", "code": "def _unzip_handle(handle):\n        if isinstance(handle, basestring):\n        handle = _gzip_open_filename(handle)\n    else:\n        handle = _gzip_open_handle(handle)\n    return handle", "method_name": "_unzip_handle", "docstring_tokens": "Transparently unzip the file handle"}
>>>>>>> 13ad5a2... commit
>>>>>>> 7b16988... commitit
